{
    "dataset/data.py": {
        "torch": {
            "Tensor_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_178": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_277": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_286": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_318": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_375": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainx, dim=0)",
                            "Call"
                        ],
                        [
                            "trainx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trainy, dim=0)",
                            "Call"
                        ],
                        [
                            "trainy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_454": {
                "variable": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valx, dim=0)",
                            "Call"
                        ],
                        [
                            "valx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valy, dim=0)",
                            "Call"
                        ],
                        [
                            "valy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testx, dim=0)",
                            "Call"
                        ],
                        [
                            "testx.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(testy, dim=0)",
                            "Call"
                        ],
                        [
                            "testy.transpose(3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_129": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ],
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ],
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_130": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ],
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ],
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_132": {
                "input": {
                    "value": "x1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "x2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_275": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ],
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ],
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_276": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ],
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ],
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_278": {
                "input": {
                    "value": "x1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_279": {
                "input": {
                    "value": "x2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_373": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ],
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ],
                        [
                            "x1 - torch.mean(x1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_374": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ],
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ],
                        [
                            "x2 - torch.mean(x2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_376": {
                "input": {
                    "value": "x1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_377": {
                "input": {
                    "value": "x2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers/dcrnn_cell.py": {
        "torch": {
            "sparse_coo_tensor_77": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "L.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "L.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fn(inputs, hx, output_size, bias_start=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(fn(inputs, hx, output_size, bias_start=1.0))",
                            "Call"
                        ],
                        [
                            "torch.reshape(value, (-1, self._num_nodes, output_size))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.matmul(inputs_and_state, weights))",
                            "Call"
                        ],
                        [
                            "value + biases",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self._num_nodes, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_94": {
                "variable": {
                    "value": "(r, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(fn(inputs, hx, output_size, bias_start=1.0))",
                            "Call"
                        ],
                        [
                            "torch.reshape(value, (-1, self._num_nodes, output_size))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.matmul(inputs_and_state, weights))",
                            "Call"
                        ],
                        [
                            "value + biases",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(r, (-1, self._num_nodes * self._num_units))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self._num_nodes * self._num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(u, (-1, self._num_nodes * self._num_units))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self._num_nodes * self._num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(inputs, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(inputs, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(state, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(state, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "inputs_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(inputs_and_state, weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(inputs, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(inputs, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(state, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(state, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "inputs_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x0, shape=[self._num_nodes, input_size * batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._num_nodes, input_size * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x0, shape=[self._num_nodes, input_size * batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_matrices, self._num_nodes, input_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * self._num_nodes, input_size * num_matrices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fc_params.get_weights((input_size, output_size))",
                            "Call"
                        ],
                        [
                            "self._gconv_params.get_weights((input_size * num_matrices, output_size), self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "nn_param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(*shape, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(length, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "[x, x_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, self._num_nodes * output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "input": {
                    "value": "inputs_and_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([inputs, state], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs, state], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fc_params.get_weights((input_size, output_size))",
                            "Call"
                        ],
                        [
                            "self._gconv_params.get_weights((input_size * num_matrices, output_size), self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_139": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "supports",
                            "Name"
                        ],
                        [
                            "self._supports",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x0, shape=[self._num_nodes, input_size * batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_15": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_24": {
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_143": {
                "input": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "supports",
                            "Name"
                        ],
                        [
                            "self._supports",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(support, x0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers/gat_layer.py": {
        "torch": {
            "Parameter_157": {
                "variable": {
                    "value": "self.attn_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(size=(1, num_heads, out_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.attn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(size=(1, num_heads, out_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.feat_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_161": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.fc_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._in_src_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc_dst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._in_dst_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._in_src_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._in_src_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._in_src_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.res_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._in_dst_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_heads * out_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_289": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leaky_relu(graph.edata.pop('e'))",
                            "Call"
                        ],
                        [
                            "th.ones_like(e).to(e.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers/layernorm.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*normalized_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*normalized_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "layer_norm_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "tuple(input.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight[:, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias[:, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "layer_norm_34": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "tuple(input.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers/mlp_layer.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "in_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs if i == 0 else hiddens[i - 1]",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "layers/smt.py": {
        "torch": {
            "ModuleDict_9": {
                "variable": {
                    "value": "self.mods",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "mods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.kn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.qn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.vn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(size=(1, dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(size=(1, dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(alpha, dim=2)",
                            "Call"
                        ],
                        [
                            "alpha + mask",
                            "BinOp"
                        ],
                        [
                            "th.softmax(alpha, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.zeros_like(alpha) - float('Inf')",
                            "BinOp"
                        ],
                        [
                            "th.where(alpha == 0, mask, th.zeros_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "th.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(alpha, dim=2)",
                            "Call"
                        ],
                        [
                            "alpha + mask",
                            "BinOp"
                        ],
                        [
                            "th.softmax(alpha, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(alpha, dim=2)",
                            "Call"
                        ],
                        [
                            "alpha + mask",
                            "BinOp"
                        ],
                        [
                            "th.softmax(alpha, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_44": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.zeros_like(alpha) - float('Inf')",
                            "BinOp"
                        ],
                        [
                            "th.where(alpha == 0, mask, th.zeros_like(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_139": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_141": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "LambdaLR_57": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], eps=params['epsilon'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=params['lr'], eps=params['epsilon'])",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "eps": {
                    "value": "params['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "eps": {
                    "value": "params['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "module/astgcn_block.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_of_timesteps).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_channels, num_of_timesteps).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_channels).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, num_of_vertices, num_of_vertices).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.Vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_of_vertices, num_of_vertices).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(x, self.W1), self.W2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(x.permute(0, 3, 2, 1), self.U1), self.U2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.W3, x).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "T_k_with_at.permute(0, 2, 1).matmul(graph_signal)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.U3, x)",
                            "Call"
                        ],
                        [
                            "graph_signal.permute(0, 2, 1).matmul(T_k).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(product + self.bs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "S_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.Vs, torch.sigmoid(product + self.bs))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_58": {
                "variable": {
                    "value": "self.Theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.FloatTensor(in_channels, out_channels).to(self.DEVICE)) for _ in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.U1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_of_vertices).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.U2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_channels, num_of_vertices).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.U3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_channels).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.be",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, num_of_timesteps, num_of_timesteps).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.Ve",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_of_timesteps, num_of_timesteps).to(DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "input": {
                    "value": "x.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.U3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(x, self.W1), self.W2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(x.permute(0, 3, 2, 1), self.U1), self.U2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.W3, x).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "T_k_with_at.permute(0, 2, 1).matmul(graph_signal)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.U3, x)",
                            "Call"
                        ],
                        [
                            "graph_signal.permute(0, 2, 1).matmul(T_k).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Ve",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(product + self.be)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "E_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.Ve, torch.sigmoid(product + self.be))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_143": {
                "variable": {
                    "value": "self.Theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.FloatTensor(in_channels, out_channels).to(self.DEVICE)) for _ in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nb_chev_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nb_time_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, time_strides)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.residual_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nb_time_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, time_strides)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_186": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nb_time_filter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "x_TAt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.reshape(batch_size, -1, num_of_timesteps)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "temporal_At",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.TAt(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "x_TAt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_of_vertices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_of_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_91": {
                "input": {
                    "value": "torch.cat(outputs, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_of_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_174": {
                "input": {
                    "value": "torch.cat(outputs, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "product + self.bs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "input": {
                    "value": "product + self.be",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "data": {
                    "value": "torch.FloatTensor(in_channels, out_channels).to(self.DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "data": {
                    "value": "torch.FloatTensor(in_channels, out_channels).to(self.DEVICE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_213": {
                "input": {
                    "value": "x_residual + time_conv_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_213": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/dcrnn.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.dcgru_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DCGRUCell(self.rnn_units, adj_mx, self.max_diffusion_step, self.num_nodes, device, filter_type=self.filter_type) for _ in range(self.num_rnn_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.dcgru_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DCGRUCell(self.rnn_units, adj_mx, self.max_diffusion_step, self.num_nodes, device, filter_type=self.filter_type) for _ in range(self.num_rnn_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_rnn_layers, batch_size, self.hidden_state_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_50": {
                "tensors": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_84": {
                "tensors": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "module/stgcn_block.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp + self.conv3(X)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.lint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "spatial_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_77": {
                "variable": {
                    "value": "lfs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,bkjm->bkim",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[A_hat, t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lint(lfs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "input": {
                    "value": "self.conv2(X)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "module/traversebody.py": {
        "torch": {
            "ModuleList_10": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gelu_159": {
                "input": {
                    "value": "self.linear_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nets/astgcn_net.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self.BlockList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ASTGCN_block(DEVICE, in_dim, K, nb_chev_filter, nb_time_filter, time_strides, supports, num_nodes, seq_in_len)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(seq_in_len / time_strides)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "seq_out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['seq_out_len']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, nb_time_filter)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nets/graphwavenet.py": {
        "torch": {
            "einsum_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncvl,vw->ncwl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(order * support_len + 1) * c_in",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_45": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.filter_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.gate_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.residual_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.skip_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.gconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.start_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['residual_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.end_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['skip_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "end_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['end_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.end_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "end_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['end_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['seq_out_len']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "skip[:, :, :, -s.size(3):]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "s + skip",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.end_conv_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.nodevec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_nodes, 10).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.nodevec2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(10, num_nodes).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.receptive_field - in_len, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "adp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(torch.mm(self.nodevec1, self.nodevec2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_173": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_convs[i](residual)",
                            "Call"
                        ],
                        [
                            "torch.tanh(filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_convs[i](residual)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_152": {
                "input": {
                    "value": "torch.mm(self.nodevec1, self.nodevec2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['residual_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['dilation_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "new_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "new_dilation * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_104": {
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['residual_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['dilation_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "new_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "new_dilation * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_109": {
                "in_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['dilation_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['residual_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_114": {
                "in_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['dilation_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['skip_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['residual_channels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_152": {
                "input": {
                    "value": "self.nodevec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.nodevec2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['num_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_92": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['num_nodes']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nets/stgcn_net.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.fully",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(num_timesteps_input - 2 * 5) * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_timesteps_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['seq_out_len']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nets/traverse_net.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.start_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_25": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(dim, num_nodes, seq_l)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_36": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(dim, num_nodes, seq_l)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.end_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, seq_l)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.end_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_dim ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.end_conv_1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_67": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/ctrainer.py": {
        "torch": {
            "BCELoss_20": {
                "variable": {
                    "value": "self.regloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(realy, self.params['out_level'])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(realy, self.params['out_level'])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_36": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_39": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_144": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_146": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__87": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainer/rtrainer.py": {
        "torch": {
            "cat_118": {
                "variable": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_preds, axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(y_preds, self.params['out_level'])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_preds, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "y_truths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_truths, axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(y_truths, self.params['out_level'])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_truths, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_preds, axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(y_preds, self.params['out_level'])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_preds, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "y_truths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_truths, axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(y_truths, self.params['out_level'])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_truths, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "x[-self.seq_in_len:, :, :, :self.in_dim]",
                            "Subscript"
                        ],
                        [
                            "x.view(self.seq_in_len, batch_size, self.num_nodes * self.in_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[..., self.params['out_level']].squeeze()",
                            "Call"
                        ],
                        [
                            "y[..., self.params['out_level']].squeeze()",
                            "Call"
                        ],
                        [
                            "y[..., self.params['out_level']].squeeze()",
                            "Call"
                        ],
                        [
                            "y[..., self.params['out_level']].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).float()",
                            "Call"
                        ],
                        [
                            "y.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "y[-self.seq_out_len:, :, :, :self.in_dim]",
                            "Subscript"
                        ],
                        [
                            "y.view(self.seq_out_len, batch_size, self.num_nodes, self.in_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_78": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[20, 30, 40, 50]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__86": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainer/tg_trainer.py": {
        "torch": {
            "zeros_77": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(realy)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ],
                        [
                            "self.scaler.inverse_transform(realy)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(realy, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_58": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_148": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_152": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__87": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "where_13": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_16": {
                "variable": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(se)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(se)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "se * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(se), torch.zeros_like(se), se)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_17": {
                "variable": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_19": {
                "variable": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(ae)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(ae)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "ae * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(ae), torch.zeros_like(ae), ae)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_20": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "ae < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * se / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ae - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_32": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_50": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_64": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_21": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_31": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_36": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_39": {
                "input": {
                    "value": "masked_mse(preds=preds, labels=labels, null_val=null_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_49": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_54": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_63": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_68": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_13": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_16": {
                "input": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "se * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(se), torch.zeros_like(se), se)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_16": {
                "input": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "se * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(se), torch.zeros_like(se), se)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_19": {
                "input": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "ae * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(ae), torch.zeros_like(ae), ae)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "ae * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(ae), torch.zeros_like(ae), ae)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_32": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_35": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_50": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_50": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_53": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_64": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / mask.mean()",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels > null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "(y_true != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_65": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_67": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(ae < beta, 0.5 * se / beta, ae - 0.5 * beta)",
                            "Call"
                        ],
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / torch.abs(labels)",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(y_pred - y_true)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_7": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_26": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_44": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_58": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/process.py": {
        "torch": {
            "tensor_59": {
                "variable": {
                    "value": "ds[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ds[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "ds[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ds[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "ds[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ds[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "g[k]['tgt'].to_numpy(dtype=int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "g[k]['tgt'].to_numpy(dtype=int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "g[k]['tgt'].to_numpy(dtype=int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "g[k]['tgt'].to_numpy(dtype=int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "data": {
                    "value": "g[k]['tgt'].to_numpy(dtype=int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}