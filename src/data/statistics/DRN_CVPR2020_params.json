{
    "rotation conv layer/rotation_conv_utils.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "not with_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.deformable_groups * 1 * self.kernel_size[0] * self.kernel_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "x_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-x_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "x_v + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "y_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-y_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "y_v + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "meshgrid_78": {
                "variable": {
                    "value": "(x_coor, y_coor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(-x_v, x_v + 1)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "y_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(-y_v, y_v + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_81": {
                "variable": {
                    "value": "coor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_coor, y_coor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "coor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_87": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "angle[:, :, sH:sH + oH, sW:sW + oW]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(input)[:, :1, :, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_89": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "angle[:, :, sH:sH + oH, sW:sW + oW]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(input)[:, :1, :, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "rot_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_theta - 1, sin_theta, -sin_theta, cos_theta - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((cos_theta - 1, sin_theta, -sin_theta, cos_theta - 1), dim=-1)",
                            "Call"
                        ],
                        [
                            "rot_theta.contiguous().view(-1, 1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "coor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((x_coor, y_coor), dim=1).unsqueeze(2).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "att.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "oH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(h + 2 * self.padding[0] - self.kernel_size[0]) // self.stride[0] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_93": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_224": {
                "variable": {
                    "value": "self.branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_252": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att(sum(branch_fea))",
                            "Call"
                        ],
                        [
                            "att.view(b, -1, self.split, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(att, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_253": {
                "variable": {
                    "value": "split_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att(sum(branch_fea))",
                            "Call"
                        ],
                        [
                            "att.view(b, -1, self.split, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(att, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "branch_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_216": {
                "modules": {
                    "value": "[branch_fea]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_230": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "dim_in // 4 // red_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in // 4 * self.split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "rotation conv layer/test_rcl.py": {
        "torch": {
            "arange_26": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "iH * iW",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, iH * iW).view(1, 1, iH, iW).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_40": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "oH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(iH + 2 * pH - kH) // 1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "oW",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(iW + 2 * pW - kW) // 1 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "offset1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, iH * iW).view(1, 1, iH, iW).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_60": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, iH * iW).view(1, 1, iH, iW).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_65": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, iH * iW).view(1, 1, iH, iW).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}