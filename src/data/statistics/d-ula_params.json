{
    "a9a_dist_sgld.py": {
        "sklearn": {
            "load_svmlight_file_49": {
                "variable": {
                    "value": "(Xtr, Ytr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/a9a",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a9aDataset(data=Xtr, labels=Ytr, train_idx=train_idx, test_idx=test_idx, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_104": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "dataset": {
                    "value": "train_data_split[k]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(dataset=train_data, lengths=lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "outputs.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "a9a_sgld.py": {
        "sklearn": {
            "load_svmlight_file_40": {
                "variable": {
                    "value": "(Xtr, Ytr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/a9a",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a9aDataset(data=Xtr, labels=Ytr, train_idx=train_idx, test_idx=test_idx, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a9aDataset(data=Xtr, labels=Ytr, train_idx=train_idx, test_idx=test_idx, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_78": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "input": {
                    "value": "outputs.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/ToyDataset.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_17": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_19": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/a9aDataset.py": {
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "self.data[traindata]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[train_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_14": {
                "variable": {
                    "value": "self.data[trainlabels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(labels[train_idx]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_15": {
                "variable": {
                    "value": "self.data[testdata]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[test_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_16": {
                "variable": {
                    "value": "self.data[testlabels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(labels[test_idx]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "labels[train_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "labels[test_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_dist_sgld_svhn_pred_scores.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data', train=False, transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "test_svhn_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets.SVHN('./data', split='test', download=True, transform=svhn_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "pred_prob[i * data_loader.batch_size:i * data_loader.batch_size + images.shape[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cur_model(data)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "dataset": {
                    "value": "train_data_split[k]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(dataset=train_dataset, lengths=lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_sgd_svhn_pred_scores.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data', train=True, transform=trans, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data', train=False, transform=trans, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "test_svhn_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets.SVHN('./data', split='test', download=True, transform=svhn_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "pred_prob[i * data_loader.batch_size:i * data_loader.batch_size + images.shape[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_sgld_svhn_pred_scores.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data', train=True, transform=trans, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data', train=False, transform=trans, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "test_svhn_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets.SVHN('./data', split='test', download=True, transform=svhn_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "pred_prob[i * data_loader.batch_size:i * data_loader.batch_size + images.shape[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/LeNet5.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_16": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_18": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, kernel_size=(2, 2), stride=2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, kernel_size=(2, 2), stride=2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_19": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_21": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, kernel_size=(2, 2), stride=2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, kernel_size=(2, 2), stride=2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_25": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/a9a_model.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Laplace_12": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.rsample(self.linear.weight.shape).reshape(self.linear.weight.shape[0], self.linear.weight.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.rsample(self.linear.bias.shape).reshape(self.linear.bias.shape[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/toy_model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.param1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1) * sigma1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.param2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1) * sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_10": {
                "variable": {
                    "value": "self.sigmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "self.piconst",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_17": {
                "variable": {
                    "value": "mixcomp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_30": {
                "variable": {
                    "value": "log_p_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(mixcomp) + torch.log(ct) + a1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_31": {
                "input": {
                    "value": "(log_p1 - log_p_max).exp() + (log_p2 - log_p_max).exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_8": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_9": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "piconst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.piconst.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_22": {
                "input": {
                    "value": "ct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / (torch.sqrt(piconst) * sigmax)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_23": {
                "input": {
                    "value": "ct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / (torch.sqrt(piconst) * sigmax)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "optimizers/SGLD.py": {
        "torch": {}
    },
    "optimizers/SGLD_a9a.py": {
        "torch": {
            "sign_32": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/SGLD_toy.py": {
        "torch": {}
    },
    "optimizers/dist_SGLD.py": {
        "torch": {}
    },
    "optimizers/dist_SGLD_a9a.py": {
        "torch": {
            "sign_47": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/dist_SGLD_toy.py": {
        "torch": {}
    },
    "toy_data_dist_sgld.py": {
        "torch": {
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "dataset": {
                    "value": "train_loader[n]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(dataset=toy_dataset, lengths=lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "toy_data_sgld.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "toy_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "toy_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ToyDataset(num_samples=num_samples, theta1=0.0, theta2=1.0, sigmax=sigmax)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}