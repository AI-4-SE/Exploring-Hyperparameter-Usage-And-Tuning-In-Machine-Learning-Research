{
    "code/dataset/base.py": {
        "torch": {
            "zeros_243": {
                "variable": {
                    "value": "amp_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.HS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.WS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "phase_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.HS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.WS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "audios[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audios[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "frames[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_frames",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.imgSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.imgSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "audios[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.audLen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.HS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.WS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.angle(spec)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/dataset/video_transforms.py": {
        "torch": {
            "stack_182": {
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/main.py": {
        "torch": {
            "DataLoader_661": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_train, args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_667": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_val, args, max_sample=args.num_val, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_678": {
                "variable": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetWrapper(nets, crit)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netWrapper, device_ids=range(args.num_gpus))",
                            "Call"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_721": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_55": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "self.cts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_98": {
                "variable": {
                    "value": "gt_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_99": {
                "variable": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log1p_101": {
                "variable": {
                    "value": "log_mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_102": {
                "variable": {
                    "value": "log_mag0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log1p_103": {
                "variable": {
                    "value": "log_mag2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_201": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "cts_pos1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_432": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_523": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_572": {
                "obj": {
                    "value": "history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': {'epoch': [], 'err': []}, 'val': {'epoch': [], 'err': [], 'sdr': [], 'sir': [], 'sar': []}}",
                            "Dict"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/history_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_574": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_576": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_578": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_580": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_582": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_584": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_612": {
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': net_sound_ground.parameters(), 'lr': args.lr_sound_ground}, {'params': net_sound.parameters(), 'lr': args.lr_sound}, {'params': net_synthesizer.parameters(), 'lr': args.lr_synthesizer}, {'params': net_grounding.parameters(), 'lr': args.lr_grounding}, {'params': net_frame.fc.parameters(), 'lr': args.lr_sound}]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_764": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_44": {
                "input": {
                    "value": "1.0 / (1e-06 + torch.abs(m - 0.5))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, 256, T, warp=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_76": {
                "variable": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_82": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "magnitude2heatmap(weight_[j, 0], log=False, scale=100.0)",
                            "Call"
                        ],
                        [
                            "torch.log1p(mag_mix)",
                            "Call"
                        ],
                        [
                            "torch.clamp(weight, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(mag_mix)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_85": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "x[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_sep[n].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "df_mask[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "sep_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "sep_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_253": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_327": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_329": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_330": {
                "variable": {
                    "value": "gt_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_591": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_593": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_595": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_597": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_599": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_601": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_78": {
                "variable": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_133": {
                "input": {
                    "value": "g_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_grounding(self.net_sound_ground(log_mag2), feat_frames_ground[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_163": {
                "input": {
                    "value": "tf_data(g_sep[1], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_165": {
                "input": {
                    "value": "tf_data(g_sep[3], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "m - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_218": {
                "input": {
                    "value": "df_mask[2] - th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for n in range(N)]",
                            "ListComp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_217": {
                "input": {
                    "value": "df_mask[1] - th",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/main_ccol.py": {
        "torch": {
            "DataLoader_659": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_train, args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_665": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_val, args, max_sample=args.num_val, split=args.split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_676": {
                "variable": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetWrapper(nets, crit)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netWrapper, device_ids=range(args.num_gpus))",
                            "Call"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_719": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_54": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "variable": {
                    "value": "self.cts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_96": {
                "variable": {
                    "value": "gt_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_97": {
                "variable": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log1p_99": {
                "variable": {
                    "value": "log_mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_100": {
                "variable": {
                    "value": "log_mag0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log1p_101": {
                "variable": {
                    "value": "log_mag2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_199": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "cts_pos1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_430": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_521": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_570": {
                "obj": {
                    "value": "history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': {'epoch': [], 'err': []}, 'val': {'epoch': [], 'err': [], 'sdr': [], 'sir': [], 'sar': []}}",
                            "Dict"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/history_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_572": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_574": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_576": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_578": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_580": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_582": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_610": {
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': net_sound_ground.parameters(), 'lr': args.lr_sound_ground}, {'params': net_sound.parameters(), 'lr': args.lr_sound}, {'params': net_synthesizer.parameters(), 'lr': args.lr_synthesizer}, {'params': net_grounding.parameters(), 'lr': args.lr_grounding}, {'params': net_frame.fc.parameters(), 'lr': args.lr_sound}]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_762": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_31": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_43": {
                "input": {
                    "value": "1.0 / (1e-06 + torch.abs(m - 0.5))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, 256, T, warp=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_74": {
                "variable": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_80": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_81": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "magnitude2heatmap(weight_[j, 0], log=False, scale=100.0)",
                            "Call"
                        ],
                        [
                            "torch.log1p(mag_mix)",
                            "Call"
                        ],
                        [
                            "torch.clamp(weight, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(mag_mix)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_83": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "x[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_sep[n].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "df_mask[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "sep_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "sep_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_251": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_325": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_327": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_328": {
                "variable": {
                    "value": "gt_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_589": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_591": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_593": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_595": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_597": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_599": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_76": {
                "variable": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_131": {
                "input": {
                    "value": "g_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_grounding(self.net_sound_ground(log_mag2), feat_frames_ground[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_161": {
                "input": {
                    "value": "tf_data(g_sep[1], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_163": {
                "input": {
                    "value": "tf_data(g_sep[3], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "m - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_216": {
                "input": {
                    "value": "df_mask[2] - th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for n in range(N)]",
                            "ListComp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_215": {
                "input": {
                    "value": "df_mask[1] - th",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/main_col.py": {
        "torch": {
            "DataLoader_619": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_train, args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_625": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_val, args, max_sample=args.num_val, split=args.split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_636": {
                "variable": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetWrapper(nets, crit)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netWrapper, device_ids=range(args.num_gpus))",
                            "Call"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_679": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_54": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "variable": {
                    "value": "self.cts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_96": {
                "variable": {
                    "value": "gt_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_97": {
                "variable": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log1p_99": {
                "variable": {
                    "value": "log_mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_100": {
                "variable": {
                    "value": "log_mag0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log1p_101": {
                "variable": {
                    "value": "log_mag2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_171": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "cts_pos1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_390": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_481": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_530": {
                "obj": {
                    "value": "history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': {'epoch': [], 'err': []}, 'val': {'epoch': [], 'err': [], 'sdr': [], 'sir': [], 'sar': []}}",
                            "Dict"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/history_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_532": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_534": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_536": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_538": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_540": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_542": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_570": {
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': net_sound_ground.parameters(), 'lr': args.lr_sound_ground}, {'params': net_sound.parameters(), 'lr': args.lr_sound}, {'params': net_synthesizer.parameters(), 'lr': args.lr_synthesizer}, {'params': net_grounding.parameters(), 'lr': args.lr_grounding}, {'params': net_frame.fc.parameters(), 'lr': args.lr_sound}]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_722": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_31": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_43": {
                "input": {
                    "value": "1.0 / (1e-06 + torch.abs(m - 0.5))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, 256, T, warp=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_74": {
                "variable": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_80": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_81": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "magnitude2heatmap(weight_[j, 0], log=False, scale=100.0)",
                            "Call"
                        ],
                        [
                            "torch.log1p(mag_mix)",
                            "Call"
                        ],
                        [
                            "torch.clamp(weight, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(mag_mix)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_83": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "x[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_sep[n].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_211": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_287": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_288": {
                "variable": {
                    "value": "gt_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_549": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_551": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_553": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_555": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_557": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_559": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_76": {
                "variable": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_131": {
                "input": {
                    "value": "g_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_grounding(self.net_sound_ground(log_mag2), feat_frames_ground[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_179": {
                "input": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(B).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_161": {
                "input": {
                    "value": "tf_data(g_sep[1], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_163": {
                "input": {
                    "value": "tf_data(g_sep[3], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "m - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for n in range(N)]",
                            "ListComp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/main_grd.py": {
        "torch": {
            "DataLoader_260": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_train, args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_val, args, max_sample=args.num_val, split=args.split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_277": {
                "variable": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetWrapper(nets, crit)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netWrapper, device_ids=range(args.num_gpus))",
                            "Call"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_316": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_26": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_28": {
                "variable": {
                    "value": "self.cts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_59": {
                "variable": {
                    "value": "gt_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_60": {
                "variable": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log1p_63": {
                "variable": {
                    "value": "log_mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_64": {
                "variable": {
                    "value": "log_mag0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log1p_65": {
                "variable": {
                    "value": "log_mag2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_97": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "cts_pos1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_113": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_156": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': {'epoch': [], 'err': []}, 'val': {'epoch': [], 'err': []}}",
                            "Dict"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/history_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_228": {
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': net_sound_ground.parameters(), 'lr': args.lr_sound_ground}, {'params': net_grounding.parameters(), 'lr': args.lr_grounding}]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_354": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, 256, T, warp=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_44": {
                "variable": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "x[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_sep[n].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "synchronize_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_46": {
                "variable": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_94": {
                "input": {
                    "value": "g_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_grounding(self.net_sound_ground(log_mag2), feat_frames_ground[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_106": {
                "input": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(B).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/main_silent.py": {
        "torch": {
            "DataLoader_670": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_train, args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_676": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MUSICMixDataset(args.list_val, args, max_sample=args.num_val, split=args.split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_687": {
                "variable": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netWrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetWrapper(nets, crit)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netWrapper, device_ids=range(args.num_gpus))",
                            "Call"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ],
                        [
                            "netWrapper",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_730": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_54": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "variable": {
                    "value": "self.cts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_98": {
                "variable": {
                    "value": "gt_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_99": {
                "variable": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log1p_101": {
                "variable": {
                    "value": "log_mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_102": {
                "variable": {
                    "value": "log_mag0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log1p_103": {
                "variable": {
                    "value": "log_mag1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log1p_104": {
                "variable": {
                    "value": "log_mag2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_210": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "cts_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "cts_pos1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_441": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_532": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_581": {
                "obj": {
                    "value": "history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': {'epoch': [], 'err': []}, 'val': {'epoch': [], 'err': [], 'sdr': [], 'sir': [], 'sar': []}}",
                            "Dict"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ],
                        [
                            "history",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/history_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_583": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_585": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_587": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_589": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_591": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_593": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_latest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_621": {
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': net_sound_ground.parameters(), 'lr': args.lr_sound_ground}, {'params': net_sound.parameters(), 'lr': args.lr_sound}, {'params': net_synthesizer.parameters(), 'lr': args.lr_synthesizer}, {'params': net_grounding.parameters(), 'lr': args.lr_grounding}, {'params': net_frame.fc.parameters(), 'lr': args.lr_sound}]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_773": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_31": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_43": {
                "input": {
                    "value": "1.0 / (1e-06 + torch.abs(m - 0.5))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, 256, T, warp=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_76": {
                "variable": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_82": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "magnitude2heatmap(weight_[j, 0], log=False, scale=100.0)",
                            "Call"
                        ],
                        [
                            "torch.log1p(mag_mix)",
                            "Call"
                        ],
                        [
                            "torch.clamp(weight, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(mag_mix)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_85": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix.numpy()",
                            "Call"
                        ],
                        [
                            "batch_data['mag_mix']",
                            "Subscript"
                        ],
                        [
                            "mag_mix + 1e-10",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(mag_mix, grid_warp)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "x[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_sep[n].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_solo[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_166": {
                "variable": {
                    "value": "pred_masks[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_data(g_sep[0], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_167": {
                "variable": {
                    "value": "pred_masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_data(g_sep[1], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_168": {
                "variable": {
                    "value": "pred_masks[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_data(g_sep[2], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_169": {
                "variable": {
                    "value": "pred_masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_data(g_sep[3], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "df_mask[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "sep_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "sep_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "mag_mix.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_262": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_338": {
                "variable": {
                    "value": "pred_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_339": {
                "variable": {
                    "value": "gt_masks_linear[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks_[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_unwarp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, pred_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(warpgrid(B, args.stft_frame // 2 + 1, gt_masks_[0].size(3), warp=False)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_600": {
                "obj": {
                    "value": "net_sound_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_602": {
                "obj": {
                    "value": "net_frame_ground.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_ground_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_604": {
                "obj": {
                    "value": "net_sound.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/sound_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_606": {
                "obj": {
                    "value": "net_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/frame_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_608": {
                "obj": {
                    "value": "net_synthesizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/synthesizer_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_610": {
                "obj": {
                    "value": "net_grounding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/grounding_{}'.format(args.ckpt, suffix_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_78": {
                "variable": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mags[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_warp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(warpgrid(B, 256, T, warp=True)).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_136": {
                "input": {
                    "value": "g_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_grounding(self.net_sound_ground(log_mag2), feat_frames_ground[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_171": {
                "input": {
                    "value": "tf_data(g_sep[1], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_173": {
                "input": {
                    "value": "tf_data(g_sep[3], B, s1, s2).round()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "masks[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "m - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_227": {
                "input": {
                    "value": "df_mask[2] - th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for n in range(N)]",
                            "ListComp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_226": {
                "input": {
                    "value": "df_mask[1] - th",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/__init__.py": {
        "torch": {
            "sigmoid_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_49": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_66": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_82": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_103": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_117": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_129": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/models/audio_net.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "variable": {
                    "value": "downnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inner_input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_173": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "variable": {
                    "value": "upnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_175": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "variable"
                        ],
                        [
                            "2 * inner_input_nc",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_94": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "variable"
                        ],
                        [
                            "2 * inner_input_nc",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_203": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_input_nc",
                            "variable"
                        ],
                        [
                            "2 * inner_input_nc",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "cat_221": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/criterion.py": {
        "torch": {
            "mean_18": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(errs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "weight * torch.abs(pred - target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_41": {
                "input": {
                    "value": "weight * torch.pow(pred - target, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_49": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[0].new_ones(1)",
                            "Call"
                        ],
                        [
                            "preds.new_ones(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_57": {
                "input": {
                    "value": "torch.abs(m - 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "errs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._forward(preds[n], targets[n], weight) for n in range(N)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "abs_33": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_41": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_57": {
                "input": {
                    "value": "m - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/grounding_net.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc_v1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc_v2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_35": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_sound, feat_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_9": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/models/synthesizer_net.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_10": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_16": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_img * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat_sound.view(B, C, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_35": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats_img * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat_sound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_sound.view(B, C, HS * WS)",
                            "Call"
                        ],
                        [
                            "feat_sound.view(B, C, HS * WS)",
                            "Call"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_img.view(B, 1, C)",
                            "Call"
                        ],
                        [
                            "feat_img.view(B, C)",
                            "Call"
                        ],
                        [
                            "feat_img.view(B, 1, C)",
                            "Call"
                        ],
                        [
                            "feat_img",
                            "Method Argument"
                        ],
                        [
                            "feat_img",
                            "Method Argument"
                        ],
                        [
                            "feat_img",
                            "Method Argument"
                        ],
                        [
                            "feat_img",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feat_sound.view(B, C, H * W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_67": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats_img.view(B, C, HI * WI)",
                            "Call"
                        ],
                        [
                            "feats_img.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feats_img.view(B, C, HI * WI)",
                            "Call"
                        ],
                        [
                            "feats_img.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feats_img",
                            "Method Argument"
                        ],
                        [
                            "feats_img",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feat_sound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_sound.view(B, C, HS * WS)",
                            "Call"
                        ],
                        [
                            "feat_sound.view(B, C, HS * WS)",
                            "Call"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ],
                        [
                            "feat_sound",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_9": {
                "*size": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/vision_net.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(original_resnet.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(original_resnet.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "conv_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(orig_resnet.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "conv_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool3d_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool3d_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool3d_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, T, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool3d(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_max_pool3d_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_max_pool3d_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_max_pool3d_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}