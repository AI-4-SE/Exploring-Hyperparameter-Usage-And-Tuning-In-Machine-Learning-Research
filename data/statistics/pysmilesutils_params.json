{
    "examples/examples_data.py": {
        "torch": {
            "DataLoader_94": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "hdf_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HDFDataset('data/data.hdf5')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_154": {
                "variable": {
                    "value": "(_, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([len(d) for d in data])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset()",
                            "Call"
                        ],
                        [
                            "WrapperDataset(data)",
                            "Call"
                        ],
                        [
                            "MultiDataset(data_list, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "MultiDataset(data_list, repeats=True, shuffle=False)",
                            "Call"
                        ],
                        [
                            "MultiDataset(data_list, repeats=False, shuffle=True)",
                            "Call"
                        ],
                        [
                            "MultiDataset(data_list, repeats=True, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "bucket_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BucketBatchSampler(data, batch_size=3, num_buckets=3, indices=sorted_indices, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "arange_26": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "data_h5py",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f.get('tensor_data')[:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_89": {
                "input": {
                    "value": "data_h5py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(f.get('tensor_data')[:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_91": {
                "input": {
                    "value": "data_h5py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(f.get('tensor_data')[:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(sorted(data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "torch.randint(1, 5, size=(1,)).item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "[len(d) for d in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_184": {
                "start": {
                    "value": "5 * idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "5 * (idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[torch.arange(torch.randint(1, 5, size=(1,)).item()) for _ in range(20)]",
                            "ListComp"
                        ],
                        [
                            "torch.arange(20)",
                            "Call"
                        ],
                        [
                            "f.get('tensor_data')[idx]",
                            "Subscript"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "data": {
                    "value": "sorted(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_132": {
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/examples_training.py": {
        "torch": {
            "tensor_58": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(len, data.reactants))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_59": {
                "variable": {
                    "value": "(_, reactants_sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(map(len, data.reactants)))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_128": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "TokenizingDataset(list(data.reactants), list(data.products), tokenizer=tokenizer, augmenter=augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_173": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformer.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "TokenizingDataset(list(data.reactants), list(data.products), tokenizer=tokenizer, augmenter=augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_variable_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_variable_length",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_263": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_264": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformer.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_323": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "TokenizingDataset(list(data.reactants), list(data.products), tokenizer=tokenizer, augmenter=augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_333": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformer.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_391": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sorted_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESDataset(src_sorted, tgt_sorted)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_401": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_402": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformer.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_449": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "TokenizingDataset(list(data.reactants), list(data.products), tokenizer=tokenizer, augmenter=augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ],
                        [
                            "SMILESDataset(list(data.reactants), list(data.products))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "bucket_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BucketBatchSampler(dataset, indices=reactants_sorted_indices, batch_size=batch_size, bucket_size=1024)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ],
                        [
                            "SMILESCollater(tokenizer, augmenter)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_457": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_458": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformer.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_187": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tokenizer(augmenter(src))",
                            "Call"
                        ],
                        [
                            "pad_sequence(src).to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "self.reactants[idx]",
                            "Subscript"
                        ],
                        [
                            "self.tokenizer(self.augmenter(src))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_188": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tokenizer(augmenter(tgt))",
                            "Call"
                        ],
                        [
                            "pad_sequence(tgt).to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tgt.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tgt.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tgt.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tgt.to(device)",
                            "Call"
                        ],
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "self.products[idx]",
                            "Subscript"
                        ],
                        [
                            "self.tokenizer(self.augmenter(tgt))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_89": {
                "sequences": {
                    "value": "smiles_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer(data.reactants[:20])",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_238": {
                "sequences": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "tokenizer(augmenter(src))",
                            "Call"
                        ],
                        [
                            "pad_sequence(src).to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "tqdm(dataloader, total=len(dataloader))",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "self.reactants[idx]",
                            "Subscript"
                        ],
                        [
                            "self.tokenizer(self.augmenter(src))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_309": {
                "sequences": {
                    "value": "self.tokenizer(self.augmenter(d))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/transformer.py": {
        "torch": {
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_72": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_73": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_76": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_77": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_112": {
                "variable": {
                    "value": "self.emb_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_tokens",
                            "Method Argument"
                        ],
                        [
                            "n_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_113": {
                "variable": {
                    "value": "self.emb_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_tokens",
                            "Method Argument"
                        ],
                        [
                            "n_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Transformer_115": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_encoder_layers": {
                    "value": "num_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "num_decoder_layers": {
                    "value": "num_decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_encoder": {
                    "value": "custom_encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_decoder": {
                    "value": "custom_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_tokens",
                            "Method Argument"
                        ],
                        [
                            "n_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "sample_vector_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_221": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "variable": {
                    "value": "next_char_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_227": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "reactant_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reactant_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "torch.tensor(reactant_t, device=self.device).long()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "product_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "product_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "torch.tensor(product_t, device=self.device).long()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_74": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_134": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pysmilesutils/datautils.py": {
        "torch": {
            "tensor_72": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(len, self.lists[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_73": {
                "variable": {
                    "value": "(_, _sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(map(len, self.lists[0])))",
                            "Call"
                        ],
                        [
                            "[seq_lengths[np.where(bucket_indices == idx)[0]] for idx in range(1, num_buckets + 1)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "randint_190": {
                "variable": {
                    "value": "sdx",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_370": {
                "variable": {
                    "value": "batch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_AccessDataset(block[0], self.dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.inner_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.drop_last_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.batch_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchSampler_205": {
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(list(range(start_idx, end_idx)))",
                            "Call"
                        ],
                        [
                            "_SubsetSequentialSampler(list(range(start_idx, end_idx)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_216": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "len(bucket_samplers)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_462": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self._data_collection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_98": {
                "sequences": {
                    "value": "self.tokenizer(self.augmenter(d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_100": {
                "sequences": {
                    "value": "self.tokenizer(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_199": {
                "indices": {
                    "value": "list(range(start_idx, end_idx))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_477": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self._data_collection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_604": {
                "data_source": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_606": {
                "data_source": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pysmilesutils/tokenize.py": {
        "torch": {
            "eye_284": {
                "variable": {
                    "value": "onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.vocabulary)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "ids_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(token_data, tokens_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_401": {
                "variable": {
                    "value": "(indices, t_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoded_data",
                            "variable"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_402": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoding.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_dataloader.py": {
        "torch": {
            "arange_20": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_21": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_39": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*data",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_78": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_96": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_97": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_35": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(1000)",
                            "Call"
                        ],
                        [
                            "(torch.arange(1000), torch.arange(1000, 2000))",
                            "Tuple"
                        ],
                        [
                            "list('abcdefgh')",
                            "Call"
                        ],
                        [
                            "torch.arange(1000)",
                            "Call"
                        ],
                        [
                            "torch.arange(100)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(loaded_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "loaded_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[[], []]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_55": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(data, loaded_data)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(t_l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_93": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(1000)",
                            "Call"
                        ],
                        [
                            "(torch.arange(1000), torch.arange(1000, 2000))",
                            "Tuple"
                        ],
                        [
                            "list('abcdefgh')",
                            "Call"
                        ],
                        [
                            "torch.arange(1000)",
                            "Call"
                        ],
                        [
                            "torch.arange(100)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(loaded_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "t_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(data, loaded_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "data": {
                    "value": "loaded_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[[], []]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_dataset.py": {
        "torch": {
            "arange_18": {
                "variable": {
                    "value": "_data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "4 * _data_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_45": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_46": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(data[0], data[1])",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=True, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=True, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=True)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=True, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "arange_66": {
                "variable": {
                    "value": "data_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(data[0], data[1])",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=True, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=True, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=False)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=False, shuffle=True)",
                            "Call"
                        ],
                        [
                            "Dataset(**kwargs, repeats=True, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_data_len // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_90": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(100).view(2, -1)",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(data, key=lambda d: d[0])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_accessitem(data, slice(0, None))",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_156": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(100).view(2, -1)",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(data, key=lambda d: d[0])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "_data[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_168": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(100).view(2, -1)",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(data, key=lambda d: d[0])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "_data[idx % _data.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_196": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(100).view(2, -1)",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(data, key=lambda d: d[0])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "_data[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_201": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(100).view(2, -1)",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(data, key=lambda d: d[0])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "_data[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_233": {
                "input": {
                    "value": "dataset[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "_data[idx % len(_data)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_103": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(100).view(2, -1)",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "dataset[:]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(data, key=lambda d: d[0])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_accessitem(data, slice(0, None))",
                            "Call"
                        ],
                        [
                            "zip(sample_list, data_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_185": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch in enumerate(dataloader)",
                            "Call"
                        ],
                        [
                            "batch in enumerate(dataloader)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_true[batch_size * bdx:batch_size * (bdx + 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_215": {
                "input": {
                    "value": "dataset[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "_data[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_220": {
                "input": {
                    "value": "data[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "_data[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_55": {
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sampler.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "equal_77": {
                "input": {
                    "value": "torch.tensor(sorted(samples))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(n)",
                            "Call"
                        ],
                        [
                            "[1, 4, 6, 2, 45, 2, 8, 0, 8, 4, 2, 3, 4, 12]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "data": {
                    "value": "sorted(samples)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_tokenizer.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "one_hot_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(11, 12)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_46": {
                "input": {
                    "value": "one_hot[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "one_hot_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(11, 12))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_147": {
                "input": {
                    "value": "encoded_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(encoding_ids, decoding_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "decoded_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(encoding_ids, decoding_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_226": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[' ', '^', 'C', 'N', '1', '&'], ['^', 'c', 'c', 'c', 'Cl', '&', ' '], ['^', 'c', 'c', 'c', 'Cl', '&', 'Br', ' ']]",
                            "List"
                        ],
                        [
                            "[t for t in file.read().split() if not t.startswith('#')]",
                            "ListComp"
                        ],
                        [
                            "zip(tokenizer(get_test_smiles), atom_tokenizer(get_test_smiles))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "atom_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tokenizer(get_test_smiles), atom_tokenizer(get_test_smiles))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "start": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}