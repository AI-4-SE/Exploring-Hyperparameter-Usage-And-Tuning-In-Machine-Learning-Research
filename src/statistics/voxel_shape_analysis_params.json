{
    "functions/models.py": {
        "torch": {
            "Conv3d_10": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_11": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Conv3d_12": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_13": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_14": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg['enc'][0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg['dec'][-1]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.sequential",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(cfg['enc'][-2], bottleneck_dim)",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.sequential(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_118": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg['enc'][0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_119": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg['dec'][-1]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_136": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.sequential(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "*decoder",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "cfg['enc'][-2]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "int(np.clip(cfg['enc'][-2] // 4, 4, None))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "int(np.clip(cfg['enc'][-2] // 4, 4, None))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "int(np.clip(cfg['enc'][-2] // 4, 4, None))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_31": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": [
                        [
                            "cfg['dec'][1]",
                            "Subscript"
                        ],
                        [
                            "cfg['enc'][i]",
                            "Subscript"
                        ],
                        [
                            "cfg['dec'][i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_47": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": [
                        [
                            "cfg['dec'][1]",
                            "Subscript"
                        ],
                        [
                            "cfg['enc'][i]",
                            "Subscript"
                        ],
                        [
                            "cfg['dec'][i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_33": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": [
                        [
                            "cfg['dec'][1]",
                            "Subscript"
                        ],
                        [
                            "cfg['enc'][i]",
                            "Subscript"
                        ],
                        [
                            "cfg['dec'][i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_49": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": [
                        [
                            "cfg['dec'][1]",
                            "Subscript"
                        ],
                        [
                            "cfg['enc'][i]",
                            "Subscript"
                        ],
                        [
                            "cfg['dec'][i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "functions/stn_library.py": {
        "torch": {
            "from_numpy_27": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "np.concatenate((z_mesh, x_mesh, y_mesh, ones), 3)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(grid, [self.batch_size, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).float().cuda()",
                            "Call"
                        ],
                        [
                            "grid.view(-1, int(self.height * self.width * self.depth), 4)",
                            "Call"
                        ],
                        [
                            "self.normal_grid()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "Mx",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Mx",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mx).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "My",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "My",
                    "possible_values": [
                        [
                            "np.array([[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(My).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "Mz",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Mz",
                    "possible_values": [
                        [
                            "np.array([[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mz).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "possible_values": [
                        [
                            "_M[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(M, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "bmm_98": {
                "variable": {
                    "value": "flow",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "np.concatenate((z_mesh, x_mesh, y_mesh, ones), 3)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(grid, [self.batch_size, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).float().cuda()",
                            "Call"
                        ],
                        [
                            "grid.view(-1, int(self.height * self.width * self.depth), 4)",
                            "Call"
                        ],
                        [
                            "self.normal_grid()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "M",
                    "possible_values": [
                        [
                            "_M[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(M, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_121": {
                "variable": {
                    "value": "self.flow",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dec_nf[5]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dec_nf[6]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Upsample_123": {
                "variable": {
                    "value": "self.upsample",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x0]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_in]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grid_sample_159": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow",
                    "possible_values": [
                        [
                            "torch.bmm(grid, M)",
                            "Call"
                        ],
                        [
                            "flow.view(-1, self.height, self.width, self.depth, 3)",
                            "Call"
                        ],
                        [
                            "self.flow(x)",
                            "Call"
                        ],
                        [
                            "flow.view(-1, 80, 80, 80, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_166": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.convBlock",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels=1, out_channels=32, kernel_size=3, stride=1, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=256, out_features=out_chs)",
                    "possible_values": []
                }
            },
            "abs_242": {
                "variable": {
                    "value": "_theta0",
                    "possible_values": []
                },
                "input": {
                    "value": "theta[0:n_reg, 6:9] + eps",
                    "possible_values": []
                }
            },
            "exp_244": {
                "variable": {
                    "value": "_theta0",
                    "possible_values": []
                },
                "input": {
                    "value": "_theta0",
                    "possible_values": [
                        [
                            "torch.abs(theta[0:n_reg, 6:9] + eps)",
                            "Call"
                        ],
                        [
                            "torch.log(_theta0) - torch.mean(torch.log(_theta0))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(_theta0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_246": {
                "variable": {
                    "value": "_theta1",
                    "possible_values": []
                },
                "input": {
                    "value": "theta[n_reg:2 * n_reg, 6:9] + eps",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "_theta1",
                    "possible_values": []
                },
                "input": {
                    "value": "_theta1",
                    "possible_values": [
                        [
                            "torch.abs(theta[n_reg:2 * n_reg, 6:9] + eps)",
                            "Call"
                        ],
                        [
                            "torch.log(_theta1) - torch.mean(torch.log(_theta1))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(_theta1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_250": {
                "variable": {
                    "value": "_theta2",
                    "possible_values": []
                },
                "input": {
                    "value": "theta[2 * n_reg:, 6:9] + eps",
                    "possible_values": []
                }
            },
            "exp_252": {
                "variable": {
                    "value": "_theta2",
                    "possible_values": []
                },
                "input": {
                    "value": "_theta2",
                    "possible_values": [
                        [
                            "torch.abs(theta[2 * n_reg:, 6:9] + eps)",
                            "Call"
                        ],
                        [
                            "torch.log(_theta2) - torch.mean(torch.log(_theta2))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(_theta2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_254": {
                "variable": {
                    "value": "_theta",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_theta0, _theta1, _theta2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "Theta",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Theta + [_theta]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_62": {
                "input": {
                    "value": "My",
                    "possible_values": [
                        [
                            "np.array([[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(My).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Mx",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mx).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_169": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_170": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ConstantPad3d_171": {
                "variable": {
                    "value": "self.padder",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1, 1, 1, 1)",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "Mt",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Mt",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_73": {
                "input": {
                    "value": "Mx",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mx).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Mt",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "Mt",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Mt",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "Ms",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Ms",
                    "possible_values": [
                        [
                            "np.array([[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Ms).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_85": {
                "input": {
                    "value": "Mx",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mx).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Mt",
                    "possible_values": [
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Mt).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_92": {
                "variable": {
                    "value": "_M",
                    "possible_values": []
                },
                "input": {
                    "value": "Ms",
                    "possible_values": [
                        [
                            "np.array([[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Ms).repeat(self.batch_size, 1, 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "_M",
                    "possible_values": [
                        [
                            "torch.bmm(Mz, torch.bmm(My, Mx))",
                            "Call"
                        ],
                        [
                            "torch.bmm(Mz, torch.bmm(My, torch.bmm(Mx, Mt)))",
                            "Call"
                        ],
                        [
                            "torch.bmm(Mz, torch.bmm(My, torch.bmm(Mx, Mt)))",
                            "Call"
                        ],
                        [
                            "torch.bmm(Ms, _M)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_174": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_175": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ConstantPad3d_176": {
                "variable": {
                    "value": "self.padder",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1, 0, 1)",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv3d_191": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_192": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool3d_194": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_195": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_196": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool3d_198": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_199": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_200": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool3d_202": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_203": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_204": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool3d_206": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_207": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_208": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool3d_210": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_chs",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_231": {
                "input": {
                    "value": "theta[:, :3]",
                    "possible_values": []
                }
            },
            "mean_234": {
                "input": {
                    "value": "theta[:, 3:6]",
                    "possible_values": []
                }
            },
            "log_243": {
                "input": {
                    "value": "_theta0",
                    "possible_values": [
                        [
                            "torch.abs(theta[0:n_reg, 6:9] + eps)",
                            "Call"
                        ],
                        [
                            "torch.log(_theta0) - torch.mean(torch.log(_theta0))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(_theta0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_243": {
                "input": {
                    "value": "torch.log(_theta0)",
                    "possible_values": []
                }
            },
            "log_247": {
                "input": {
                    "value": "_theta1",
                    "possible_values": [
                        [
                            "torch.abs(theta[n_reg:2 * n_reg, 6:9] + eps)",
                            "Call"
                        ],
                        [
                            "torch.log(_theta1) - torch.mean(torch.log(_theta1))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(_theta1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_247": {
                "input": {
                    "value": "torch.log(_theta1)",
                    "possible_values": []
                }
            },
            "log_251": {
                "input": {
                    "value": "_theta2",
                    "possible_values": [
                        [
                            "torch.abs(theta[2 * n_reg:, 6:9] + eps)",
                            "Call"
                        ],
                        [
                            "torch.log(_theta2) - torch.mean(torch.log(_theta2))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(_theta2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_251": {
                "input": {
                    "value": "torch.log(_theta2)",
                    "possible_values": []
                }
            }
        }
    },
    "functions/training_tools.py": {
        "torch": {
            "mean_18": {
                "variable": {
                    "value": "total_avg",
                    "possible_values": []
                },
                "input": {
                    "value": "dice_loss",
                    "possible_values": [
                        [
                            "1 - num / den",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_24": {
                "input": {
                    "value": "torch.abs(z1 - z2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "data": {
                    "value": "u",
                    "possible_values": [
                        [
                            "(-3 + 10) * epoch / 30 - 10",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(u).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_32": {
                "input": {
                    "value": "10 ** u",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "2 * (target * pred)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "abs_24": {
                "input": {
                    "value": "z1 - z2",
                    "possible_values": []
                }
            }
        }
    }
}