{
    "src/util/utils.py": {
        "sklearn": {
            "NearestNeighbors_60": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "neighbor_count + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_111": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "neighbor_count + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_84": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "neighbor_count + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "no_shuffle_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_loader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "no_shuffle_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_loader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "no_shuffle_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_loader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/compute_coeff_scale.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_118": {
                "variable": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + f'/pretrained/{dataset}/' + 'run{}_modelDict_{}_M{}Z{}_coeffEncode.pt'.format(run_number, dataset, dict_size, latent_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/generate_transop_paths.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_137": {
                "variable": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + '/pretrained/' + dataset + '/run{}_modelDict_{}_M{}Z{}_finetune.pt'.format(run_number, dataset, dict_size, latent_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_148": {
                "variable": {
                    "value": "psi_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(normalize_val, torch.sqrt(torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1)) + 1e-11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "psi_new_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim)), 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "psi_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.div(normalize_val, torch.sqrt(torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1)) + 1e-11))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "psi_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(psi_new_norm, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dict_size, latent_dim, latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "imgInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0[idxChoice, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_148": {
                "input": {
                    "value": "normalize_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3.0",
                            "Constant"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1)) + 1e-11",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "input": {
                    "value": "torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_150": {
                "input": {
                    "value": "psi_new_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.transpose(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim)), 0, 1), psi_norm)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_149": {
                "input": {
                    "value": "psi_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp.get_psi()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(dict_size, latent_dim * latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_181": {
                "variable": {
                    "value": "z_trans_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transOp(z_scale.unsqueeze(-1)).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "input": {
                    "value": "torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "coeff_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coeff_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(coeff_use, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(coeff_input).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_148": {
                "input": {
                    "value": "torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_148": {
                "input": {
                    "value": "torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "input": {
                    "value": "psi_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp.get_psi()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(dict_size, latent_dim * latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/inference_comparison.py": {
        "torch": {}
    },
    "src/model/CVAE_old.py": {
        "torch": {
            "MSELoss_11": {
                "variable": {
                    "value": "sse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "params['M']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.model_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(c_dim), filt_per_layer, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(filt_per_layer * x_dim / 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(filt_per_layer * x_dim / 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_89": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_90": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, int(filt_per_layer * self.x_dim / 16))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(filt_per_layer, filt_per_layer, 4, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_12": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "torch.mul(q, torch.log(q + eps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((params['Nalpha'] * params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nbeta'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier(xhat)[0].detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_52": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(params['M'])",
                            "Call"
                        ],
                        [
                            "q + 1.0 / float(params['Nalpha']) * p",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(q + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_76": {
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(filt_per_layer * self.x_dim / 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_112": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_114": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_116": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "torch.mul(p, torch.log(p + eps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_50": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / float(params['Nbeta']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(p + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "p + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/attribute_resnet.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_102": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_126": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_131": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "fc_block(512, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/autoencoder.py": {
        "torch": {
            "exp_17": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_18": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 32, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 32, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(c_dim), self.num_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_filters * (img_size // 2 ** 4) * (img_size // 2 ** 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_205": {
                "variable": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mean(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_mean)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mean(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, self.num_filters * self.img_4 * self.img_4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.num_filters, self.num_filters * 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, int(self.img_4 * self.img_4 * num_filters))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(num_filters, num_filters, 4, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_297": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(c_dim), self.num_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_filters * (img_size // 2 ** 4) * (img_size // 2 ** 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_323": {
                "variable": {
                    "value": "self.model_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(c_dim), num_filters, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(num_filters * img_size * img_size / 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_350": {
                "variable": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mean(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_mean)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mean(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, self.num_filters * self.img_4 * self.img_4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.num_filters, self.num_filters * 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, int(self.img_4 * self.img_4 * num_filters))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(num_filters, num_filters, 4, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(c_dim), self.num_filters // 4, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_filters * (img_size // 2 ** 5) * (img_size // 2 ** 5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.model_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(c_dim), num_filters, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(num_filters * img_size * img_size / 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_65": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_73": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_94": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_96": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_filters * self.img_4 * self.img_4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_229": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_230": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_233": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_234": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_237": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_241": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_245": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_246": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_247": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_250": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_255": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(self.img_4 * self.img_4 * num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_260": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_263": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_264": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_266": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_298": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_300": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_303": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_304": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_305": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_306": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_307": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_308": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_309": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_310": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_311": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_312": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_313": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_314": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_316": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_318": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_319": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_325": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_328": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_330": {
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_332": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_366": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_filters * self.img_4 * self.img_4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_372": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_373": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_377": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_378": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_379": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_380": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_382": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_383": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_384": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_385": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_387": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_388": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_389": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_390": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_392": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_393": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_397": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_402": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(self.img_4 * self.img_4 * num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_407": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_408": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_410": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_411": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_413": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "self.num_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "num_features": {
                    "value": "self.num_filters // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "self.num_filters // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "self.num_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_185": {
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model/classifier.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_28": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_29": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "12544",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "prob_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_68": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_69": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.n_feat)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "fc_out1_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_94": {
                "variable": {
                    "value": "fc_out2_84",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "prob_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc3(fc_out2_84)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_9": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(original_model.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(original_model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_86": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(x), (2, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (-1, self.n_feat))",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc_out1_128)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/l1_inference.py": {
        "torch": {
            "mse_loss_13": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matrix_exp(T) @ x0",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.mul(torch.randn((len(x0), len(psi)), device=device), 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_23": {
                "variable": {
                    "value": "c_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[c]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_24": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "c_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([c], lr=0.01, nesterov=True, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.985",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "arc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "Tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_exp(A * t_use)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x0.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "A_Tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(psi[None, :, :, :] * c[:, :, None, None]).sum(dim=1).reshape((batch_size, N, N))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Tx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matrix_exp(A * t_use), x0.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "A_Tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_7": {
                "input": {
                    "value": "torch.abs(c) - zeta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_7": {
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.mul(torch.randn((len(x0), len(psi)), device=device), 0.02), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "0.1 * torch.randn(x0.shape[0], psi.shape[0], dtype=psi.dtype).to(device)",
                            "BinOp"
                        ],
                        [
                            "c_new",
                            "Name"
                        ]
                    ]
                }
            },
            "matrix_exp_12": {
                "A": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(psi[None, :, :, :] * c[:, :, None, None]).sum(dim=1).reshape((x0.shape[0], psi.shape[1], psi.shape[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_21": {
                "input": {
                    "value": "torch.randn((len(x0), len(psi)), device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "x0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "psi.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "psi.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "(len(x0), len(psi))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_39": {
                "input": {
                    "value": "old_coeff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_83": {
                "input": {
                    "value": "old_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c.clone()",
                            "Call"
                        ],
                        [
                            "c.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_exp_98": {
                "A": {
                    "value": "A * t_use",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_7": {
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.mul(torch.randn((len(x0), len(psi)), device=device), 0.02), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "0.1 * torch.randn(x0.shape[0], psi.shape[0], dtype=psi.dtype).to(device)",
                            "BinOp"
                        ],
                        [
                            "c_new",
                            "Name"
                        ]
                    ]
                }
            },
            "norm_100": {
                "input": {
                    "value": "A_Tx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(A, Tx).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_73": {
                "input": {
                    "value": "c_new - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/loss.py": {
        "torch": {
            "mean_26": {
                "input": {
                    "value": "torch.sum(prob_p * (logp - logq), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "torch.sum(prob_p * (logp - logq) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_10": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_11": {
                "input": {
                    "value": "logits_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_11": {
                "input": {
                    "value": "prob_q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "torch.sum(prob_p.detach() * logq, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "input": {
                    "value": "logits_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "torch.sum((prob_p.detach() - prob_q) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_22": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_23": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "prob_p + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_24": {
                "input": {
                    "value": "logits_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_24": {
                "input": {
                    "value": "prob_q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "prob_p * (logp - logq)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "prob_p + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_31": {
                "input": {
                    "value": "logits_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "prob_q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "prob_p * (logp - logq) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "logits_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_12": {
                "input": {
                    "value": "prob_p.detach() * logq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "(prob_p.detach() - prob_q) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/mlp.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "fc_out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "prob_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc2(fc_out1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/mlp_large.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "fc_out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "fc_out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_out2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc2(fc_out1)",
                            "Call"
                        ],
                        [
                            "F.relu(fc_out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "prob_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc3(fc_out2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/resnet.py": {
        "torch": {
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_105": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "prob_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_66": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/sampler.py": {
        "torch": {
            "mul_19": {
                "input": {
                    "value": "torch.sign(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log((1.0 - 2.0 * torch.abs(u)).clamp(min=1e-10))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_18": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sign_19": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(batch_size, M) - 0.5).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_19": {
                "input": {
                    "value": "(1.0 - 2.0 * torch.abs(u)).clamp(min=1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(batch_size, M) - 0.5).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/sampler_new.py": {
        "torch": {
            "mul_20": {
                "input": {
                    "value": "torch.sign(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log((1.0 - 2.0 * torch.abs(u)).clamp(min=1e-10))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_19": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sign_20": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(batch_size, M) - 0.5).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_20": {
                "input": {
                    "value": "(1.0 - 2.0 * torch.abs(u)).clamp(min=1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(batch_size, M) - 0.5).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/transop.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.mul(torch.randn((M, N, N)), var)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, dict_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_11": {
                "input": {
                    "value": "torch.randn((M, N, N))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matrix_exp_20": {
                "A": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.psi[None, :, :, :] * self.c[:, :, None, None]).sum(dim=1).reshape((batch_size, self.N, self.N))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1028",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_42": {
                "num_features": {
                    "value": "1028",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "1028",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dict_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dict_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_11": {
                "*size": {
                    "value": "(M, N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/path_estimate_test.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_174": {
                "variable": {
                    "value": "modelAE_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./results/pretrained/pretrain_{}_ae_Z{}.pt'.format(dataset, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_182": {
                "variable": {
                    "value": "modelCAE_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir_CAE + 'CAE_{}_Z{}_Lambda{}.pt'.format(dataset, latent_dim, Lambda)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_189": {
                "variable": {
                    "value": "modelBVAE_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir_BVAE + 'BVAE_{}_Z{}_Beta{}.pt'.format(dataset, latent_dim, Beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_203": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./results/pretrained/pretrain_classifier_{}_{}_{}_ae_Z{}.pt'.format(dataset, classifier_type_temp, 'image', latent_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_212": {
                "variable": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + f'/pretrained/{dataset}/' + 'run{}_modelDict_{}_M{}Z{}_coeffEncode.pt'.format(run_number, dataset, dict_size, latent_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "div_302": {
                "variable": {
                    "value": "zeta_use",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "other": {
                    "value": "coeff_spread",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5.0 * (0.5 * log_spread0).exp()",
                            "BinOp"
                        ],
                        [
                            "(0.5 * log_spread_path).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_319": {
                "variable": {
                    "value": "coefficients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c_store[minIdx, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_322": {
                "variable": {
                    "value": "euc_dist_store",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(z0, z1, reduce=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_323": {
                "variable": {
                    "value": "euc_dist_store_ae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(z0_ae, z1_ae, reduce=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_324": {
                "variable": {
                    "value": "euc_dist_store_cae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(z0_cae, z1_cae, reduce=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_325": {
                "variable": {
                    "value": "euc_dist_store_bvae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(z0_bvae, z1_bvae, reduce=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_328": {
                "variable": {
                    "value": "c_sparsity_store",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(coefficients)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_334": {
                "variable": {
                    "value": "mani_offset_store",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(z1_hat, z1, reduce=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_358": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_378": {
                "variable": {
                    "value": "(_, predicted_euc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est_euc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_396": {
                "variable": {
                    "value": "(_, predicted_cae)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est_cae",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_413": {
                "variable": {
                    "value": "(_, predicted_bvae)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est_bvae",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_283": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_322": {
                "input": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(x0) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(x1) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_323": {
                "input": {
                    "value": "z0_ae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_ae(x0) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "z1_ae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_ae(x1) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_324": {
                "input": {
                    "value": "z0_cae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_cae(x0) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "z1_cae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_cae(x1) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_325": {
                "input": {
                    "value": "z0_bvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z0_bvae / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "z1_bvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z1_bvae / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_328": {
                "input": {
                    "value": "coefficients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(c_store[minIdx, :, :]).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_334": {
                "input": {
                    "value": "z1_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp(z0.unsqueeze(-1)).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(x1) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/pretrain_ae.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "network_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ExponentialLR_127": {
                "variable": {
                    "value": "autoenc_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=network_lr, betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.995",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "{'encoder': encoder.state_dict(), 'decoder': decoder.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./results/pretrained/pretrain_{}_ae_Z{}.pt'.format(dataset, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_36": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder(z0)",
                            "Call"
                        ],
                        [
                            "decoder(z0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.to(device)",
                            "Call"
                        ],
                        [
                            "x0.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_48": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder(z0)",
                            "Call"
                        ],
                        [
                            "decoder(z0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.to(device)",
                            "Call"
                        ],
                        [
                            "x0.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(test_loader))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/sample_zeta_test.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_136": {
                "variable": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + f'/pretrained/{dataset}/' + 'run{}_modelDict_{}_M{}Z{}_coeffEncode.pt'.format(run_number, dataset, dict_size, latent_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_143": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./results/pretrained/pretrain_classifier_{}_{}_{}_ae_Z{}.pt'.format(dataset, classifier_type_temp, 'image', latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "input": {
                    "value": "coeff_spread0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coeff_spread_scale * (0.5 * log_spread0).exp()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/test_CAE.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + 'CAE_{}_Z{}_Lambda{}.pt'.format(dataset, latent_dim, Lambda)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*x.shape, z.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "svd_113": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian[n].reshape(-1, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "one_code",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_121": {
                "variable": {
                    "value": "coeff",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "coeff_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_126": {
                "variable": {
                    "value": "coeff",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-coeff_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train_BVAE.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bvae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiStepLR_87": {
                "variable": {
                    "value": "ae_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(bvae.parameters(), lr=0.0001, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[15, 50, 75, 100, 150]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "kl_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_107": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.to(device)",
                            "Call"
                        ],
                        [
                            "x0.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_149": {
                "variable": {
                    "value": "interpolation",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-sweep_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sweep_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "step": {
                    "value": "sweep_range / 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "{'bvae': bvae.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + 'BVAE_{}_Z{}_Beta{}.pt'.format(dataset, latent_dim, beta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_128": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.to(device)",
                            "Call"
                        ],
                        [
                            "x0.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "1 + z_scale - z_mean ** 2 - z_scale.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(test_loader))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_136": {
                "input": {
                    "value": "kl_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(test_loader))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_130": {
                "input": {
                    "value": "1 + z_scale - z_mean ** 2 - z_scale.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_145": {
                "input": {
                    "value": "z_scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_145": {
                "input": {
                    "value": "0.5 * z_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_CAE.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiStepLR_81": {
                "variable": {
                    "value": "ae_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=0.0001, betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[15, 50, 75, 100, 150]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "{'encoder': encoder.state_dict(), 'decoder': decoder.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + 'CAE_{}_Z{}_Lambda{}.pt'.format(dataset, latent_dim, Lambda)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*x.shape, z.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "svd_160": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian[n].reshape(-1, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_98": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder(z0)",
                            "Call"
                        ],
                        [
                            "decoder(z0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.to(device)",
                            "Call"
                        ],
                        [
                            "x0.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(x0.grad, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "one_code",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_168": {
                "variable": {
                    "value": "coeff",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "coeff_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_173": {
                "variable": {
                    "value": "coeff",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-coeff_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_122": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder(z0)",
                            "Call"
                        ],
                        [
                            "decoder(z0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0.to(device)",
                            "Call"
                        ],
                        [
                            "x0.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "z0.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "torch.pow(x0.grad, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_125": {
                "input": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(test_loader))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_102": {
                "input": {
                    "value": "x0.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_attrib_classifier.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.RandomHorizontalFlip(), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(args.train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CelebA('./data', split='valid', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.RandomHorizontalFlip(), transforms.ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CelebA('./data', split='test', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "network_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_84": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=network_lr, momentum=0.9, weight_decay=0.001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_62": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.RandomHorizontalFlip(), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(args.train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(args.train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "{'classifier': model.state_dict(), 'total_loss': total_loss, 'total_time': total_time}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + f'Celeba_AttrClf.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(args.train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(objective_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_transop_natural.py": {
        "torch": {
            "device_119": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "network_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.net_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ExponentialLR_229": {
                "variable": {
                    "value": "ae_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=network_lr, betas=(0.5, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=network_lr, betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.985",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_234": {
                "variable": {
                    "value": "transOp_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transOp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "psi_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.psi_lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.gamma",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ExponentialLR_235": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "transOp_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(transOp.parameters(), lr=psi_lr, weight_decay=gamma)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(transOp.parameters(), lr=psi_lr, weight_decay=finetune_gamma)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.985",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + 'pretrained/pretrain_{}_ae_Z{}.pt'.format(dataset, latent_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_248": {
                "variable": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "TOfile",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.TOfile",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "avg_transOp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(train_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "avg_ae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(train_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + 'pretrained/resnet_nn_' + dataset + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "transOp_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transOp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "psi_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.psi_lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "finetune_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.finetune_gamma",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ExponentialLR_278": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "transOp_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(transOp.parameters(), lr=psi_lr, weight_decay=gamma)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(transOp.parameters(), lr=psi_lr, weight_decay=finetune_gamma)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.985",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_280": {
                "variable": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "network_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.net_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ExponentialLR_282": {
                "variable": {
                    "value": "ae_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=network_lr, betas=(0.5, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=network_lr, betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.985",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "{'nearest_neighbor': nearest_neighbor}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + 'pretrained/resnet_nn_{}.pt'.format(dataset)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_196": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + 'pretrained/lresnet_nn_' + dataset + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "variable": {
                    "value": "coefficients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c_store[minIdx, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_324": {
                "variable": {
                    "value": "transOp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp(z0.unsqueeze(-1)).squeeze()",
                            "Call"
                        ],
                        [
                            "transOp(z0.unsqueeze(-1)).squeeze()[train_example]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(x1) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_358": {
                "variable": {
                    "value": "psi_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(normalize_val, torch.sqrt(torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_359": {
                "variable": {
                    "value": "psi_new_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim)), 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "psi_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.div(normalize_val, torch.sqrt(torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1))))",
                            "Call"
                        ],
                        [
                            "transOp.psi.reshape(dict_size, -1).norm(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "psi_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(psi_new_norm, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dict_size, latent_dim, latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mse_loss_381": {
                "variable": {
                    "value": "post_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "post_z1_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp(z0.unsqueeze(-1)).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(x1) / latent_scale",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_402": {
                "obj": {
                    "value": "{'encoder': encoder.state_dict(), 'decoder': decoder.state_dict(), 'transOp': transOp.state_dict(), 'transOp_opt': transOp_opt.state_dict(), 'autoenc_opt': autoenc_opt.state_dict(), 'supervision': supervision, 'ae_loss': total_ae_loss, 'transOp_loss': total_transOp_loss, 'latent_scale': latent_scale, 'latent_mag': total_latent_mag, 'nz_coeff': total_nz_coeff, 'dict_mag': total_dict_mag, 'zeta': zeta, 'gamma': gamma, 'train_samples': train_samples, 'ae_weight': ae_weight}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "saveName",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "save_dir + 'modelDict_{}_M{}Z{}zeta{}gam{}_transOpTrain.pt'.format(dataset, dict_size, latent_dim, zeta, gamma)",
                            "BinOp"
                        ],
                        [
                            "save_dir + 'modelDict_{}_M{}Z{}_step{}.pt'.format(dataset, dict_size, latent_dim, counter)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_494": {
                "variable": {
                    "value": "z_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_204": {
                "obj": {
                    "value": "{'nearest_neighbor': nearest_neighbor}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path + 'pretrained/lresnet_nn_{}.pt'.format(dataset)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_490": {
                "variable": {
                    "value": "coeff_use",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coeff_zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, dict_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_303": {
                "input": {
                    "value": "x1_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder(z1 * latent_scale)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_358": {
                "input": {
                    "value": "normalize_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_359": {
                "input": {
                    "value": "torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_360": {
                "input": {
                    "value": "psi_new_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.transpose(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim)), 0, 1), psi_norm)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_358": {
                "input": {
                    "value": "torch.sum(torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "input": {
                    "value": "psi_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp.get_psi()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(dict_size, latent_dim * latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_358": {
                "input": {
                    "value": "torch.square(torch.reshape(psi_new, (dict_size, latent_dim * latent_dim)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_358": {
                "input": {
                    "value": "torch.reshape(psi_new, (dict_size, latent_dim * latent_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "input": {
                    "value": "psi_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transOp.get_psi()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(dict_size, latent_dim * latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_transop_zetaDecode.py": {
        "torch": {
            "device_115": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "autoenc_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "network_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.net_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_236": {
                "variable": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "TOfile",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.TOfile",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_315": {
                "variable": {
                    "value": "zeta_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "zeta_decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_316": {
                "variable": {
                    "value": "zeta_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "zeta_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(zeta_decoder.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.985",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "loss_con_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "loss_con_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "clf_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_184": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../results/pretrained/vgg_nn_ + dataset + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_245": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'../results/pretrained/pretrain_classifier_{}_{}_{}_ae_Z{}.pt'.format(dataset, args.classifier_type, args.classifier_domain, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_253": {
                "variable": {
                    "value": "clf_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "clf_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(classifier.parameters(), lr=0.01, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ExponentialLR_255": {
                "variable": {
                    "value": "clf_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "clf_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(classifier.parameters(), lr=0.01, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.995",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "test_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "{'nearest_neighbor': nearest_neighbor}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'../results/pretrained/vgg_nn_{}.pt'.format(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_270": {
                "variable": {
                    "value": "clf_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label.to(device)",
                            "Call"
                        ],
                        [
                            "label.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_loader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_304": {
                "obj": {
                    "value": "modelTO_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(TOfile)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "TOfile",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.TOfile",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_311": {
                "obj": {
                    "value": "saveDict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'classifier': classifier.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'../results/pretrained/pretrain_classifier_{}_{}_{}_ae_Z{}.pt'.format(dataset, args.classifier_type, args.classifier_domain, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "latent_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, K + L)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_450": {
                "obj": {
                    "value": "{'encoder': encoder.state_dict(), 'decoder': decoder.state_dict(), 'zeta_decoder': zeta_decoder.state_dict(), 'transOp': transOp.state_dict(), 'classifier': classifier.state_dict(), 'supervision': supervision, 'total_con0_loss': total_con0_loss, 'total_con1_loss': total_con1_loss, 'latent_scale': latent_scale, 'zeta': zeta, 'gamma': gamma, 'train_samples': train_samples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "saveName",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_dir + 'psiVal_step' + str(counter) + '.mat'",
                            "BinOp"
                        ],
                        [
                            "save_dir + 'run{}_modelDict_{}_M{}Z{}_step{}.pt'.format(run_number, dataset, dict_size, latent_dim, counter)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_289": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_292": {
                "variable": {
                    "value": "ce_loss[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "label_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label.to(device)",
                            "Call"
                        ],
                        [
                            "label.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_230": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Classifier(len(train_classes), latent_dim).to(device)",
                            "Call"
                        ],
                        [
                            "Classifier(len(train_classes), image_dim * image_dim * channels).to(device)",
                            "Call"
                        ],
                        [
                            "CNN(len(train_classes)).to(device)",
                            "Call"
                        ],
                        [
                            "LeNet(len(train_classes)).to(device)",
                            "Call"
                        ],
                        [
                            "ResNet(BasicBlock, [3, 3, 3], num_classes=len(train_classes)).to(device)",
                            "Call"
                        ],
                        [
                            "ResNet18().to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_350": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_406": {
                "input": {
                    "value": "coeff_spread0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coeff_spread_scale * (0.5 * log_spread0).exp()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_407": {
                "input": {
                    "value": "coeff_spread1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coeff_spread_scale * (0.5 * log_spread1).exp()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/util/dataloader.py": {
        "torch": {
            "Subset_114": {
                "variable": {
                    "value": "mnist_train_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(mnist_train)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(train_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_115": {
                "variable": {
                    "value": "mnist_test_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(mnist_test)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(test_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train_subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(mnist_train, torch.arange(train_images))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test_subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(mnist_test, torch.arange(test_images))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(testset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(testset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(testset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_263": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='train', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='test', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(test_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='test', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='train', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='test', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(test_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='test', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_76": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='train', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "img_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "data_loader_use",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='train', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_155": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_157": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, len(svhn_train.data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_193": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_195": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, len(fmnist_train.data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_233": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(svhn_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, len(fmnist_train.data)))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_234": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NaturalTransformationDataset(svhn_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(fmnist_test)",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(cifar_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(testset, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_262": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='train', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_292": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='train', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='train', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='train', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(train_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_data, torch.arange(0, int(train_samples)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "torch.arange(0, int(train_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_83": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='test', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(test_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='test', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "img_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "data_loader_use",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(path, download=False, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(path, download=True, train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(path, download=True, split='test', transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "IndexDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(test_data, img_indices)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA('./data', split='test', target_type='attr', download=True, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(32), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CelebA(path, split='test', target_type='attr', download=False, transform=transforms.Compose([transforms.CenterCrop(128), transforms.Resize(64), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "NaturalTransformationDataset(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "train_images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_115": {
                "start": {
                    "value": "test_images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_14": {
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_155": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_157": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(svhn_train.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_193": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_195": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(fmnist_train.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_233": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_234": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_262": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_292": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(train_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/util/find_nn.py": {
        "torch": {
            "CosineSimilarity_23": {
                "variable": {
                    "value": "cos_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/util/nearestneighbors.py": {
        "torch": {
            "sort_28": {
                "variable": {
                    "value": "(_, sort_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "simi_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "simi",
                            "Name"
                        ],
                        [
                            "torch.cat((simi_all, self.similarity))",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "image_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_all, self.neighbors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "simi_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simi_all, self.similarity)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "target_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_all, self.target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "indices_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices_all, self.index)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/util/test_functions.py": {
        "torch": {
            "unsqueeze_40": {
                "variable": {
                    "value": "imgInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0[idxChoice, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "z_trans_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transOp(z_scale.unsqueeze(-1)).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "coeff_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coeff_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(coeff_use, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(coeff_input).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/util/transform.py": {
        "torch": {
            "zeros_8": {
                "variable": {
                    "value": "imgOut_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c_dim, input_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_9": {
                "variable": {
                    "value": "imgOut_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c_dim, input_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "imgOut_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "imgOut_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "cluster_center_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "num_class_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "cv2.warpAffine(imgTemp, M_0, (img_size, img_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "cv2.warpAffine(imgTemp, M_1, (img_size, img_size))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}