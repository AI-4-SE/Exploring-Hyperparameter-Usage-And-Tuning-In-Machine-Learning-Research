{
    "scripts/analysis.py": {
        "sklearn": {
            "roc_curve_274": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_center_acc_bi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bin(test_center_acc, cutoff=test_center_acc_cutoff)",
                            "Call"
                        ],
                        [
                            "bin(test_center_acc, cutoff=test_center_acc_cutoff)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "1 - test_si",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "auc_275": {
                "variable": {
                    "value": "roc_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roc_data[dataset + architecture + 'fpr']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roc_data[dataset + architecture + 'tpr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_curve_344": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_center_acc_bi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bin(test_center_acc, cutoff=test_center_acc_cutoff)",
                            "Call"
                        ],
                        [
                            "bin(test_center_acc, cutoff=test_center_acc_cutoff)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "1 - test_top_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "auc_345": {
                "variable": {
                    "value": "roc_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roc_data[dataset + architecture + 'fpr']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roc_data[dataset + architecture + 'tpr']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/code-sdc/train_self_driving_car.py": {
        "sklearn": {
            "mean_squared_error_71": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[:len(y_pred)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "intermediate_output[1].squeeze()",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_pred_list)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/code-sdc/utils_train_self_driving_car.py": {
        "sklearn": {
            "train_test_split_41": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_112": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "image_sequence",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "steering_angle__sequence",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/tSNE.py": {
        "sklearn": {}
    },
    "scripts/train_detector.py": {
        "sklearn": {
            "mean_squared_error_365": {
                "y_true": {
                    "value": "train_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d['train_y'][:37888]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_y_pred[:train_y.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LinearSVC_638": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_643": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "KNeighborsClassifier_640": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "KNeighborsRegressor_645": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "get_collection_117": {
                "variable": {
                    "value": "var_main_encoder_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "remove_duplicate_node_from_list(var_main_encoder, var_main_encoder_var)",
                            "Call"
                        ],
                        [
                            "remove_duplicate_node_from_list(var_main_encoder, var_main_encoder_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_337": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(images.shape)",
                            "Call"
                        ],
                        [
                            "images.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_338": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "y_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(labels.shape)",
                            "Call"
                        ],
                        [
                            "labels.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GPUOptions_416": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_102": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "sample_prob_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[None, 32, 32, 3]",
                            "List"
                        ],
                        [
                            "[None, 28, 28, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_133": {
                "variable": {
                    "value": "model_dir_load",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_load_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['model_load_dir_ziyuan'] + '/' + model + '_' + architecture + finetune_str + retrain_str",
                            "BinOp"
                        ],
                        [
                            "'../load/cifar10'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reset_default_graph_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_396": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_127": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_666": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_686": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "piecewise_constant_696": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(global_step, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "boundaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[int(sss[0]) for sss in step_size_schedule]",
                            "ListComp"
                        ],
                        [
                            "boundaries[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[sss[1] for sss in step_size_schedule]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "add_710": {
                "variable": {
                    "value": "new_global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step/add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_711": {
                "variable": {
                    "value": "increment_global_step_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(global_step, 1, name='global_step/add')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "global_step/assign",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_790": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_802": {
                "variable": {
                    "value": "var_main_encoder_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "detector_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_804": {
                "variable": {
                    "value": "saver_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "remove_duplicate_node_from_list(var_main_encoder, var_main_encoder_var)",
                            "Call"
                        ],
                        [
                            "remove_duplicate_node_from_list(var_main_encoder, var_main_encoder_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_675": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_676": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(images.shape)",
                            "Call"
                        ],
                        [
                            "images.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_677": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "y_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(labels.shape)",
                            "Call"
                        ],
                        [
                            "labels.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_702": {
                "variable": {
                    "value": "encoder_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.piecewise_constant(tf.cast(global_step, tf.int32), boundaries, values)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reset_default_graph_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_792": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_811": {
                "variable": {
                    "value": "model_detector_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_detector_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['model_load_dir_ziyuan'] + '/' + model + '_' + architecture + '_' + task_type + retrain_with_weak_points_for_detector_str + transformation_mode_str + finetune_str + retrain_str + train_cutoff_str + transform_center_test_str + '_detector'",
                            "BinOp"
                        ],
                        [
                            "tf.train.latest_checkpoint(model_detector_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_127": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, visible_device_list='0')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_674": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_697": {
                "x": {
                    "value": "global_step",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_704": {
                "variable": {
                    "value": "encoder_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.piecewise_constant(tf.cast(global_step, tf.int32), boundaries, values)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_717": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_791": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_808": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_809": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_717": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, visible_device_list='0')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_808": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, visible_device_list='0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/dataloader/loader.py": {
        "tensorflow": {
            "uniform_224": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-angle_max",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "angle_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_225": {
                "variable": {
                    "value": "x_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-x_shift_max",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "x_shift_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_226": {
                "variable": {
                    "value": "y_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-y_shift_max",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "y_shift_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "transforms",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.constant(1.0, shape=[1]), tf.constant(0.0, shape=[1]), -x_shift, tf.constant(0.0, shape=[1]), tf.constant(1.0, shape=[1]), -y_shift, tf.constant(0.0, shape=[1]), tf.constant(0.0, shape=[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GPUOptions_46": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_flip_left_right_258": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, dloader.eval_data.xs.shape[1], dloader.eval_data.xs.shape[2], dloader.eval_data.xs.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "rot_and_shift_exact(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "d['X'].transpose(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_267": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, dloader.eval_data.xs.shape[1], dloader.eval_data.xs.shape[2], dloader.eval_data.xs.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "rot_and_shift_exact(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "d['X'].transpose(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_268": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, dloader.eval_data.xs.shape[1], dloader.eval_data.xs.shape[2], dloader.eval_data.xs.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "rot_and_shift_exact(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "d['X'].transpose(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "per_image_standardization_292": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, dloader.eval_data.xs.shape[1], dloader.eval_data.xs.shape[2], dloader.eval_data.xs.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "rot_and_shift_exact(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "d['X'].transpose(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dloader.eval_data.xs.shape[1], dloader.eval_data.xs.shape[2], dloader.eval_data.xs.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_307": {
                "config": {
                    "value": "tf.ConfigProto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_49": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_234": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_flip_left_right_279": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, dloader.eval_data.xs.shape[1], dloader.eval_data.xs.shape[2], dloader.eval_data.xs.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "rot_and_shift(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "rot_and_shift_exact(images, angle, x_shift, y_shift)",
                            "Call"
                        ],
                        [
                            "d['X'].transpose(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_49": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, visible_device_list='0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/learning/detector.py": {
        "tensorflow": {
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._fully_connected(self.x_input, 1500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 1000)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[prod_non_batch_dimensions, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(distribution='uniform', dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "mean_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(pre_softmax - self.y_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_74": {
                "inputs": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "where_78": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._fully_connected(self.x_input, 1500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 1000)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_92": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._fully_connected(self.x_input, 1500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 1000)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [prod_non_batch_dimensions, out_dim], initializer=tf.initializers.variance_scaling(distribution='uniform', dtype=self.precision))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], initializer=tf.constant_initializer(dtype=self.precision))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "detector_encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_48": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pre_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._fully_connected(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.bin_number)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_52": {
                "variable": {
                    "value": "ce_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.bin_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_53": {
                "variable": {
                    "value": "y_xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "ce_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(self.y_input, self.bin_number)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pre_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._fully_connected(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.bin_number)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "self.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_57": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._fully_connected(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.bin_number)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_58": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(pre_softmax, 1)",
                            "Call"
                        ],
                        [
                            "pre_softmax",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_78": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._fully_connected(self.x_input, 1500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 1000)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "1st",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "2nd",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "3rd",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_46": {
                "x": {
                    "value": "pre_softmax - self.y_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "detector_costs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_xent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=ce_labels, logits=pre_softmax, label_smoothing=self.label_smoothing)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_91": {
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "detector_costs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_73": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._fully_connected(self.x_input, 1500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 1000)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, 500)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_59": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/learning/model_resnet.py": {
        "tensorflow": {
            "argmax_95": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected(x, self.output_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_96": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(pre_softmax, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[prod_non_batch_dimensions, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.uniform_unit_scaling_initializer(factor=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_195": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "x3_extracted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_107": {
                "variable": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "pre_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected(x, self.output_classes)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "mean_xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "debug_160": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_169": {
                "inputs": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_183": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_197": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [prod_non_batch_dimensions, out_dim], initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], initializer=tf.constant_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_201": {
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "main_encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_99": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_110": {
                "variable": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "logits": {
                    "value": "pre_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected(x, self.output_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_154": {
                "variable": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_155": {
                "variable": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_179": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [filter_size, filter_size, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / n)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2, 2]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_183": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_194": {
                "factor": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_168": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_177": {
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_191": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._conv('init_conv', self.x_input, 3, self.in_filter_size, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/learning/model_vgg16.py": {
        "tensorflow": {
            "get_variable_28": {
                "variable": {
                    "value": "new_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_83": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_88": {
                "variable": {
                    "value": "fc_bn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "BN_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "moments_100": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_105": {
                "variable": {
                    "value": "bn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "BN_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv2d_118": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='conv_relu', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv_bn_relu', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='bn_relu_conv', shape=filter_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_layer, filter, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_layer, filter, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(relu_layer, filter, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_136": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='conv_relu', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv_bn_relu', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='bn_relu_conv', shape=filter_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "relu_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='conv_relu', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv_bn_relu', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='bn_relu_conv', shape=filter_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "a": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "fc_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='fc_weights', shape=[input_dim, num_output], is_fc_layer=True, initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ],
                        [
                            "create_variables(name='fc_weights', shape=[input_dim, num_output], is_fc_layer=True, initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_47": {
                "features": {
                    "value": "fc_result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(input_layer, fc_w) + fc_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(input_layer, fc_w) + fc_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "a": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "fc_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='fc_weights', shape=[input_dim, num_output], is_fc_layer=True, initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ],
                        [
                            "create_variables(name='fc_weights', shape=[input_dim, num_output], is_fc_layer=True, initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_68": {
                "features": {
                    "value": "fc_bn_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_fc_normalization_layer(fc_result, num_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "fc_reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv5_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(s, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_reshape",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_273": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc8",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_274": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(pre_softmax, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_275": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_302": {
                "inputs": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "uniform_unit_scaling_initializer_42": {
                "factor": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_62": {
                "factor": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_85": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_87": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_102": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_104": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "main_encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_203": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_bn_relu_layer(conv1_1, [3, 3, 64, 64], 1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_210": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_bn_relu_layer(conv2_1, [3, 3, 128, 128], 1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_221": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_bn_relu_layer(conv3_2, [3, 3, 256, 256], 1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_232": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_bn_relu_layer(conv4_2, [3, 3, 512, 512], 1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_243": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_bn_relu_layer(conv5_2, [3, 3, 512, 512], 1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_259": {
                "variable": {
                    "value": "fc6_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_bn_layer(fc_reshape, 4096)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_264": {
                "variable": {
                    "value": "fc7_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_bn_layer(fc6_drop, 4096)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_285": {
                "variable": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "pre_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc8",
                            "Name"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_289": {
                "variable": {
                    "value": "mean_xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "conv1_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "conv1_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "conv1_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "conv2_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "conv2_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_209": {
                "name": {
                    "value": "conv2_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "conv3_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "conv3_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "conv3_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_220": {
                "name": {
                    "value": "conv3_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "conv4_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "conv4_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "conv4_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_231": {
                "name": {
                    "value": "conv4_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "conv5_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "conv5_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "conv5_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_242": {
                "name": {
                    "value": "conv5_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_247": {
                "input": {
                    "value": "conv6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv5_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "fc6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_258": {
                "name": {
                    "value": "dropout1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "fc7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_263": {
                "name": {
                    "value": "dropout2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "fc8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_277": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_284": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_288": {
                "variable": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "logits": {
                    "value": "pre_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc8",
                            "Name"
                        ]
                    ]
                }
            },
            "l2_loss_301": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/learning/model_wrn.py": {
        "tensorflow": {
            "argmax_101": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected_final(x, self.output_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_102": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(pre_softmax, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_221": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[prod_non_batch_dimensions, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(distribution='uniform', dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_224": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "x3_extracted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_111": {
                "variable": {
                    "value": "ce_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.output_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_112": {
                "variable": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "ce_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(self.y_input, self.output_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pre_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected_final(x, self.output_classes)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "self.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "mean_xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "debug_168": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_177": {
                "inputs": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / n), dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_191": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_206": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[prod_non_batch_dimensions, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.uniform_unit_scaling_initializer(factor=1.0, dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(dtype=self.precision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_226": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [prod_non_batch_dimensions, out_dim], dtype=self.precision, initializer=tf.uniform_unit_scaling_initializer(factor=1.0, dtype=self.precision))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('DW', [prod_non_batch_dimensions, out_dim], initializer=tf.initializers.variance_scaling(distribution='uniform', dtype=self.precision))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], dtype=self.precision, initializer=tf.constant_initializer(dtype=self.precision))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [out_dim], initializer=tf.constant_initializer(dtype=self.precision))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_230": {
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "main_encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_49": {
                "variable": {
                    "value": "input_standardized",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.image.per_image_standardization(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_105": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(predictions, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_117": {
                "variable": {
                    "value": "self.y_xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "logits": {
                    "value": "pre_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected_final(x, self.output_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_162": {
                "variable": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_163": {
                "variable": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [filter_size, filter_size, in_filters, out_filters], self.precision, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / n), dtype=self.precision))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2, 2]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_191": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_211": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [prod_non_batch_dimensions, out_dim], dtype=self.precision, initializer=tf.uniform_unit_scaling_initializer(factor=1.0, dtype=self.precision))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('DW', [prod_non_batch_dimensions, out_dim], initializer=tf.initializers.variance_scaling(distribution='uniform', dtype=self.precision))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], dtype=self.precision, initializer=tf.constant_initializer(dtype=self.precision))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [out_dim], initializer=tf.constant_initializer(dtype=self.precision))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_225": {
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_176": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_185": {
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_208": {
                "factor": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_210": {
                "dtype": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_220": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "per_image_standardization_49": {
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_205": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res_func(x0, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x1, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x2, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x3)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/train_classification_model.py": {
        "tensorflow": {
            "GPUOptions_156": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_177": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_219": {
                "variable": {
                    "value": "var_main_encoder_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_221": {
                "variable": {
                    "value": "saver_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "remove_duplicate_node_from_list(var_main_encoder, var_main_encoder_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_250": {
                "variable": {
                    "value": "new_global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step/add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_251": {
                "variable": {
                    "value": "increment_global_step_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(global_step, 1, name='global_step/add')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "global_step/assign",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_260": {
                "variable": {
                    "value": "merged_summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_174": {
                "seed": {
                    "value": "config['tf_random_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[None, 32, 32, 3]",
                            "List"
                        ],
                        [
                            "[None, 28, 28, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "sample_prob_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "piecewise_constant_231": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(global_step, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "boundaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[int(sss[0]) for sss in step_size_schedule]",
                            "ListComp"
                        ],
                        [
                            "boundaries[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[sss[1] for sss in step_size_schedule]",
                            "ListComp"
                        ],
                        [
                            "[v * 0.1 for v in values]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_257": {
                "name": {
                    "value": "train_batch_nat accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "n_Aaccuracy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_258": {
                "name": {
                    "value": "train_batch_nat mean xent",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "n_Amean_xent",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_259": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.piecewise_constant(tf.cast(global_step, tf.int32), boundaries, values)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "train/m_encoder_momentum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_241": {
                "variable": {
                    "value": "encoder_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.piecewise_constant(tf.cast(global_step, tf.int32), boundaries, values)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "FileWriter_281": {
                "variable": {
                    "value": "test_summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "eval_dir + '_nat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_232": {
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_243": {
                "variable": {
                    "value": "encoder_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.piecewise_constant(tf.cast(global_step, tf.int32), boundaries, values)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_279": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_286": {
                "variable": {
                    "value": "model_dir_load",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_load_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['model_load_dir_ziyuan'] + '/natural' + '_' + architecture",
                            "BinOp"
                        ],
                        [
                            "config['model_load_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "latest_checkpoint_371": {
                "variable": {
                    "value": "model_dir_load",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_load_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['model_load_dir_ziyuan'] + '/natural' + '_' + architecture",
                            "BinOp"
                        ],
                        [
                            "config['model_load_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "global_variables_initializer_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_367": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_279": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list='1')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_367": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list='1')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/utils_new.py": {
        "tensorflow": {
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_50": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "a * a + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "a_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(a * a + 1e-20, axis=1) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [tf.shape(x)[0], -1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}