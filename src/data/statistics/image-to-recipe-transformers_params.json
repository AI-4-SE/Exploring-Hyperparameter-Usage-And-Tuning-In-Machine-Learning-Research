{
    "src/utils/metrics.py": {
        "sklearn": {
            "pairwise_distances_41": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "database",
                    "type": "Variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cosine'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/dataset.py": {
        "torch": {
            "DataLoader_216": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Recipe1M(root, transform=transforms_, split=split, text_only_data=text_only_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "multiprocessing.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_104": {
                "variable": {
                    "value": "title",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(image, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "Parameter_30": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_embeddings, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.backbone.head.in_features",
                            "Attribute"
                        ],
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.backbone.head.in_features",
                            "Attribute"
                        ],
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats * mask_words.unsqueeze(-1).expand_as(feats)",
                            "BinOp"
                        ],
                        [
                            "feats.sum(dim=-2)",
                            "Call"
                        ],
                        [
                            "self.backbone.forward_features(images)",
                            "Call"
                        ],
                        [
                            "self.backbone.forward_features(images)",
                            "Call"
                        ],
                        [
                            "self.backbone(images)",
                            "Call"
                        ],
                        [
                            "feats.view(feats.size(0), feats.size(1), feats.size(2) * feats.size(3))",
                            "Call"
                        ],
                        [
                            "torch.mean(feats, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.backbone(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_155": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "n_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_158": {
                "variable": {
                    "value": "self.tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(d_model=dim, nhead=n_heads)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_197": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleDict_199": {
                "variable": {
                    "value": "self.tfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_212": {
                "variable": {
                    "value": "self.merger",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_294": {
                "variable": {
                    "value": "self.merger_recipe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.merger_recipe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_recipe * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleDict_300": {
                "variable": {
                    "value": "self.projector_recipes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_303": {
                "variable": {
                    "value": "self.projector_recipes[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_not_171": {
                "input": {
                    "value": "ignore_mask",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "input == 0",
                            "Compare"
                        ],
                        [
                            "input_rs == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "text_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_not_248": {
                "input": {
                    "value": "mask_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(attn_mask.sum(dim=-1) > 0).bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.projector_recipes[name][name2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_recipe",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_recipe",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(args, vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "GradScaler_191": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_100": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "checkpoints_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_176": {
                "variable": {
                    "value": "ngpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_177": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(args, vocab_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_315": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_316": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/loss.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "pow_27": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_28": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(scores_i2r.size(0)).to(im.device)",
                            "Call"
                        ],
                        [
                            "y.expand_as(scores_i2r)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_28": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MarginRankingLoss_53": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_62": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "im.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "scores_i2r.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_58": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/utils.py": {
        "torch": {
            "load_90": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'model-' + suff + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StepLR_18": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params_fc, lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam([{'params': params_fc}, {'params': params_backbone, 'lr': lr * scale_lr}], lr=lr, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': params_fc}, {'params': params_backbone, 'lr': lr * scale_lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "model_dict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.module.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'model-' + suffix + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'optim-' + suffix + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "opt_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'optim-' + suff + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_24": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params_fc, lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam([{'params': params_fc}, {'params': params_backbone, 'lr': lr * scale_lr}], lr=lr, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'max' if 'recall' in args.es_metric else 'min'",
                            "IfExp"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.lr_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.lr_decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_30": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params_fc, lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam([{'params': params_fc}, {'params': params_backbone, 'lr': lr * scale_lr}], lr=lr, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}