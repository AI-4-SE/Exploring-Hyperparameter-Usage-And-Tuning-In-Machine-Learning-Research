{
    "adaptive_inference.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "flops",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'flops.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_15": {
                "variable": {
                    "value": "(val_pred, val_target, test_pred, test_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'logits_single.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_42": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "ts_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_73": {
                "variable": {
                    "value": "ts_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "filtered",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_91": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_19": {
                "obj": {
                    "value": "(val_pred, val_target, test_pred, test_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'logits_single.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(_p) * torch.range(1, args.nBlocks)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "logits[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "n_stage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args.nBlocks",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "n_stage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args.nBlocks",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(1).fill_(p * 1.0 / 20)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_28": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "args.nBlocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "randperm_59": {
                "variable": {
                    "value": "train_set_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(train_set)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "train_set_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'index.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(train_set_index[:-num_sample_valid])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(train_set_index[-num_sample_valid:])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "train_set_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randperm(len(train_set))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save, 'index.pth'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save, 'index.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_74": {
                "indices": {
                    "value": "train_set_index[:-num_sample_valid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_80": {
                "indices": {
                    "value": "train_set_index[-num_sample_valid:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "models/msdnet.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut, kernel_size=kernel, stride=stride, padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "parallel_modules",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_205": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBasic(nIn, interChannels1, kernel=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBasic(nIn, nIn, kernel=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1], self.conv_down(x[0]), self.conv_normal(x[1])]",
                            "List"
                        ],
                        [
                            "[x[0], self.conv_normal(x[0])]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.m(x[-1])",
                            "Call"
                        ],
                        [
                            "res.view(res.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1], self.conv_down(x[0]), self.conv_normal(x[1])]",
                            "List"
                        ],
                        [
                            "[x[0], self.conv_normal(x[0])]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.m(x[-1])",
                            "Call"
                        ],
                        [
                            "res.view(res.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut * args.grFactor[0], 7, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_323": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_331": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nInner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "nInner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "nInner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "nInner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut * args.grFactor[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "nOut * args.grFactor[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "op_counter.py": {
        "torch": {
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}