{
    "logger.py": {
        "tensorflow": {
            "FileWriter_16": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_20": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_43": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_53": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_70": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {}
    },
    "attack/BFA.py": {
        "torch": {
            "stack_26": {
                "variable": {
                    "value": "grad_topk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(grad_topk)",
                            "Call"
                        ],
                        [
                            "grad_topk.topk(k_top)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_27": {
                "variable": {
                    "value": "idx_topk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(idx_topk)",
                            "Call"
                        ],
                        [
                            "idx_topk[new_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_36": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "f_grad.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_661": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_705": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_666": {
                "variable": {
                    "value": "reshaped_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_684": {
                "variable": {
                    "value": "reshaped_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_710": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.grain_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.grain_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_725": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "m.weight.detach().view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.grain_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.grain_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_156": {
                "input": {
                    "value": "(bit2flip.short() * m.b_w.abs().short()).sum(0, dtype=torch.int16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_274": {
                "variable": {
                    "value": "self.grain_mask[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "m.weight.data.detach().size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_712": {
                "low": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "pooling_result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_727": {
                "low": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "pooling_result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "attack/data_conversion.py": {
        "torch": {}
    },
    "attack/random_attack.py": {
        "torch": {}
    },
    "models/ResNet_quan.py": {
        "torch": {
            "Tensor_85": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_195": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_197": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_230": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_236": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_241": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_282": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_284": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_289": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "quan_Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, padding=0, bias=False, grain_size=grain_size, num_bits=num_bits, M2D=M2D, save_path=save_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "self.centroid * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/centroid{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "output * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/deviation{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_91": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_147": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_156": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_162": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_309": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet_quan_check.py": {
        "torch": {
            "Tensor_190": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_252": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_307": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_308": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_310": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_343": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_349": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_354": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_355": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_395": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_396": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_397": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_402": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "quan_Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, codebook=codebook, stride=stride, padding=0, bias=False, grain_size=grain_size, num_bits=num_bits, M2D=M2D, save_path=save_path, check_gsize=check_gsize, check_factor=check_factor, check_bit=check_bit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_196": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_196": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_206": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_215": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_258": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_268": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_275": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "orig_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_77": {
                "variable": {
                    "value": "detected_item",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inequal[::2] + inequal[1::2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "orig_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_97": {
                "variable": {
                    "value": "detected_item",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inequal[::2] + inequal[1::2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_279": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_422": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "orig_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_118": {
                "variable": {
                    "value": "detected_item",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inequal[::2] + inequal[1::2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_136": {
                "variable": {
                    "value": "orig_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_138": {
                "variable": {
                    "value": "detected_item",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inequal[::2] + inequal[1::2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d_transformed, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ],
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/check_modules.py": {
        "torch": {
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().permute(1, 2, 3, 0).view(-1, initial_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm_b]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_127": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().permute(1, 2, 3, 0).view(-1, initial_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm_b]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_276": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "output_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output_concate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixed_bit[:, :num_bits].flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_166": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "codebook_bc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codebook.repeat(repeat_time, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((codebook_bc, codebook[i, :].view(1, -1)), 0)",
                            "Call"
                        ],
                        [
                            "codebook_bc.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "(output, overflow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().permute(1, 2, 3, 0).view(-1, initial_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm_b]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_183": {
                "variable": {
                    "value": "overflow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_185": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().permute(1, 2, 3, 0).view(-1, initial_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(input)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "input.flatten()",
                            "Call"
                        ],
                        [
                            "input[perm_b]",
                            "Subscript"
                        ],
                        [
                            "input.reshape(original_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float().to(device)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "overflow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_204": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_209": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_216": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_225": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_22": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rescue_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescue_mask[::2] & rescue_mask[1::2]",
                            "BinOp"
                        ],
                        [
                            "rescue_mask[::1]",
                            "Subscript"
                        ],
                        [
                            "rescue_mask.view(-1, 1).repeat(1, grain_size[1]).cuda().float()",
                            "Call"
                        ],
                        [
                            "rescue_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rescue_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescue_mask[::2] & rescue_mask[1::2]",
                            "BinOp"
                        ],
                        [
                            "rescue_mask[::1]",
                            "Subscript"
                        ],
                        [
                            "rescue_mask.view(-1, 1).repeat(1, grain_size[1]).cuda().float()",
                            "Call"
                        ],
                        [
                            "rescue_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_162": {
                "variable": {
                    "value": "codebook_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(codebook_bc, codebook[i, :].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, coded_rest.view(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "overflow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(overflow, overflow_rest.view(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, coded_rest.view(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "overflow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(overflow, overflow_rest.view(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_31": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rescue_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescue_mask[:-1, :]",
                            "Subscript"
                        ],
                        [
                            "rescue_mask[:-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_33": {
                "variable": {
                    "value": "output_rest",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rescue_mask_1[-1, :reshaped_input_rest.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_33": {
                "variable": {
                    "value": "output_rest",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flattened_output, output_rest)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_36": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rescue_mask[-1, :reshaped_input_rest.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_36": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rescue_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescue_mask[:-1, :]",
                            "Subscript"
                        ],
                        [
                            "rescue_mask[:-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_68": {
                "variable": {
                    "value": "output_rest",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rescue_mask[-1, :reshaped_input_rest.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_68": {
                "variable": {
                    "value": "output_rest",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flattened_output, output_rest)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rescue_mask[-1, :reshaped_input_rest.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "(output.view(1), overflow.view(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_173": {
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "shuffle_weight(reshaped_input)",
                            "Call"
                        ],
                        [
                            "reshaped_input.char()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "flattened_input[:correct_shape].view(-1, grain_size[1])",
                            "Call"
                        ],
                        [
                            "reshaped_input.cuda()",
                            "Call"
                        ],
                        [
                            "input.view(original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(-1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ],
                        [
                            "reshaped_input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "codebook[:reshaped_input.size()[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_151": {
                "input": {
                    "value": "flattened_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().flatten()",
                            "Call"
                        ],
                        [
                            "input.contiguous().flatten()",
                            "Call"
                        ],
                        [
                            "reshaped_input.contiguous().flatten()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "codebook[0, :flattened_input.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_169": {
                "input": {
                    "value": "reshaped_input_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "codebook_bc[0, :reshaped_input_rest.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_175": {
                "input": {
                    "value": "reshaped_input_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ],
                        [
                            "flattened_input[correct_shape:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "codebook[reshaped_input.size()[0], :reshaped_input_rest.size()[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/codebook.py": {
        "torch": {}
    },
    "models/fixpoint_modules.py": {
        "torch": {
            "avg_pool2d_10": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_18": {
                "variable": {
                    "value": "pooling_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, 1, original_size[0], original_size[1])",
                            "Call"
                        ],
                        [
                            "input.permute(1, 2, 3, 0).view(1, 1, -1, original_size[0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "grain_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "grain_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "hardtanh_48": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "min_val": {
                    "value": "-ctx.half_lvls * ctx.step_size.item()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "ctx.half_lvls * ctx.step_size.item()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output / ctx.step_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / self.half_lvls])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / self.half_lvls])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "self.centroid * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/centroid{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "output * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/deviation{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_142": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_150": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_199": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_205": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_189": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/quan_resnet_cifar.py": {
        "torch": {
            "Parameter_73": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / self.half_lvls])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / self.half_lvls])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_189": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_204": {
                "variable": {
                    "value": "self.bn_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_207": {
                "variable": {
                    "value": "self.bn_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_216": {
                "variable": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.bn_a(basicblock)",
                            "Call"
                        ],
                        [
                            "F.relu(basicblock, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b(basicblock)",
                            "Call"
                        ],
                        [
                            "self.bn_b(basicblock)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_260": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_290": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_224": {
                "input": {
                    "value": "residual + basicblock",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_33": {
                "obj": {
                    "value": "self.centroid * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/centroid{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_34": {
                "obj": {
                    "value": "output * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/deviation{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_155": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_161": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_79": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_142": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_142": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/quan_resnet_cifar_check.py": {
        "torch": {
            "Parameter_109": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / self.half_lvls])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / self.half_lvls])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_233": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_248": {
                "variable": {
                    "value": "self.bn_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_251": {
                "variable": {
                    "value": "self.bn_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_260": {
                "variable": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.bn_a(basicblock)",
                            "Call"
                        ],
                        [
                            "F.relu(basicblock, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b(basicblock)",
                            "Call"
                        ],
                        [
                            "self.bn_b(basicblock)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_304": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_334": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "orig_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_268": {
                "input": {
                    "value": "residual + basicblock",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "conv2d_129": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_198": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_205": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self.step_size",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(self.weight * self.step_size)",
                            "Call"
                        ],
                        [
                            "Unite(grain_size=self.grain_size, num_bits=self.num_bits, M2D=self.M2D, step_size=self.step_size, half_lvls=self.half_lvls, save_path=self.save_path, check_gsize=self.check_gsize, check_factor=self.check_factor, check_bit=self.check_bit, codebook=self.codebook)(weight_quan) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_qcode(input_d, [1, self.checking_group], self.checking_bit, self.half_lvls, factor=self.checking_factor_sigma, codebook=self.codebook)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.save_path + '/saved_tensors/signature{}.pt'.format(ti)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_115": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_184": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/quantization.py": {
        "torch": {
            "hardtanh_15": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "min_val": {
                    "value": "-ctx.half_lvls * ctx.step_size.item()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "ctx.half_lvls * ctx.step_size.item()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_19": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output / ctx.step_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.b_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** torch.arange(start=self.N_bits - 1, end=-1, step=-1).unsqueeze(-1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_quan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quantize(self.weight, self.step_size, self.half_lvls) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "quantize(self.weight, self.step_size, self.half_lvls) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_120": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_125": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_quan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quantize(self.weight, self.step_size, self.half_lvls) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "quantize(self.weight, self.step_size, self.half_lvls) * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_111": {
                "start": {
                    "value": "self.N_bits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_vanilla.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_110": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/vanilla_resnet_cifar.py": {
        "torch": {
            "AvgPool2d_13": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.bn_a(basicblock)",
                            "Call"
                        ],
                        [
                            "F.relu(basicblock, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b(basicblock)",
                            "Call"
                        ],
                        [
                            "self.bn_b(basicblock)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_78": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_17": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "residual + basicblock",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "test_main.py": {
        "torch": {}
    },
    "tuner_utils/yellowfin.py": {
        "torch": {
            "SGD_66": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_377": {
                "variable": {
                    "value": "param_grad_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_275": {
                "input": {
                    "value": "state['grad_avg'] * state['grad_avg']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "numel_326": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.add(group['weight_decay'], p.data)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_226": {
                "input": {
                    "value": "np.log(curv_win[:valid_end] + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_229": {
                "input": {
                    "value": "curv_win[:valid_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_232": {
                "input": {
                    "value": "np.log(curv_win[:valid_end] + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_235": {
                "input": {
                    "value": "curv_win[:valid_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tuner_utils/yellowfin_test.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {}
    },
    "utils_/model_summary.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_26": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_29": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "utils_/utils.py": {
        "torch": {}
    }
}