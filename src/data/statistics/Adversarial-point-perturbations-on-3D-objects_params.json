{
    "dgcnn/tensorflow/utils/tf_util.py": {
        "tensorflow": {
            "squeeze_650": {
                "variable": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_654": {
                "variable": {
                    "value": "point_cloud_transpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_655": {
                "variable": {
                    "value": "point_cloud_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "point_cloud_transpose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(point_cloud, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_657": {
                "variable": {
                    "value": "point_cloud_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(point_cloud)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_658": {
                "variable": {
                    "value": "point_cloud_square_tranpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud_square",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(point_cloud), axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_672": {
                "variable": {
                    "value": "(_, nn_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_adj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-adj_matrix",
                            "UnaryOp"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_687": {
                "variable": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_699": {
                "variable": {
                    "value": "idx_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * num_points",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(idx_, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_701": {
                "variable": {
                    "value": "point_cloud_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_702": {
                "variable": {
                    "value": "point_cloud_neighbors",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "point_cloud_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(point_cloud, [-1, num_dims])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nn_idx + idx_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_703": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_central",
                    "type": "Name",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(point_cloud_central, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_705": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_central",
                    "type": "Name",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(point_cloud_central, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_707": {
                "variable": {
                    "value": "edge_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[point_cloud_central, point_cloud_neighbors - point_cloud_central]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_46": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_49": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_97": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_102": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_165": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_240": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_245": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_302": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_307": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_344": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_347": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_375": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_400": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_426": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_451": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_534": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "train_bn_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "test_bn_op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_634": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_652": {
                "variable": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_689": {
                "variable": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_21": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_50": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_337": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_515": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "moments_524": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_526": {
                "variable": {
                    "value": "train_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_mean', [num_channels], initializer=tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_527": {
                "variable": {
                    "value": "train_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_var', [num_channels], initializer=tf.ones_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_633": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_657": {
                "x": {
                    "value": "point_cloud",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_49": {
                "t": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_101": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_164": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_244": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_306": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_346": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_532": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_mean', [num_channels], initializer=tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_var', [num_channels], initializer=tf.ones_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('beta', [num_channels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('gamma', [num_channels], initializer=tf.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_520": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_528": {
                "control_inputs": {
                    "value": "[train_mean, train_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_529": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('beta', [num_channels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('gamma', [num_channels], initializer=tf.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_635": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet/models/pointnet_cls.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "labels_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "point_cloud_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "transform",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(point_cloud, transform)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "net_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(net, axis=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "transform",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "net_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_transformed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(net, axis=[2]), transform)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(net_transformed, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net_transformed, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_62": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net_transformed, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "feature_vector",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "mat_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "transform",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(transform, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_88": {
                "variable": {
                    "value": "mat_diff_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "mat_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(transform, tf.transpose(transform, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "mat_diff - tf.constant(np.eye(K), dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_81": {
                "name": {
                    "value": "classify loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_87": {
                "value": {
                    "value": "np.eye(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "mat loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "mat_diff_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(mat_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "transform_net1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "transform_net2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net_transformed, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "a": {
                    "value": "transform",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet/train.py": {
        "tensorflow": {
            "exponential_decay_77": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "DECAY_STEP",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.decay_step",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "DECAY_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.decay_rate",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_83": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_87": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BN_INIT_DECAY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "BN_DECAY_DECAY_STEP",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(DECAY_STEP)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "BN_DECAY_DECAY_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_93": {
                "variable": {
                    "value": "bn_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BN_DECAY_CLIP",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_147": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_151": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_155": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_156": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_158": {
                "variable": {
                    "value": "test_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_161": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_127": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_int64(labels_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "bn_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.minimum(BN_DECAY_CLIP, 1 - bn_momentum)",
                            "Call"
                        ],
                        [
                            "get_bn_decay(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_112": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MODEL.get_loss(pred, labels_pl, end_points)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "MODEL.get_loss(y, t, end_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_129": {
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(correct, tf.float32)) / float(BATCH_SIZE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_133": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.momentum",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmax_127": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_127": {
                "x": {
                    "value": "labels_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_128": {
                "x": {
                    "value": "correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.to_int64(labels_pl))",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val == current_label[start_idx:end_idx])",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val == current_label[start_idx:end_idx])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnet/utils/tf_util.py": {
        "tensorflow": {
            "get_variable_21": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_44": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_94": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_99": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_161": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_236": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_241": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_297": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_302": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_341": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_370": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_395": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_421": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_446": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_583": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_19": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_48": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_443": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_582": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_loss_47": {
                "t": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_98": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_240": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_301": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_340": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_584": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2/models/pointnet2_cls_ssg.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "labels_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_38": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(l3_points, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.5, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.5, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "feature_vector",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_51": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_53": {
                "name": {
                    "value": "classify loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_54": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/train.py": {
        "tensorflow": {}
    },
    "src/dgcnn_interface.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_32": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.x_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_40": {
                "variable": {
                    "value": "self.x_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ifft2d(self.x_freq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.x_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.init_sink_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.sink_source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.lambda_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "sinks",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sinks",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assign_57": {
                "variable": {
                    "value": "self.init_sinks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "sinks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('sinks', dtype=tf.float32, shape=(1, sink, 3))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.init_sink_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "variable": {
                    "value": "loss_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_perturb - self.x_clean) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_69": {
                "variable": {
                    "value": "sink_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + sinks[:, :, tf.newaxis, :] - sinks[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_70": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "sink",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_75": {
                "variable": {
                    "value": "self.init_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer.get_slot(sinks, name) for name in optimizer.get_slot_names()] + list(optimizer._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.x_clean_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.x_mask_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.x_init_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.lambda_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.alpha_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.eta_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "x_sticks_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sticks_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_86": {
                "variable": {
                    "value": "self.init_x_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_sticks_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_sticks_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_sticks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_89": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_90": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_sticks - self.x_clean_sticks) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "optimizer_sticks",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_sticks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_101": {
                "variable": {
                    "value": "self.init_optimizer_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_sticks.get_slot(x_sticks_raw, name) for name in optimizer_sticks.get_slot_names()] + list(optimizer_sticks._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.x_clean_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.x_prev_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "self.x_mask_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self.x_init_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.lambda_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "self.alpha_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.eta_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "x_dropout_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_dropout_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_113": {
                "variable": {
                    "value": "self.init_x_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_dropout_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_dropout_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_116": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_117": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_dropout - self.x_clean_dropout * self.x_mask_dropout) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "optimizer_dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_128": {
                "variable": {
                    "value": "self.init_optimizer_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_dropout.get_slot(x_dropout_raw, name) for name in optimizer_dropout.get_slot_names()] + list(optimizer_dropout._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.x_clean_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.x_init_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.lambda_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.alpha_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.eta_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_136": {
                "variable": {
                    "value": "x_chamfer_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_chamfer_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_138": {
                "variable": {
                    "value": "self.init_x_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_chamfer_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_chamfer_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_141": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_142": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "loss_chamfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_chamfer - self.x_clean_chamfer) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_151": {
                "variable": {
                    "value": "optimizer_chamfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_153": {
                "variable": {
                    "value": "self.init_optimizer_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_chamfer.get_slot(x_chamfer_raw, name) for name in optimizer_chamfer.get_slot_names()] + list(optimizer_chamfer._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_23": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.x_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ifft2d_40": {
                "input": {
                    "value": "self.x_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_46": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.x_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_60": {
                "x": {
                    "value": "-(dist / self.epsilon) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "(self.x_perturb - self.x_clean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_71": {
                "input_tensor": {
                    "value": "tf.where(diag > 0.0, tf.fill((1, sink, sink), float('inf')), sink_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_72": {
                "input_tensor": {
                    "value": "tf.linalg.norm(1e-06 + sinks - self.sink_source, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "(self.x_sticks - self.x_clean_sticks) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_dropout[:, :, tf.newaxis, :] - self.x_clean_dropout[:, tf.newaxis, :, :] * self.x_mask_dropout[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "(self.x_dropout - self.x_clean_dropout * self.x_mask_dropout) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_150": {
                "input_tensor": {
                    "value": "(self.x_chamfer - self.x_clean_chamfer) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_28": {
                "ys": {
                    "value": "logits[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_62": {
                "x": {
                    "value": "tf.reduce_sum(perturb, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_71": {
                "condition": {
                    "value": "diag > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill((1, sink, sink), float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sink_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.norm(1e-06 + sinks[:, :, tf.newaxis, :] - sinks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_72": {
                "tensor": {
                    "value": "1e-06 + sinks - self.sink_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_140": {
                "x": {
                    "value": "x_chamfer_raw - self.x_clean_chamfer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "perturb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rbf * (sinks[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_71": {
                "dims": {
                    "value": "(1, sink, sink)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "x": {
                    "value": "x_sticks_raw - self.x_clean_sticks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_115": {
                "x": {
                    "value": "x_dropout_raw - self.x_prev_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet2_interface.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_32": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.x_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.init_sink_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.sink_source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.lambda_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "sinks",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sinks",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assign_47": {
                "variable": {
                    "value": "self.init_sinks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "sinks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('sinks', dtype=tf.float32, shape=(1, sink, 3))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.init_sink_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_49": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_58": {
                "variable": {
                    "value": "loss_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_perturb - self.x_clean) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "sink_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + sinks[:, :, tf.newaxis, :] - sinks[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_60": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "sink",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_65": {
                "variable": {
                    "value": "self.init_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer.get_slot(sinks, name) for name in optimizer.get_slot_names()] + list(optimizer._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.x_clean_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.x_mask_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.x_init_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.lambda_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.alpha_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.eta_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "x_sticks_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sticks_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_76": {
                "variable": {
                    "value": "self.init_x_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_sticks_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_sticks_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_sticks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_79": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_80": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_sticks - self.x_clean_sticks) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_89": {
                "variable": {
                    "value": "optimizer_sticks",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_sticks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_91": {
                "variable": {
                    "value": "self.init_optimizer_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_sticks.get_slot(x_sticks_raw, name) for name in optimizer_sticks.get_slot_names()] + list(optimizer_sticks._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.x_clean_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.x_init_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.lambda_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.alpha_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.eta_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "x_chamfer_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_chamfer_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_101": {
                "variable": {
                    "value": "self.init_x_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_chamfer_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_chamfer_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_104": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_105": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "loss_chamfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_113": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_chamfer - self.x_clean_chamfer) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_114": {
                "variable": {
                    "value": "optimizer_chamfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_116": {
                "variable": {
                    "value": "self.init_optimizer_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_chamfer.get_slot(x_chamfer_raw, name) for name in optimizer_chamfer.get_slot_names()] + list(optimizer_chamfer._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_23": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.x_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "-(dist / self.epsilon) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "(self.x_perturb - self.x_clean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_61": {
                "input_tensor": {
                    "value": "tf.where(diag > 0.0, tf.fill((1, sink, sink), float('inf')), sink_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_62": {
                "input_tensor": {
                    "value": "tf.linalg.norm(1e-06 + sinks - self.sink_source, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "(self.x_sticks - self.x_clean_sticks) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "(self.x_chamfer - self.x_clean_chamfer) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_28": {
                "ys": {
                    "value": "logits[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "x": {
                    "value": "tf.reduce_sum(perturb, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_61": {
                "condition": {
                    "value": "diag > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill((1, sink, sink), float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sink_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.norm(1e-06 + sinks[:, :, tf.newaxis, :] - sinks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_62": {
                "tensor": {
                    "value": "1e-06 + sinks - self.sink_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_103": {
                "x": {
                    "value": "x_chamfer_raw - self.x_clean_chamfer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "perturb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rbf * (sinks[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_61": {
                "dims": {
                    "value": "(1, sink, sink)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "x": {
                    "value": "x_sticks_raw - self.x_clean_sticks",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet_interface.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_32": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.x_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_40": {
                "variable": {
                    "value": "self.x_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ifft2d(self.x_freq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.x_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.init_sink_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.sink_source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.lambda_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "sinks",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sinks",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sink, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assign_57": {
                "variable": {
                    "value": "self.init_sinks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "sinks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('sinks', dtype=tf.float32, shape=(1, sink, 3))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.init_sink_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "variable": {
                    "value": "loss_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_perturb - self.x_clean) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_69": {
                "variable": {
                    "value": "sink_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + sinks[:, :, tf.newaxis, :] - sinks[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_70": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "sink",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_75": {
                "variable": {
                    "value": "self.init_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer.get_slot(sinks, name) for name in optimizer.get_slot_names()] + list(optimizer._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.x_clean_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.x_mask_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.x_init_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.lambda_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.alpha_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.eta_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "x_sticks_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sticks_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_86": {
                "variable": {
                    "value": "self.init_x_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_sticks_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_sticks_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_sticks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_89": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_90": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_sticks - self.x_clean_sticks) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "optimizer_sticks",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_sticks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_101": {
                "variable": {
                    "value": "self.init_optimizer_sticks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_sticks.get_slot(x_sticks_raw, name) for name in optimizer_sticks.get_slot_names()] + list(optimizer_sticks._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.x_clean_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.x_init_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "self.lambda_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self.alpha_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.eta_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "x_chamfer_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x_chamfer_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.x_pl.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_111": {
                "variable": {
                    "value": "self.init_x_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "x_chamfer_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('x_chamfer_raw', dtype=tf.float32, shape=self.x_pl.shape.as_list())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.x_init_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_114": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_115": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "loss_chamfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_123": {
                "variable": {
                    "value": "loss_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.x_chamfer - self.x_clean_chamfer) ** 2, axis=(1, 2), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_124": {
                "variable": {
                    "value": "optimizer_chamfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.eta_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_126": {
                "variable": {
                    "value": "self.init_optimizer_chamfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[optimizer_chamfer.get_slot(x_chamfer_raw, name) for name in optimizer_chamfer.get_slot_names()] + list(optimizer_chamfer._get_beta_accumulators())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_23": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.x_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ifft2d_40": {
                "input": {
                    "value": "self.x_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_46": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ],
                        [
                            "model.get_loss(logits, self.y_pl, end_points)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.x_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_60": {
                "x": {
                    "value": "-(dist / self.epsilon) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "(self.x_perturb - self.x_clean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_71": {
                "input_tensor": {
                    "value": "tf.where(diag > 0.0, tf.fill((1, sink, sink), float('inf')), sink_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_72": {
                "input_tensor": {
                    "value": "tf.linalg.norm(1e-06 + sinks - self.sink_source, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.norm(self.sink_source[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(1e-06 + self.x_sticks[:, :, tf.newaxis, :] - self.x_clean_sticks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(self.x_chamfer[:, :, tf.newaxis, :] - self.x_clean_chamfer[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dist, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "(self.x_sticks - self.x_clean_sticks) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "(self.x_chamfer - self.x_clean_chamfer) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_28": {
                "ys": {
                    "value": "logits[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_62": {
                "x": {
                    "value": "tf.reduce_sum(perturb, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_71": {
                "condition": {
                    "value": "diag > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill((1, sink, sink), float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sink_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.norm(1e-06 + sinks[:, :, tf.newaxis, :] - sinks[:, tf.newaxis, :, :], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_72": {
                "tensor": {
                    "value": "1e-06 + sinks - self.sink_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_113": {
                "x": {
                    "value": "x_chamfer_raw - self.x_clean_chamfer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "perturb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rbf * (sinks[:, :, tf.newaxis, :] - self.x_clean[:, tf.newaxis, :, :])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_71": {
                "dims": {
                    "value": "(1, sink, sink)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "x": {
                    "value": "x_sticks_raw - self.x_clean_sticks",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}