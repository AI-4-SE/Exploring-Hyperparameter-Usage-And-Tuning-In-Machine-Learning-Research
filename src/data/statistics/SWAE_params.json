{
    "utils/evaluation.py": {
        "sklearn": {
            "TSNE_186": {
                "variable": {
                    "value": "test_z_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_142": {
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_143": {
                "n_neighbors": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_144": {
                "n_neighbors": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_145": {
                "n_neighbors": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "bernoulli_56": {
                "variable": {
                    "value": "full_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.bernoulli(full_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_target.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "full_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "embed_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(recon_x, dim=0)",
                            "Call"
                        ],
                        [
                            "model.decoder(interp_z).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "recon_x.reshape((1, np.prod(args.input_size)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_72": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "data",
                            "Name"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "MethodArgument"
                        ],
                        [
                            "args.batch_size",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_99": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "data",
                            "Name"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "MethodArgument"
                        ],
                        [
                            "args.batch_size",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_267": {
                "tensors": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_target.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_target.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_271": {
                "*size": {
                    "value": "test_data[0:N * M].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_398": {
                "*size": {
                    "value": "test_data[0:N * M].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "[z1_q, z2_q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/fid_score.py": {
        "tensorflow": {
            "InteractiveSession_265": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_34": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_36": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_33": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_57": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_141": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_153": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(inception_layer, {'FID_Inception_Net/ExpandDims:0': batch})",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "experiment.py": {
        "torch": {
            "manual_seed_166": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/HVAE_2level.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.q_z2_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(np.prod(self.args.input_size), 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.q_z2_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.z2_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.q_z1_layers_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(np.prod(self.args.input_size), 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.q_z1_layers_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z2_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.q_z1_layers_joint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(2 * 300, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.q_z1_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.z1_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.p_z1_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z2_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.p_z1_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.z1_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.p_x_layers_z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z1_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.p_x_layers_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z2_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.p_x_layers_joint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(2 * 300, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-RE + beta * KL",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "variable": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_Bernoulli(x, x_mean, dim=1)",
                            "Call"
                        ],
                        [
                            "-log_Logistic_256(x, x_mean, x_logvar, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_118": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(log_p_z1 + log_p_z2 - log_q_z1 - log_q_z2)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_246": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_mean(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_mean, min=0.0 + 1.0 / 512.0, max=1.0 - 1.0 / 512.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0 + 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_271": {
                "variable": {
                    "value": "(a_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ],
                        [
                            "log_Normal_diag(z_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Hardtanh_36": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Hardtanh_50": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Hardtanh_59": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_273": {
                "input": {
                    "value": "torch.sum(torch.exp(a - a_max.unsqueeze(1)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_76": {
                "min_val": {
                    "value": "-4.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "torch.exp(a - a_max.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_273": {
                "input": {
                    "value": "a - a_max.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/MLP_wae.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(np.prod(self.input_size), 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(np.prod(self.input_size), 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.n_z, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "mi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_167": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, ind_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos(data, means)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_172": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means - data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Hardtanh_69": {
                "min_val": {
                    "value": "-9.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "-3.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/Model.py": {
        "torch": {
            "eye_37": {
                "variable": {
                    "value": "self.idle_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.args.number_components_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.args.number_components_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Hardtanh_26": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/VAE.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.q_z_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(np.prod(self.args.input_size), 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.q_z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.z1_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.p_x_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z1_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-RE + beta * KL",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_93": {
                "variable": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_Bernoulli(x, x_mean, dim=1)",
                            "Call"
                        ],
                        [
                            "-log_Logistic_256(x, x_mean, x_logvar, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(log_p_z - log_q_z)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_230": {
                "variable": {
                    "value": "(a_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ],
                        [
                            "log_Normal_diag(z_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Hardtanh_38": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_233": {
                "input": {
                    "value": "torch.sum(torch.exp(a - a_max.unsqueeze(1)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_233": {
                "input": {
                    "value": "torch.exp(a - a_max.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_54": {
                "min_val": {
                    "value": "-4.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_233": {
                "input": {
                    "value": "a - a_max.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/convHVAE_2level.py": {
        "torch": {
            "Sequential_40": {
                "variable": {
                    "value": "self.q_z2_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.args.input_size[0], 32, 7, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.q_z1_layers_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.args.input_size[0], 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.q_z1_layers_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z2_size, h_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.q_z1_layers_joint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(2 * h_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.p_z1_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z2_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.p_x_layers_z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z1_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.p_x_layers_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z2_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.p_x_layers_joint_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(2 * 300, np.prod(self.args.input_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.p_x_layers_joint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.args.input_size[0], 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_487": {
                "variable": {
                    "value": "(a_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ],
                        [
                            "log_Normal_diag(z_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ],
                        [
                            "log_Bernoulli(x_expand, means, dim=2) - math.log(C)",
                            "BinOp"
                        ],
                        [
                            "-log_Logistic_256(x_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_144": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-RE + beta * KL",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-0.5 * (log_p_x_given_z + log_p_z + beta * (log_q_z_given_x + log_q_x))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + beta * loss_p.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_145": {
                "variable": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_Bernoulli(x, x_mean, dim=1)",
                            "Call"
                        ],
                        [
                            "-log_Logistic_256(x, x_mean, x_logvar, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ],
                        [
                            "log_p_x_given_z",
                            "Name"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_146": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(log_p_z1 + log_p_z2 - log_q_z1 - log_q_z2)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ],
                        [
                            "-(log_p_z1 + log_p_z2 - log_q_z1 - log_q_z2)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "sample_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_x_batch(N)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sample_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_328": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_mean(h_decoder).view(-1, np.prod(self.args.input_size))",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_mean, min=0.0 + 1.0 / 512.0, max=1.0 - 1.0 / 512.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0 + 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_529": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-RE + beta * KL",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-0.5 * (log_p_x_given_z + log_p_z + beta * (log_q_z_given_x + log_q_x))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + beta * loss_p.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_530": {
                "variable": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_Bernoulli(x, x_mean, dim=1)",
                            "Call"
                        ],
                        [
                            "-log_Logistic_256(x, x_mean, x_logvar, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ],
                        [
                            "log_p_x_given_z",
                            "Name"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_531": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(log_p_z1 + log_p_z2 - log_q_z1 - log_q_z2)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ],
                        [
                            "-(log_p_z1 + log_p_z2 - log_q_z1 - log_q_z2)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_354": {
                "variable": {
                    "value": "(a_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ],
                        [
                            "log_Normal_diag(z_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ],
                        [
                            "log_Bernoulli(x_expand, means, dim=2) - math.log(C)",
                            "BinOp"
                        ],
                        [
                            "-log_Logistic_256(x_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Hardtanh_398": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_489": {
                "input": {
                    "value": "torch.sum(torch.exp(a - a_max.unsqueeze(1)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Hardtanh_50": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Hardtanh_71": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Hardtanh_79": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_489": {
                "input": {
                    "value": "torch.exp(a - a_max.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_356": {
                "input": {
                    "value": "torch.sum(torch.exp(a - a_max.unsqueeze(1)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_410": {
                "n": {
                    "value": "self.args.number_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.args.number_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_489": {
                "input": {
                    "value": "a - a_max.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_109": {
                "min_val": {
                    "value": "-4.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_356": {
                "input": {
                    "value": "torch.exp(a - a_max.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_356": {
                "input": {
                    "value": "a - a_max.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/conv_vae.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.q_z_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.args.input_size[0], 32, 7, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.args.z1_size, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.p_x_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.args.input_size[0], 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-RE + beta * KL",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_116": {
                "variable": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_Bernoulli(x, x_mean, dim=1)",
                            "Call"
                        ],
                        [
                            "-log_Logistic_256(x, x_mean, x_logvar, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(RE)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(log_p_z - log_q_z)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(KL)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_222": {
                "variable": {
                    "value": "sample_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_x_batch(N)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sample_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_263": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_mean(h).view(-1, np.prod(self.args.input_size))",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_mean, min=0.0 + 1.0 / 512.0, max=1.0 - 1.0 / 512.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0 + 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_288": {
                "variable": {
                    "value": "(a_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(a)",
                            "Call"
                        ],
                        [
                            "np.reshape(a, (a.shape[0] * a.shape[1], 1))",
                            "Call"
                        ],
                        [
                            "log_Normal_diag(z_expand, means, logvars, dim=2) - math.log(C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Hardtanh_54": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_291": {
                "input": {
                    "value": "torch.sum(torch.exp(a - a_max.unsqueeze(1)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_76": {
                "min_val": {
                    "value": "-4.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_291": {
                "input": {
                    "value": "torch.exp(a - a_max.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_291": {
                "input": {
                    "value": "a - a_max.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/conv_wae.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 32, 7, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 32, 7, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedDense(self.n_z, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "mi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_mean(x).view(-1, np.prod(self.input_size))",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_mean, min=0.0 + 1.0 / 512.0, max=1.0 - 1.0 / 512.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0 + 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1.0 / 512.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "sample_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(sample_z)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sample_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_251": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_253": {
                "variable": {
                    "value": "(_, ind_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos(data, means_data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_256": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means_data - data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Hardtanh_104": {
                "min_val": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/MINE.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.main_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(self.input_size[0], 32, 7, 1, 3, activation=nn.ELU())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/distributions.py": {
        "torch": {
            "clamp_26": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "min_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "max_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_43": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + bin_size / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "cdf_minus",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.floor(x / bin_size) * bin_size - mean) / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_14": {
                "input": {
                    "value": "log_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + torch.pow(x - mean, 2) / torch.exp(log_var))",
                            "BinOp"
                        ],
                        [
                            "-0.5 * torch.pow(x, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "log_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + torch.pow(x - mean, 2) / torch.exp(log_var))",
                            "BinOp"
                        ],
                        [
                            "-0.5 * torch.pow(x, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.floor(x / bin_size) * bin_size - mean) / scale",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_21": {
                "input": {
                    "value": "log_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + torch.pow(x - mean, 2) / torch.exp(log_var))",
                            "BinOp"
                        ],
                        [
                            "-0.5 * torch.pow(x, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_23": {
                "input": {
                    "value": "log_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + torch.pow(x - mean, 2) / torch.exp(log_var))",
                            "BinOp"
                        ],
                        [
                            "-0.5 * torch.pow(x, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_29": {
                "input": {
                    "value": "log_bernoulli",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_31": {
                "input": {
                    "value": "log_bernoulli",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "cdf_plus - cdf_minus + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "1.0 - probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_34": {
                "input": {
                    "value": "-(x - u) / s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_37": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_53": {
                "input": {
                    "value": "log_logist_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(cdf_plus - cdf_minus + 1e-07)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_55": {
                "input": {
                    "value": "log_logist_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(cdf_plus - cdf_minus + 1e-07)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_12": {
                "input": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_12": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_44": {
                "input": {
                    "value": "x / bin_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "utils/load_data.py": {
        "torch": {
            "TensorDataset_49": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_52": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_55": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_122": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_125": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_128": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(os.path.join('datasets', 'fashion-mnist'), train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(os.path.join('datasets', 'fashion-mnist'), train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_192": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_195": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_198": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_256": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_259": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_260": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_262": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_263": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_301": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_304": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_307": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_347": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_348": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_350": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_351": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_353": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_354": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_396": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_397": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_399": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_400": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_402": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_403": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_431": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('datasets/Cifar10/', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_434": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('datasets/Cifar10/', train=False, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_485": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_486": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_488": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_489": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_491": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_492": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_530": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder('datasets/celeba', transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_547": {
                "variable": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x_data, dim=0)",
                            "Call"
                        ],
                        [
                            "np.reshape(coil20_raw['fea'].astype('float32'), (-1, 32 * 32))",
                            "Call"
                        ],
                        [
                            "x_data[Index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "y_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_train_data + num_val_data + num_test_data",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorDataset_563": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_564": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_566": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_567": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_569": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_570": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_599": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('datasets/svhn/', split='train', download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_602": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('datasets/svhn/', split='test', download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_626": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_627": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_629": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_630": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_632": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_633": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_659": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.USPS(os.path.join('datasets', 'usps'), train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_665": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.USPS(os.path.join('datasets', 'usps'), train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_692": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_693": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_695": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_696": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_698": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_699": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_742": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_743": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_745": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_746": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_748": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_749": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_782": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_783": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_786": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_787": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_val, y_val)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_790": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_791": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(x_test, y_test)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_409": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_499": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_541": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "(data[0] + 0.5) / 256.0",
                            "BinOp"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(data, (-1, np.prod(args.input_size)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, np.prod(args.input_size))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_640": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_705": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_755": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init + args.pseudoinputs_std * np.random.randn(np.prod(args.input_size), args.number_components_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_799": {
                "variable": {
                    "value": "args.pseudoinputs_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train[0:args.number_components].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ],
                        [
                            "x_train[0:args.number_components_input].T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_192": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_195": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_259": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_262": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_307": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_347": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_350": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_353": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_396": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_399": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_402": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_485": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_488": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_491": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_626": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_629": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_632": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_692": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_695": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_698": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_742": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_745": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_748": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_782": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.train_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:50000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[:-n_validation]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:40000]",
                            "Subscript"
                        ],
                        [
                            "y_train[y_train_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[:num_train_data]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ],
                        [
                            "np.array(train_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[0:6000], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[0:TRAIN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_786": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(y_train[50000:60000], dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['targetchar'].reshape((-1, 1))[-n_validation:]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "y_train[40000:50000]",
                            "Subscript"
                        ],
                        [
                            "y_val[y_val_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data:num_train_data + num_val_data]",
                            "Subscript"
                        ],
                        [
                            "y_train[60000:]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train[6000:], dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN:TRAIN + VAL]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_790": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.test_labels.float().numpy(), dtype=int)",
                            "Call"
                        ],
                        [
                            "omni_raw['testtargetchar'].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y_test[I_test]",
                            "Subscript"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_test[y_test_index]",
                            "Subscript"
                        ],
                        [
                            "y_labels[num_train_data + num_val_data:]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_loader.dataset.labels, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.array(test_loader.dataset.targets, dtype=int)",
                            "Call"
                        ],
                        [
                            "y_labels[TRAIN + VAL:TRAIN + VAL + TEST]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_577": {
                "*size": {
                    "value": "np.prod(args.input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.number_components_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/nn.py": {
        "torch": {
            "Linear_45": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_60": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_79": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "number_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "number_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "number_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "number_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "number_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "number_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_168": {
                "variable": {
                    "value": "self.upsamplingNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_188": {
                "variable": {
                    "value": "self.upsamplingNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_190": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Upsample_210": {
                "variable": {
                    "value": "self.upsamplingNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_225": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_227": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_228": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_293": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "F.relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "F.relu(-x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_35": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimizer.py": {
        "torch": {
            "norm_53": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad / (torch.norm(grad, 2) + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "grad.add(group['weight_decay'], p.data)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_test.py": {
        "torch": {
            "save_93": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_m.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_m.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_247": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_m.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_m.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_124": {
                "f": {
                    "value": "load_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_' + str(test_checkpoint) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_m.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_75": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_b.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_b.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_227": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_b.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_b.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_237": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "checkpoints_dir + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/training.py": {
        "torch": {
            "bernoulli_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bernoulli_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}