{
    "config/Config.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "variable": {
                    "value": "self.init_ent_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "entity_embs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "self.init_rel_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rel_embs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_390": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, self.model.__name__ + '-' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.ckpt')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_394": {
                "obj": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.trainModel.state_dict()",
                            "Call"
                        ],
                        [
                            "self.trainModel.state_dict()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.trainModel.state_dict()",
                            "Call"
                        ],
                        [
                            "self.trainModel.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, self.model.__name__ + '-' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.ckpt')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__406": {
                "parameters": {
                    "value": "self.trainModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adagrad_338": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_decay": {
                    "value": "self.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_370": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, self.model.__name__ + '-' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.result_dir, self.model.__name__ + '.ckpt')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_345": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_351": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_357": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/Model.py": {
        "torch": {
            "mean_23": {
                "variable": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score[self.config.batch_size:self.config.batch_seq_size]",
                            "Subscript"
                        ],
                        [
                            "negative_score.view(-1, self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.mean(negative_score, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/QuatRE.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_13": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.ent_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.config.entTotal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "4 * self.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.rel_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.config.relTotal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "4 * self.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.Whr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.config.relTotal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "4 * self.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.Wtr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.config.relTotal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "4 * self.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_23": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_45": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion.reshape(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "quaternion / torch.sqrt(torch.sum(quaternion ** 2, 1, True))",
                            "BinOp"
                        ],
                        [
                            "quaternion.reshape(-1, 4 * size)",
                            "Call"
                        ],
                        [
                            "quaternion.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "quaternion.view(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "torch.sum(quaternion, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion.size(split_dim) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "j2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion.reshape(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "quaternion / torch.sqrt(torch.sum(quaternion ** 2, 1, True))",
                            "BinOp"
                        ],
                        [
                            "quaternion.reshape(-1, 4 * size)",
                            "Call"
                        ],
                        [
                            "quaternion.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "quaternion.view(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "torch.sum(quaternion, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_83": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion.reshape(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "quaternion / torch.sqrt(torch.sum(quaternion ** 2, 1, True))",
                            "BinOp"
                        ],
                        [
                            "quaternion.reshape(-1, 4 * size)",
                            "Call"
                        ],
                        [
                            "quaternion.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "quaternion.view(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "torch.sum(quaternion, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion.size(split_dim) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "[qp_r, qp_i, qp_j, qp_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "input": {
                    "value": "torch.sum(quaternion ** 2, 1, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "hrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hrr * t_r",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "i ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_87": {
                "input": {
                    "value": "self.criterion(score * self.batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "quaternion ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}