{
    "config.py": {
        "tensorflow": {
            "Session_11": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_58": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_82": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_106": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_131": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_149": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_165": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_190": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_215": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_240": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_266": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_291": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_315": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_339": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_364": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_389": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_417": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_445": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_473": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_501": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_529": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_557": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_585": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_615": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_643": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_670": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_697": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_725": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_753": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_780": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_807": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_838": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_870": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_903": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_936": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_970": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1003": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1037": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1069": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1101": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1134": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1166": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1198": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1230": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1262": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1294": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1326": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1358": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1389": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1422": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1452": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1482": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1514": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1547": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1579": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1613": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1645": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1676": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1710": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1742": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1775": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1809": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1841": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1873": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1906": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1939": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1970": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2003": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2037": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2071": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2105": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2139": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2172": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2203": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2235": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2267": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2299": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2331": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2363": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2395": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2427": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2459": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2491": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2525": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2559": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2593": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2627": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2660": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2691": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2723": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2755": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2787": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2819": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2851": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2883": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2915": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2947": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_2979": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_21": {
                "values": {
                    "value": "start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.constant([5, 4, 3, 2, 1], dtype=dtype) for _ in range(self.num_clones)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_20": {
                "value": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "embedders.py": {
        "tensorflow": {}
    },
    "examples.py": {
        "tensorflow": {}
    },
    "functions+test_plot.py": {
        "tensorflow": {
            "Session_185": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_29": {
                "variable": {
                    "value": "columns",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, 0, pi)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -2.048, 2.048)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_34": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "summation",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.while_loop(cond=condition, body=body, loop_vars=[index, summation])[1]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(result, axis=1)",
                            "Call"
                        ],
                        [
                            "10.0 * tf.to_float(tf.shape(x)[0]) + tf.reduce_sum(x ** 2 - 10 * tf.cos(2 * pi * x), axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.while_loop(condition, body, [index, summation])[1], axis=1)",
                            "Call"
                        ],
                        [
                            "0.5 * tf.reduce_sum(x ** 4 - 16 * x ** 2 + 5 * x, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x ** 2, axis=1)",
                            "Call"
                        ],
                        [
                            "418.9829 * tf.to_float(tf.shape(x)[0]) - tf.reduce_sum(tf.sin(tf.abs(x) ** 0.5) * x, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_76": {
                "variable": {
                    "value": "columns",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, 0, pi)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -2.048, 2.048)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_79": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "summation",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.while_loop(condition, body, [index, summation])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_134": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "variable": {
                    "value": "termw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ww ** 2 * (1 + 10 * tf.sin(pi * ww + 1) ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_44": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_45": {
                "variable": {
                    "value": "mult_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.gather(columns, index)",
                            "Call"
                        ],
                        [
                            "tf.gather(columns, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_46": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_47": {
                "variable": {
                    "value": "mult2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i * x_i ** 2 / pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_50": {
                "variable": {
                    "value": "summand",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * mult_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mult_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mult2 ** 20",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_89": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_90": {
                "variable": {
                    "value": "x_ip1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.add(index, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_94": {
                "variable": {
                    "value": "summand",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(100.0, first_term)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "second_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_i - 1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_184": {
                "input": {
                    "value": "zv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_MICHALEWICZ(np.stack([_xv, _yv], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_35": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_39": {
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.subtract(tf.shape(columns)[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_56": {
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[index, summation]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "x ** 2 - 10 * tf.cos(2 * pi * x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_84": {
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.subtract(tf.shape(columns)[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "x ** 4 - 16 * x ** 2 + 5 * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_140": {
                "x": {
                    "value": "-b * (d * tf.reduce_sum(x ** 2, axis=1)) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_141": {
                "x": {
                    "value": "d * tf.reduce_sum(tf.cos(c * x), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "tf.sin(tf.abs(x) ** 0.5) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_166": {
                "x": {
                    "value": "pi * w1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_39": {
                "x": {
                    "value": "tf.shape(columns)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_52": {
                "x": {
                    "value": "summation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "summand",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add(-1 * mult_1, mult_2)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(100.0, first_term), second_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_68": {
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_84": {
                "x": {
                    "value": "tf.shape(columns)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_90": {
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "x": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "first_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_ip1 - x_i ** 2) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_96": {
                "x": {
                    "value": "summation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "summand",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add(-1 * mult_1, mult_2)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(100.0, first_term), second_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_100": {
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[index, summation]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_152": {
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "tf.cos(c * x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_152": {
                "x": {
                    "value": "tf.abs(x) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_168": {
                "x": {
                    "value": "2 * pi * wd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_68": {
                "x": {
                    "value": "2 * pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_141": {
                "x": {
                    "value": "c * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_152": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_167": {
                "x": {
                    "value": "pi * ww + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "inputs.py": {
        "tensorflow": {
            "slice_input_producer_16": {
                "variable": {
                    "value": "tr_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[tf.convert_to_tensor(x_train, dtype=tf.float32), tf.convert_to_tensor(y_train, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_18": {
                "variable": {
                    "value": "(b_trX, b_trY)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tr_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([tf.convert_to_tensor(x_train, dtype=tf.float32), tf.convert_to_tensor(y_train, tf.int32)])",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "64 * b_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "32 * b_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_input_producer_20": {
                "variable": {
                    "value": "te_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[tf.convert_to_tensor(x_test, tf.float32), tf.convert_to_tensor(y_test, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_22": {
                "variable": {
                    "value": "(b_teX, b_teY)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([tf.convert_to_tensor(x_test, tf.float32), tf.convert_to_tensor(y_test, tf.int32)])",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "64 * b_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "32 * b_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_input_producer_107": {
                "variable": {
                    "value": "(x_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[X_train, Y_train]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_108": {
                "variable": {
                    "value": "(x_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_train, y_train]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "slice_input_producer_109": {
                "variable": {
                    "value": "(x_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[X_test, Y_test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_110": {
                "variable": {
                    "value": "(x_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_test, y_test]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_16": {
                "value": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_17": {
                "value": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_20": {
                "value": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_21": {
                "value": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {}
    },
    "networks.py": {
        "tensorflow": {
            "Variable_14": {
                "variable": {
                    "value": "dummy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_15": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_uniform()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_uniform()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_uniform()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_uniform()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_21": {
                "variable": {
                    "value": "dummy2",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rosennet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_116": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rosennet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rastrnet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "stybtangnet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "spherenet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_212": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ackleynet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_242": {
                "variable": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "schnet_guess",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "tr_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b_trX",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "a": {
                    "value": "tr_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b_trX, [b_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', shape=[784, shapes[0]], initializer=initializers[0], trainable=trainables[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "tr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=tr_logits, labels=b_trY)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_266": {
                "variable": {
                    "value": "tr_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(tf.nn.softmax(tr_logits), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_267": {
                "variable": {
                    "value": "tr_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(b_trY, 10, dtype=tf.float32) * tr_preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "te_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b_teX",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_269": {
                "a": {
                    "value": "te_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b_teX, [b_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', shape=[784, shapes[0]], initializer=initializers[0], trainable=trainables[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "te_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=te_logits, labels=b_teY)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_271": {
                "variable": {
                    "value": "te_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(tf.nn.softmax(te_logits), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "variable": {
                    "value": "te_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(b_teY, 10, dtype=tf.float32) * te_preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_39": {
                "variable": {
                    "value": "columns",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -2.048, 2.048)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, 0, pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_42": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "summation",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.while_loop(condition, body, [index, summation])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_85": {
                "variable": {
                    "value": "columns",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -2.048, 2.048)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, 0, pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_89": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "summation",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.while_loop(condition, body, [index, summation])[1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond=condition, body=body, loop_vars=[index, summation])[1]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(result, axis=1)",
                            "Call"
                        ],
                        [
                            "10.0 * tf.to_float(tf.shape(x)[0]) + tf.reduce_sum(x ** 2 - 10 * tf.cos(2 * pi * x), axis=1)",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum(x ** 4 - 16 * x ** 2 + 5 * x, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x ** 2, axis=1)",
                            "Call"
                        ],
                        [
                            "418.9829 * tf.to_float(tf.shape(x)[0]) - tf.reduce_sum(tf.sin(tf.abs(x) ** 0.5) * x)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_201": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_259": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[784, shapes[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainables[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_260": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shapes[0], shapes[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainables[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shapes[1], 10]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializers[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainables[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_274": {
                "name": {
                    "value": "w1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', shape=[784, shapes[0]], initializer=initializers[0], trainable=trainables[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_275": {
                "name": {
                    "value": "w2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w2', shape=[shapes[0], shapes[1]], initializer=initializers[1], trainable=trainables[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_276": {
                "name": {
                    "value": "w3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "w3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w3', shape=[shapes[1], 10], initializer=initializers[2], trainable=trainables[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_52": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_53": {
                "variable": {
                    "value": "x_ip1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.add(index, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_57": {
                "variable": {
                    "value": "summand",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(100.0, first_term)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "second_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_i - 1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_99": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_100": {
                "variable": {
                    "value": "mult_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.gather(columns, index)",
                            "Call"
                        ],
                        [
                            "tf.gather(columns, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_101": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_102": {
                "variable": {
                    "value": "mult2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i * x_i ** 2 / pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_105": {
                "variable": {
                    "value": "summand",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * mult_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mult_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mult2 ** 20",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "mnist_fcnet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_265": {
                "logits": {
                    "value": "tr_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(acts[1](tf.matmul(acts[0](tf.matmul(tr_input, w1)), w2)), w3)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "b_trY",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_266": {
                "input": {
                    "value": "tf.nn.softmax(tr_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_267": {
                "input_tensor": {
                    "value": "tf.one_hot(b_trY, 10, dtype=tf.float32) * tr_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_270": {
                "logits": {
                    "value": "te_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(acts[1](tf.matmul(acts[0](tf.matmul(te_input, w1)), w2)), w3)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "b_teY",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_271": {
                "input": {
                    "value": "tf.nn.softmax(te_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_272": {
                "input_tensor": {
                    "value": "tf.one_hot(b_teY, 10, dtype=tf.float32) * te_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "cost",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(z - 7) ** 2",
                            "BinOp"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ],
                        [
                            "eval(function)(guess)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_43": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_47": {
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.subtract(tf.shape(columns)[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_94": {
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.subtract(tf.shape(columns)[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_111": {
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[index, summation]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_135": {
                "input_tensor": {
                    "value": "x ** 2 - 10 * tf.cos(2 * pi * x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "input_tensor": {
                    "value": "x ** 4 - 16 * x ** 2 + 5 * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_207": {
                "x": {
                    "value": "-b * (d * tf.reduce_sum(x ** 2, axis=1)) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_208": {
                "x": {
                    "value": "d * tf.reduce_sum(tf.cos(c * x), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_239": {
                "input_tensor": {
                    "value": "tf.sin(tf.abs(x) ** 0.5) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_266": {
                "logits": {
                    "value": "tr_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(acts[1](tf.matmul(acts[0](tf.matmul(tr_input, w1)), w2)), w3)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_271": {
                "logits": {
                    "value": "te_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(acts[1](tf.matmul(acts[0](tf.matmul(te_input, w1)), w2)), w3)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_47": {
                "x": {
                    "value": "tf.shape(columns)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_53": {
                "x": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ],
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "x": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "first_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_ip1 - x_i ** 2) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_59": {
                "x": {
                    "value": "summation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "summand",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(100.0, first_term), second_term)",
                            "Call"
                        ],
                        [
                            "tf.add(-1 * mult_1, mult_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_63": {
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[index, summation]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_94": {
                "x": {
                    "value": "tf.shape(columns)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_107": {
                "x": {
                    "value": "summation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "summand",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(100.0, first_term), second_term)",
                            "Call"
                        ],
                        [
                            "tf.add(-1 * mult_1, mult_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_135": {
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_201": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_239": {
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_267": {
                "indices": {
                    "value": "b_trY",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_272": {
                "indices": {
                    "value": "b_teY",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "tf.cos(c * x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_239": {
                "x": {
                    "value": "tf.abs(x) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_94": {
                "input": {
                    "value": "columns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ],
                        [
                            "tf.unstack(data_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_135": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_135": {
                "x": {
                    "value": "2 * pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_208": {
                "x": {
                    "value": "c * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_239": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_207": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_239": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -5.12, 5.12)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -5, 5)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -32.768, 32.768)",
                            "Call"
                        ],
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "old_stuff/main.py": {
        "tensorflow": {
            "Session_17": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_18": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_21": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "yhat_predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "yhat_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l2_act, 3) * W3, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_28": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(yhat_predicted, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y__, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_32": {
                "variable": {
                    "value": "train_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "yhat_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l2_act, 3) * W3, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y__",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_",
                            "Name"
                        ],
                        [
                            "tf.concat([y__, y_], axis=1)",
                            "Call"
                        ],
                        [
                            "y_",
                            "Name"
                        ],
                        [
                            "tf.concat([y__, y_], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(l0, 3) * W1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "l1_act",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "l1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l0, 3) * W1, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(l1_act, 3) * W2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "l2_act",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "l2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l1_act, 3) * W2, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_43": {
                "variable": {
                    "value": "yhat_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(l2_act, 3) * W3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "yhat_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l2_act, 3) * W3, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_53": {
                "variable": {
                    "value": "correct_test_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(yhat, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y__, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "test_acc_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_test_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "lr_current",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_119": {
                "variable": {
                    "value": "(train_cost, train_cost_hist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "_try_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[n_iterations, batch_size, fun_shape, em_shape, db_path, lr, optimizer, scheduler, net3, tl, counter]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_123": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "y__",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y__, y_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "y__",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y__, y_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "start_queue_runners_60": {
                "sess": {
                    "value": "sess",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ],
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_28": {
                "input": {
                    "value": "y__",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_",
                            "Name"
                        ],
                        [
                            "tf.concat([y__, y_], axis=1)",
                            "Call"
                        ],
                        [
                            "y_",
                            "Name"
                        ],
                        [
                            "tf.concat([y__, y_], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_29": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(yhat_predicted, 2), tf.argmax(y__, 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_53": {
                "input": {
                    "value": "y__",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_",
                            "Name"
                        ],
                        [
                            "tf.concat([y__, y_], axis=1)",
                            "Call"
                        ],
                        [
                            "y_",
                            "Name"
                        ],
                        [
                            "tf.concat([y__, y_], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "correct_test_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(yhat, 2), tf.argmax(y__, 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "l0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_test, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "l1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(l1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "input": {
                    "value": "l2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(l2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "old_stuff/networks.py": {
        "tensorflow": {
            "range_5": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_7": {
                "variable": {
                    "value": "embed_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "perc_embed",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sizes[0], sizes[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_10": {
                "variable": {
                    "value": "top_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('perc_embed', shape=[sizes[0], sizes[1]], initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, sizes[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(a_)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(scaling_const * top_layer, a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(b_)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.multiply(scaling_const * top_layer, a))",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', dtype=tf.float32, initializer=tf.constant(b_), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fun_shape[0], fun_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(l0, 3) * W1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "l1_act",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "l1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l0, 3) * W1, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('perceptron_embedding')(em_shape, sess=sess, coord=coord)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W2, [1, em_shape[0], fun_shape[1], fun_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, em_shape[0], fun_shape[1], fun_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(l1_act, 3) * W2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "l2_act",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "l2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(l1_act, 3) * W2, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "W3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fun_shape[2], fun_shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "l3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(l2_act, 3) * W3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[sizes[i], sizes[i + 1]]",
                            "List"
                        ],
                        [
                            "[fun_shape[2], fun_shape[3]]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "variable": {
                    "value": "top_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "top_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=embed_params, ids=input)",
                            "Call"
                        ],
                        [
                            "tf.matmul(top_layer, w)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(top_layer)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_w', shape=shape, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_23": {
                "variable": {
                    "value": "top_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "top_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=embed_params, ids=input)",
                            "Call"
                        ],
                        [
                            "tf.matmul(top_layer, w)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(top_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_27": {
                "x": {
                    "value": "tf.abs(tf.reduce_max(top_layer))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(tf.reduce_min(top_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_32": {
                "x": {
                    "value": "scaling_const * top_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('a', dtype=tf.float32, initializer=tf.constant(a_), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_27": {
                "x": {
                    "value": "tf.reduce_min(top_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "a_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1.0]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_34": {
                "value": {
                    "value": "b_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.01]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "l0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_73": {
                "input": {
                    "value": "l1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(l1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "l2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(l2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_27": {
                "input_tensor": {
                    "value": "top_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=embed_params, ids=input)",
                            "Call"
                        ],
                        [
                            "tf.matmul(top_layer, w)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(top_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_27": {
                "input_tensor": {
                    "value": "top_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=embed_params, ids=input)",
                            "Call"
                        ],
                        [
                            "tf.matmul(top_layer, w)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(top_layer)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plot.py": {
        "tensorflow": {}
    },
    "pranam.py": {
        "tensorflow": {
            "Variable_40": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_41": {
                "variable": {
                    "value": "incr_global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(1, name='global_step', trainable=False, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_85": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "remainder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mod(incr_global_step, batch_size) < 1",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "_merge_apply_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_merge_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "cost_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(costs, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_35": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.convert_to_tensor(g) for g in grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mod_42": {
                "x1": {
                    "value": "incr_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(global_step, global_step + 1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_51": {
                "variable": {
                    "value": "step_done",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_83": {
                "variable": {
                    "value": "step_done",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_101": {
                "values": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_138": {
                "values": {
                    "value": "[tf.reduce_mean(v) for v in embedding_vars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_151": {
                "values": {
                    "value": "list(m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_50": {
                "control_inputs": {
                    "value": "adgrad_ops",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_64": {
                "control_inputs": {
                    "value": "adgrad_ops",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "[apply_grad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_80": {
                "ref": {
                    "value": "trainable_vars[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "assign_vals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_82": {
                "control_inputs": {
                    "value": "assign_zero + assignval_op",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "'clone_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "initial_value": {
                    "value": "tf.zeros_like(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_35": {
                "value": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gradients",
                            "Attribute"
                        ],
                        [
                            "tf.add_n([tf.convert_to_tensor(g) for g in grad])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_49": {
                "ref": {
                    "value": "grad_accum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "grad_accum[i] + gradients[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_61": {
                "ref": {
                    "value": "grad_accum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "grad_accum[i] + gradients[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_78": {
                "ref": {
                    "value": "grad_accum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros_like(grad_accum[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "input": {
                    "value": "grad_accum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "runner2l.py": {
        "tensorflow": {}
    },
    "temp.py": {
        "tensorflow": {
            "Session_92": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.sin(tf.abs(x) ** 0.5) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_69": {
                "x": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_69": {
                "x": {
                    "value": "tf.abs(x) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_69": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_rescale(x, xmin, xmax, -500, 500)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "temp2.py": {
        "tensorflow": {}
    },
    "temp3.py": {
        "tensorflow": {}
    },
    "utils.py": {
        "tensorflow": {}
    }
}