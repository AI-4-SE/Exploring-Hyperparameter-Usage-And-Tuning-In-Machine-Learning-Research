{
    "app.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "load_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_60": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "tools/training/generate.py": {
        "torch": {
            "load_80": {
                "variable": {
                    "value": "load_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(dalle_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/training/train_dalle.py": {
        "torch": {
            "DataLoader_297": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextImageDataset(args.image_text_folder, text_len=dalle_params['text_seq_len'], image_size=IMAGE_SIZE, resize_ratio=args.resize_ratio, truncate_captions=args.truncate_captions, tokenizer=tokenizer, shuffle=is_shuffle)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not distributed_utils.using_backend(distributed_utils.HorovodBackend)",
                            "UnaryOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(ds, num_replicas=distr_backend.get_world_size(), rank=distr_backend.get_rank())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "Adam_311": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "get_trainable_params(dalle)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_170": {
                "variable": {
                    "value": "loaded_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(dalle_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedSampler_289": {
                "variable": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextImageDataset(args.image_text_folder, text_len=dalle_params['text_seq_len'], image_size=IMAGE_SIZE, resize_ratio=args.resize_ratio, truncate_captions=args.truncate_captions, tokenizer=tokenizer, shuffle=is_shuffle)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "distr_backend.get_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "distr_backend.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_314": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(get_trainable_params(dalle), lr=LEARNING_RATE)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_194": {
                "variable": {
                    "value": "loaded_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(vae_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_400": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'hparams': dalle_params, 'vae_params': vae_params}",
                            "Dict"
                        ],
                        [
                            "{**save_obj, 'weights': 'To get a working standard checkpoint, look into consolidating DeepSpeed checkpoints.'}",
                            "Dict"
                        ],
                        [
                            "{**save_obj, 'weights': dalle.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_389": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'hparams': dalle_params, 'vae_params': vae_params}",
                            "Dict"
                        ],
                        [
                            "{**save_obj, 'weights': 'To get a working standard checkpoint, look into consolidating DeepSpeed checkpoints.'}",
                            "Dict"
                        ],
                        [
                            "{**save_obj, 'weights': dalle.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "str(cp_dir / DEEPSPEED_CP_AUX_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__420": {
                "parameters": {
                    "value": "distr_dalle.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "GRAD_CLIP_NORM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.clip_grad_norm",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tools/training/train_vae.py": {
        "torch": {
            "DataLoader_167": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(IMAGE_PATH, T.Compose([T.Lambda(lambda img: img.convert('RGB') if img.mode != 'RGB' else img), T.Resize(IMAGE_SIZE), T.CenterCrop(IMAGE_SIZE), T.ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "not data_sampler",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(ds, num_replicas=distr_backend.get_world_size(), rank=distr_backend.get_rank())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ExponentialLR_193": {
                "variable": {
                    "value": "sched",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(vae.parameters(), lr=LEARNING_RATE)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "LR_DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr_decay_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedSampler_161": {
                "variable": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(IMAGE_PATH, T.Compose([T.Lambda(lambda img: img.convert('RGB') if img.mode != 'RGB' else img), T.Resize(IMAGE_SIZE), T.CenterCrop(IMAGE_SIZE), T.ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "distr_backend.get_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "distr_backend.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'hparams': vae_params}",
                            "Dict"
                        ],
                        [
                            "{**save_obj, 'weights': vae.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}