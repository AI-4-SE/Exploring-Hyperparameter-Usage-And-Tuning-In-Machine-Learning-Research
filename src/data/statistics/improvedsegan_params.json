{
    "bnorm.py": {
        "tensorflow": {
            "get_variable_48": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.epsilon + mean_sq - tf.square(mean)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "self.mean_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "variable": {
                    "value": "new_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "new_mean_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_23": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_38": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_49": {
                "mean": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_52": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_coeff * new_mean + old_coeff * self.mean",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "data_loader.py": {
        "tensorflow": {
            "TFRecordReader_8": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_10": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'wav_raw': tf.FixedLenFeature([], tf.string), 'noisy_raw': tf.FixedLenFeature([], tf.string), 'baseline_raw': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_17": {
                "variable": {
                    "value": "wave",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['wav_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_20": {
                "variable": {
                    "value": "noisy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['noisy_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_23": {
                "variable": {
                    "value": "baseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['baseline_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "wave - 32767",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_22": {
                "x": {
                    "value": "noisy - 32767",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_25": {
                "x": {
                    "value": "baseline - 32767",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_13": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_14": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_15": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "discriminator.py": {
        "tensorflow": {
            "expand_dims_17": {
                "variable": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wave_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_69": {
                "variable": {
                    "value": "hi_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "hi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "wave_in",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(wave_in, -1)",
                            "Call"
                        ],
                        [
                            "gaussian_noise_layer(hi, self.disc_noise_std)",
                            "Call"
                        ],
                        [
                            "disc_block(block_idx, hi, 31, self.d_num_fmaps[block_idx], True, 'leakyrelu')",
                            "Call"
                        ],
                        [
                            "leakyrelu(hi_a)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hi_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "d_logit_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_logit_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv1d(hi, kwidth=1, num_kernels=1, init=tf.truncated_normal_initializer(stddev=0.02), name='logits_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(d_logit_out)",
                            "Call"
                        ],
                        [
                            "fully_connected(d_logit_out, 1, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "d_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_34": {
                "variable": {
                    "value": "downconv_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "'d_block_{}'.format(block_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_72": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hi_a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "downconv(input_, nfmaps, kwidth=kwidth, pool=pooling, init=downconv_init)",
                            "Call"
                        ],
                        [
                            "self.vbn(hi_a, 'd_vbn_{}'.format(block_idx))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generator.py": {
        "tensorflow": {
            "concat_53": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h_i, z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "skip_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "skips",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "skips_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "skip_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(skips, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_92": {
                "variable": {
                    "value": "wave",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wave_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv1d(skips_sum, kwidth=1, num_kernels=1, init=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_241": {
                "variable": {
                    "value": "wave",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wave",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(wave_a)",
                            "Call"
                        ],
                        [
                            "h_i",
                            "Name"
                        ],
                        [
                            "tf.add(wave, noisy_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noisy_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h_i",
                            "Name"
                        ]
                    ]
                }
            },
            "get_variable_scope_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "noisy_w",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(noisy_w, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat(2, [h_i, z])",
                            "Call"
                        ],
                        [
                            "res_i",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(h_i, segan.keep_prob_var)",
                            "Call"
                        ],
                        [
                            "noisy_w",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(noisy_w, -1)",
                            "Call"
                        ],
                        [
                            "h_i_dwn",
                            "Name"
                        ],
                        [
                            "tf.concat(2, [z, h_i])",
                            "Call"
                        ],
                        [
                            "prelu(h_i, ref=is_ref, name='enc_prelu_{}'.format(layer_idx))",
                            "Call"
                        ],
                        [
                            "leakyrelu(h_i)",
                            "Call"
                        ],
                        [
                            "h_i_dcv",
                            "Name"
                        ],
                        [
                            "h_i[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tanh(h_i)",
                            "Call"
                        ],
                        [
                            "prelu(h_i, ref=is_ref, name='dec_prelu_{}'.format(layer_idx))",
                            "Call"
                        ],
                        [
                            "leakyrelu(h_i)",
                            "Call"
                        ],
                        [
                            "h_i[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(2, [h_i, skip_])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "segan.keep_prob_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "g_wave_pooling",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "g_ae",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[z, h_i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_23": {
                "variable": {
                    "value": "z_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "z_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=mean, stddev=std)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=mean, stddev=std)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_114": {
                "variable": {
                    "value": "z_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "z_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=mean, stddev=std)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=mean, stddev=std)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h_i, skip_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_228": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "noisy_w",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(noisy_w, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat(2, [h_i, z])",
                            "Call"
                        ],
                        [
                            "res_i",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(h_i, segan.keep_prob_var)",
                            "Call"
                        ],
                        [
                            "noisy_w",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(noisy_w, -1)",
                            "Call"
                        ],
                        [
                            "h_i_dwn",
                            "Name"
                        ],
                        [
                            "tf.concat(2, [z, h_i])",
                            "Call"
                        ],
                        [
                            "prelu(h_i, ref=is_ref, name='enc_prelu_{}'.format(layer_idx))",
                            "Call"
                        ],
                        [
                            "leakyrelu(h_i)",
                            "Call"
                        ],
                        [
                            "h_i_dcv",
                            "Name"
                        ],
                        [
                            "h_i[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tanh(h_i)",
                            "Call"
                        ],
                        [
                            "prelu(h_i, ref=is_ref, name='dec_prelu_{}'.format(layer_idx))",
                            "Call"
                        ],
                        [
                            "leakyrelu(h_i)",
                            "Call"
                        ],
                        [
                            "h_i[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(2, [h_i, skip_])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'g_residual_block_{}'.format(block_idx)",
                            "Call"
                        ],
                        [
                            "'z'",
                            "MethodArgument"
                        ],
                        [
                            "'z'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_91": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'g_residual_block_{}'.format(block_idx)",
                            "Call"
                        ],
                        [
                            "'z'",
                            "MethodArgument"
                        ],
                        [
                            "'z'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_155": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_197": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "ConfigProto_64": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_75": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "make_tfrecords.py": {
        "tensorflow": {
            "Feature_18": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_21": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_105": {
                "variable": {
                    "value": "out_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "out_filepath",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "os.path.join(opts.save_path, opts.out_file)",
                            "Call"
                        ],
                        [
                            "out_filepath + '.tfrecords'",
                            "BinOp"
                        ],
                        [
                            "out_filename + ext",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Example_65": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'wav_raw': _bytes_feature(wav_raw), 'noisy_raw': _bytes_feature(noisy_raw)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_74": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'wav_raw': _bytes_feature(wav_raw), 'noisy_raw': _bytes_feature(noisy_raw), 'baseline_raw': _bytes_feature(baseline_raw)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_18": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_21": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_65": {
                "feature": {
                    "value": "{'wav_raw': _bytes_feature(wav_raw), 'noisy_raw': _bytes_feature(noisy_raw)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_74": {
                "feature": {
                    "value": "{'wav_raw': _bytes_feature(wav_raw), 'noisy_raw': _bytes_feature(noisy_raw), 'baseline_raw': _bytes_feature(baseline_raw)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "Variable_80": {
                "variable": {
                    "value": "self.gen_comp_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.gen_comp_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "self.disc_noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "self.l1_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.l1_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_114": {
                "variable": {
                    "value": "d_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_115": {
                "variable": {
                    "value": "g_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.g_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_batch_148": {
                "variable": {
                    "value": "(wavbatch, noisybatch, baselinebatch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_wav, self.get_noisy, self.get_baseline]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 3 * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "wav_and_noisy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_168": {
                "variable": {
                    "value": "wavbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wavbatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(wavbatch, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wavbatch, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "variable": {
                    "value": "noisybatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisybatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(noisybatch, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(noisybatch, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_170": {
                "variable": {
                    "value": "baselinebatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "baselinebatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(baselinebatch, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "D_rl_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[wavbatch, noisybatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "D_fk_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[G, noisybatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_233": {
                "variable": {
                    "value": "d_rl_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(d_rl_logits, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "variable": {
                    "value": "d_fk_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(d_fk_logits, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "variable": {
                    "value": "g_adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(d_fk_logits, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_273": {
                "variable": {
                    "value": "t_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_343": {
                "variable": {
                    "value": "self.g_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g_summs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.d_fk_sum, self.d_fk_loss_sum, self.g_loss_sum, self.g_loss_l1_sum, self.g_loss_adv_sum, self.gen_summ, self.gen_audio_summ]",
                            "List"
                        ],
                        [
                            "g_summs + self.alpha_summ",
                            "BinOp"
                        ]
                    ]
                }
            },
            "merge_344": {
                "variable": {
                    "value": "self.d_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.d_loss_sum, self.d_rl_sum, self.d_rl_loss_sum, self.rl_audio_summ, self.real_w_summ, self.disc_noise_std_summ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_354": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(config.save_path, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_358": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_359": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_605": {
                "variable": {
                    "value": "g_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.g_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_batch_628": {
                "variable": {
                    "value": "(wavbatch, noisybatch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_wav, self.get_noisy]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 3 * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "wav_and_noisy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_645": {
                "variable": {
                    "value": "wavbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wavbatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(wavbatch, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wavbatch, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_646": {
                "variable": {
                    "value": "noisybatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisybatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(noisybatch, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(noisybatch, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_670": {
                "variable": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(tf.sub(G, wavbatch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_680": {
                "variable": {
                    "value": "t_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_702": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_703": {
                "variable": {
                    "value": "self.g_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.g_loss_sum, self.gen_summ, self.rl_audio_summ, self.real_w_summ, self.gen_audio_summ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_712": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(config.save_path, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_716": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_717": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_37": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_path",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.save_path",
                            "Attribute"
                        ],
                        [
                            "config.save_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.keep_prob_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "self.keep_prob_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_input_producer_142": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[self.e2e_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "dummy_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[wavbatch, noisybatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_324": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tf_record_iterator_379": {
                "path": {
                    "value": "self.e2e_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_587": {
                "variable": {
                    "value": "self.keep_prob_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_590": {
                "variable": {
                    "value": "self.keep_prob_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_input_producer_623": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[self.e2e_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_695": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tf_record_iterator_732": {
                "path": {
                    "value": "self.e2e_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_233": {
                "x": {
                    "value": "d_rl_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(self, D_rl_joint, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_234": {
                "x": {
                    "value": "d_fk_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(self, D_fk_joint, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_236": {
                "x": {
                    "value": "d_fk_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(self, D_fk_joint, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_variables_327": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_670": {
                "x": {
                    "value": "tf.sub(G, wavbatch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_698": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_122": {
                "device_name": {
                    "value": "'/%s' % device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_242": {
                "input_tensor": {
                    "value": "tf.abs(tf.sub(G, wavbatch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_245": {
                "input_tensor": {
                    "value": "tf.abs(tf.sub(G, baselinebatch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_608": {
                "device_name": {
                    "value": "'/%s' % device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "'device_%s' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_242": {
                "x": {
                    "value": "tf.sub(G, wavbatch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_245": {
                "x": {
                    "value": "tf.sub(G, baselinebatch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_292": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_609": {
                "name": {
                    "value": "'device_%s' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_425": {
                "ref": {
                    "value": "self.gen_comp_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_431": {
                "ref": {
                    "value": "self.gen_comp_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_453": {
                "ref": {
                    "value": "self.gen_comp_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_458": {
                "ref": {
                    "value": "self.gen_comp_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_515": {
                "ref": {
                    "value": "self.l1_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_532": {
                "ref": {
                    "value": "self.disc_noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_noise_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decay * self.curr_noise_std",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "expand_dims_65": {
                "variable": {
                    "value": "x2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_230": {
                "variable": {
                    "value": "x2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_30": {
                "variable": {
                    "value": "summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_37": {
                "variable": {
                    "value": "summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_summary_44": {
                "variable": {
                    "value": "summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "audio_51": {
                "variable": {
                    "value": "summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "sample_rate": {
                    "value": "sampling_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16000.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kwidth, 1, x.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('W', [kwidth, 1, x.get_shape()[-1], output_dim], initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [kwidth, in_channels, num_kernels], initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [kwidth, 1, out_channels, in_channels], initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, pool, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x2d, W, strides=[1, pool, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, b), conv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, conv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, conv.get_shape().as_list()[:2] + [conv.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride=1, padding=padding)",
                            "Call"
                        ],
                        [
                            "conv + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(transformed, filter_, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "conv.get_shape().as_list()[:2] + [conv.get_shape().as_list()[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "transform_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.rnn_cell._linear(input_, size, 0, scope=transform_scope) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "in_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kwidth, in_channels, num_kernels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_135": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('W', [kwidth, 1, x.get_shape()[-1], output_dim], initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [kwidth, in_channels, num_kernels], initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [kwidth, 1, out_channels, in_channels], initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [kwidth / 2 * dilation, kwidth / 2 * dilation], [0, 0]]",
                            "List"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_144": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_146": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, pad_elements], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(value, [[0, 0], [0, pad_elements], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(value, padding, mode='SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dilation, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "variable": {
                    "value": "transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(padded, [-1, dilation, shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_154": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "prepared",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dilation, -1, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prepared",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(value, [dilation, -1, shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_166": {
                "variable": {
                    "value": "weights_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "filter_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kwidth, in_channels, num_kernels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weights_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_173": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [kwidth / 2 * dilation, kwidth / 2 * dilation], [0, 0]]",
                            "List"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_181": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "restored",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_to_time(conv, dilation)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(padded, filter_, stride=1, padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, input_shape[1], num_kernels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_197": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "atrous_conv1d(input_, dilation, kwidth, num_kernels, bias_init=bias_init, stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_202": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "atrous_conv1d(input_, dilation, kwidth, num_kernels, name='conv_gate', bias_init=bias_init, stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_237": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kwidth, 1, out_channels, in_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "xavier_initializer(uniform=uniform)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "deconv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(x2d, W, output_shape=o2d, strides=[1, dilation, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(x2d, W, output_shape=o2d, strides=[1, dilation, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, b), deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_263": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_305": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_306": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_summary_46": {
                "variable": {
                    "value": "summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x2d, W, strides=[1, pool, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, b), conv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, conv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, conv.get_shape().as_list()[:2] + [conv.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride=1, padding=padding)",
                            "Call"
                        ],
                        [
                            "conv + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(transformed, filter_, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_kernels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "time_to_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "tensor": {
                    "value": "transposed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(reshaped, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(prepared, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0] * dilation, -1, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "batch_to_time",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "tensor": {
                    "value": "transposed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(reshaped, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(prepared, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.div(shape[0], dilation), -1, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv1d_176": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "time_to_batch(padded, dilation)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [kwidth, in_channels, num_kernels], initializer=weights_init)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_179": {
                "variable": {
                    "value": "restored",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(value, [[0, 0], [0, pad_elements], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(value, padding, mode='SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [kwidth, in_channels, num_kernels], initializer=weights_init)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_kernels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_187": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(restored, [0, 0, 0], [-1, input_shape[1], num_kernels])",
                            "Call"
                        ],
                        [
                            "tf.add(result, b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_dim], initializer=bias_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [num_kernels], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [num_kernels], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [out_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_241": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('W', [kwidth, 1, x.get_shape()[-1], output_dim], initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [kwidth, in_channels, num_kernels], initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [kwidth, 1, out_channels, in_channels], initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "o2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_shape[:2] + [1] + [output_shape[-1]]",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, dilation, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_249": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "deconv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(x2d, W, output_shape=o2d, strides=[1, dilation, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(x2d, W, output_shape=o2d, strides=[1, dilation, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, b), deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_260": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'downconv'",
                            "MethodArgument"
                        ],
                        [
                            "'hw'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'prelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'atrous_conv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual_block'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv1d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_299": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_274": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_76": {
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x2d, W, strides=[1, pool, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, b), conv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, conv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, conv.get_shape().as_list()[:2] + [conv.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride=1, padding=padding)",
                            "Call"
                        ],
                        [
                            "conv + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(transformed, filter_, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_dim], initializer=bias_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [num_kernels], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [num_kernels], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [out_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_112": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_158": {
                "x": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_209": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_251": {
                "value": {
                    "value": "deconv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(x2d, W, output_shape=o2d, strides=[1, dilation, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(x2d, W, output_shape=o2d, strides=[1, dilation, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, b), deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_dim], initializer=bias_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [num_kernels], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [num_kernels], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [out_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_262": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_115": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_initializer_138": {
                "value": {
                    "value": "bias_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_186": {
                "value": {
                    "value": "bias_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_216": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_250": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}