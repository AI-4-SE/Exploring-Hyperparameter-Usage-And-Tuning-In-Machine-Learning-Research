{
    "__main__.py": {
        "torch": {
            "DataLoader_59": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeBERTDataset(vocab, args.train_dataset, path_num=args.path_num, node_num=args.node_num, code_len=args.code_len, is_fine_tune=False, corpus_lines=args.corpus_lines)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeBERTDataset(vocab, args.valid_dataset, path_num=args.path_num, node_num=args.node_num, code_len=args.code_len, is_fine_tune=False, corpus_lines=args.corpus_lines) if args.valid_dataset is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/dataset.py": {
        "torch": {
            "tensor_100": {
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/utils.py": {
        "torch": {
            "unsqueeze_197": {
                "variable": {
                    "value": "trg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/transformer.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.W_level",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.W_parent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_num * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_43": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "src.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_68": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(hid_dim, n_heads, pf_dim, dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([hid_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_94": {
                "variable": {
                    "value": "self.self_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_95": {
                "variable": {
                    "value": "self.ff_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, K.permute(0, 1, 3, 2)) / torch.sqrt(torch.FloatTensor([self.head_dim])).to(Q.device)",
                            "BinOp"
                        ],
                        [
                            "energy.masked_fill(mask == 0, -10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(attention)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_v(value)",
                            "Call"
                        ],
                        [
                            "V.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pf_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pf_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_189": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_190": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ],
                        [
                            "210",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(hid_dim, n_heads, pf_dim, dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_204": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ],
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_204": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_221": {
                "variable": {
                    "value": "self.self_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_222": {
                "variable": {
                    "value": "self.enc_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_223": {
                "variable": {
                    "value": "self.ff_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_229": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tril_270": {
                "variable": {
                    "value": "trg_sub_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((trg_len, trg_len), device=trg_pad_mask.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "input": {
                    "value": "src + E_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(src.shape[0], src.shape[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_q(query)",
                            "Call"
                        ],
                        [
                            "Q.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "input": {
                    "value": "torch.FloatTensor([self.head_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "input": {
                    "value": "self.fc_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_206": {
                "input": {
                    "value": "torch.FloatTensor([self.hid_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_270": {
                "*size": {
                    "value": "(trg_len, trg_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "trg_pad_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/treebert.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_27": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/pretrain.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if cuda_condition else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_39": {
                "variable": {
                    "value": "self.criterionNOP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_40": {
                "variable": {
                    "value": "self.criterionTMLM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "cuda_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_path + '.ep%d' % epoch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}