{
    "examples/loading_and_using_model.py": {
        "tensorflow": {
            "Session_11": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neural_gpu_trainer.py": {
        "tensorflow": {
            "run_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neuralgpu/data_utils.py": {
        "tensorflow": {}
    },
    "neuralgpu/model.py": {
        "tensorflow": {
            "clip_by_value_33": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "vlo",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "vhi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_37": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "glo",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "ghi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_124": {
                "variable": {
                    "value": "dsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "relaxed_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_127": {
                "variable": {
                    "value": "davg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d * d for d in diff]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CvK",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kw, kh, nin, nout]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CvB",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nout]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cur * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, length, self.config.height)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'input{0}'.format(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'target{0}'.format(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.do_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "do_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "self.task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_171": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mytf.expand_dims_by_k(bmask, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_204": {
                "variable": {
                    "value": "output_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mask, [1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_index",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_225": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda cur, it, *args: it < num_layers",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "self.looping_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[cur, it] + ([tf.zeros_like(cur)] if FLAGS.output_layer == 1 else [])",
                            "BinOp"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "use_swap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bool(self.config.nmaps > 256 or (FLAGS.do_batchnorm and self.config.nmaps == 128))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_246": {
                "variable": {
                    "value": "first",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.emb_weights, self.input)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_270": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "noclass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.noclass",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_mean_272": {
                "variable": {
                    "value": "perp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent * tf.reshape(mask, [-1, self.length])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_331": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_332": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(config.lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_334": {
                "variable": {
                    "value": "self.pull",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(config.pull)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_347": {
                "variable": {
                    "value": "self.emb_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.niclass, vec_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.7, 1.7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_350": {
                "variable": {
                    "value": "self.e0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.emb_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.constant(0, dtype=tf.int32, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.zeros([1, vec_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_354": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_38": {
                "input": {
                    "value": "zz - a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "len(mytf.shape_list(arg[0])) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arg[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(len(mytf.shape_list(arg[0])) - 1, arg)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "prefix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "davg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n([d * d for d in diff])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_143": {
                "inputs": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mytf.conv2d(arg, k, strides, 'SAME')",
                            "Call"
                        ],
                        [
                            "sess.run(feed_out, feed_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_143": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "one_hot_212": {
                "variable": {
                    "value": "task",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int32(mytf.expand_dims_by_k(self.task, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.ntasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_243": {
                "variable": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_283": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_284": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "perp_loss + relax_dist * self.model.pull",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_285": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(total_loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_342": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'RX%d' % l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_any_169": {
                "input_tensor": {
                    "value": "self.input > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_linear(extras + [cur], kw, kh, nmaps, 'cgru_%d_%s' % (i, suffix))",
                            "Call"
                        ],
                        [
                            "old + cur",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(cur * mask)",
                            "Call"
                        ],
                        [
                            "conv_gru(cur, kw, kh, nmaps, cutoff, 'cgru_%d_%s' % (layer, suffix), extras=extras)",
                            "Call"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(cur, keep_prob)",
                            "Call"
                        ],
                        [
                            "gru_block(cur, self.config.kw, self.config.kh, self.config.nmaps, self.config.cutoff, self.mask, 'lookup', self.config.nconvs, extras=self.extras)",
                            "Call"
                        ],
                        [
                            "mytf.batch_norm(cur, self.do_training, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.select(tf.greater_equal(self.output_layers, index + it), cur, old)",
                            "Call"
                        ],
                        [
                            "mytf.batch_norm(cur, self.do_training, self.mask, scope='bn')",
                            "Call"
                        ],
                        [
                            "first",
                            "Name"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - tf.to_float(self.do_training) * (self.config.dropout * 8.0 / self.length)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_204": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(mytf.expand_dims_by_k(bmask, 2))",
                            "Call"
                        ],
                        [
                            "self.construct_mask()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_242": {
                "control_inputs": {
                    "value": "[self.e0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_351": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_352": {
                "shape": {
                    "value": "[1, vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_75": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_177": {
                "x": {
                    "value": "self.do_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "'RX%d' % it",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "select_195": {
                "variable": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": []
                },
                "condlist": {
                    "value": "tf.greater_equal(self.output_layers, index + it)",
                    "type": "Call",
                    "possible_values": []
                },
                "choicelist": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_linear(extras + [cur], kw, kh, nmaps, 'cgru_%d_%s' % (i, suffix))",
                            "Call"
                        ],
                        [
                            "old + cur",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(cur * mask)",
                            "Call"
                        ],
                        [
                            "conv_gru(cur, kw, kh, nmaps, cutoff, 'cgru_%d_%s' % (layer, suffix), extras=extras)",
                            "Call"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(cur, keep_prob)",
                            "Call"
                        ],
                        [
                            "gru_block(cur, self.config.kw, self.config.kh, self.config.nmaps, self.config.cutoff, self.mask, 'lookup', self.config.nconvs, extras=self.extras)",
                            "Call"
                        ],
                        [
                            "mytf.batch_norm(cur, self.do_training, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.select(tf.greater_equal(self.output_layers, index + it), cur, old)",
                            "Call"
                        ],
                        [
                            "mytf.batch_norm(cur, self.do_training, self.mask, scope='bn')",
                            "Call"
                        ],
                        [
                            "first",
                            "Name"
                        ]
                    ]
                },
                "default": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cur",
                            "Name"
                        ],
                        [
                            "cur",
                            "Name"
                        ]
                    ]
                }
            },
            "to_int32_212": {
                "x": {
                    "value": "mytf.expand_dims_by_k(self.task, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_220": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(mytf.expand_dims_by_k(bmask, 2))",
                            "Call"
                        ],
                        [
                            "self.construct_mask()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_variables_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_349": {
                "minval": {
                    "value": "-1.7",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "name": {
                    "value": "var_name_suffix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_224": {
                "input": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_linear(extras + [cur], kw, kh, nmaps, 'cgru_%d_%s' % (i, suffix))",
                            "Call"
                        ],
                        [
                            "old + cur",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(cur * mask)",
                            "Call"
                        ],
                        [
                            "conv_gru(cur, kw, kh, nmaps, cutoff, 'cgru_%d_%s' % (layer, suffix), extras=extras)",
                            "Call"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(cur, keep_prob)",
                            "Call"
                        ],
                        [
                            "gru_block(cur, self.config.kw, self.config.kh, self.config.nmaps, self.config.cutoff, self.mask, 'lookup', self.config.nconvs, extras=self.extras)",
                            "Call"
                        ],
                        [
                            "mytf.batch_norm(cur, self.do_training, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.select(tf.greater_equal(self.output_layers, index + it), cur, old)",
                            "Call"
                        ],
                        [
                            "mytf.batch_norm(cur, self.do_training, self.mask, scope='bn')",
                            "Call"
                        ],
                        [
                            "first",
                            "Name"
                        ]
                    ]
                }
            },
            "greater_equal_195": {
                "x": {
                    "value": "self.output_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "index + it",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "neuralgpu/mytf.py": {
        "tensorflow": {
            "reduce_sum_82": {
                "variable": {
                    "value": "num_entries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.ones_like(x) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(out_size))",
                            "Call"
                        ],
                        [
                            "range(len(x_shape) - 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(tf.reshape(indices, [-1, indices_shape[-1] * indices_shape[-2]]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "indices_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(indices)",
                            "Call"
                        ],
                        [
                            "shape_list(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_152": {
                "variable": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.softmax(tf.reshape(indices, [-1, indices_shape[-1] * indices_shape[-2]])), indices_shape)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ],
                        [
                            "softmax(indices)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros_like(softmax_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_153": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ],
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros_like(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_165": {
                "variable": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.softmax(tf.reshape(indices, [-1, indices_shape[-1] * indices_shape[-2]])), indices_shape)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ],
                        [
                            "softmax(indices)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros_like(softmax_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_166": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ],
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros_like(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_27": {
                "input": {
                    "value": "origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sess.run(d, {})",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_31": {
                "values": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.expand_dims(t, ax) for t in tensor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "tensor": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[:i] + (shape[i + 1:] if i + 1 else [])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list(array) + [1] * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "output_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f(*inputs_reshaped + args[nargs:], **kws)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_prefix + new_suffix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_106": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "moving_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "moving_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_128": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x, axes) / num_entries",
                            "BinOp"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squared_difference(x, mean) * mask, axes) / num_entries",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', params_shape, initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', params_shape, initializer=tf.ones_initializer)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "BN_EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "real_168": {
                "input": {
                    "value": "tf.batch_ifft(fft_of_answer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(out_size))",
                            "Call"
                        ],
                        [
                            "range(len(x_shape) - 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.squared_difference(x, mean) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(out_size))",
                            "Call"
                        ],
                        [
                            "range(len(x_shape) - 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_113": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(out_size))",
                            "Call"
                        ],
                        [
                            "range(len(x_shape) - 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "model/RX1/bn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_139": {
                "variable": {
                    "value": "d[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "var_list",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nmaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "logits": {
                    "value": "tf.reshape(indices, [-1, indices_shape[-1] * indices_shape[-2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.softmax(tf.reshape(indices, [-1, indices_shape[-1] * indices_shape[-2]])), indices_shape)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ],
                        [
                            "softmax(indices)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_153": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ],
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_154": {
                "x": {
                    "value": "tf.batch_fft2d(softmax_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "input_tensor": {
                    "value": "tf.real(tf.batch_ifft(fft_of_answer))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "real_158": {
                "input": {
                    "value": "tf.batch_ifft2d(fft_of_answer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_165": {
                "input": {
                    "value": "softmax_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.softmax(tf.reshape(indices, [-1, indices_shape[-1] * indices_shape[-2]])), indices_shape)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ],
                        [
                            "softmax(indices)",
                            "Call"
                        ],
                        [
                            "tf.complex(softmax_indices, tf.zeros_like(softmax_indices))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_166": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ],
                        [
                            "tf.complex(values, tf.zeros_like(values))",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_167": {
                "x": {
                    "value": "tf.batch_fft(softmax_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_150": {
                "tensor": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, indices_shape[-1] * indices_shape[-2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "real_156": {
                "input": {
                    "value": "tf.batch_ifft(fft_of_answer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + used_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_84": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x, axes) / num_entries",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_121": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[moving_averages.assign_moving_average(moving_mean, batch_mean, BN_DECAY), moving_averages.assign_moving_average(moving_var, batch_var, BN_DECAY)]",
                            "List"
                        ]
                    ]
                }
            },
            "identity_122": {
                "input": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "neuralgpu/trainer.py": {
        "tensorflow": {
            "get_checkpoint_state_155": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_222": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DEFINE_float_44": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_45": {
                "name": {
                    "value": "init_weight",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial weights deviation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_46": {
                "name": {
                    "value": "max_grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "cutoff",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Cutoff at the gates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_48": {
                "name": {
                    "value": "cutoff_tanh",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Cutoff at tanh.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "pull",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting pull of the relaxations.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_50": {
                "name": {
                    "value": "pull_incr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Increase pull by that much.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "curriculum_bound",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Move curriculum < this.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_52": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout that much.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "max_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Quit after this many steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "low_batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Low batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "steps_per_epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Steps per epoch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "nmaps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of floats in each cell.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "niclass",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes (0 is padding).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "noclass",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes (0 is padding).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "max_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "rx_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Relax that many recursive steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "125459",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Random seed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "time_till_ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many tests per checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "time_till_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps between evals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "nconvs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many convolutions / 1 step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "kw",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Kernel width.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "kh",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Kernel height.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "forward_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "401",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum forward length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "nprint",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many test examples to print out.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Mode: 0-train other-decode.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_72": {
                "name": {
                    "value": "animate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to produce an animation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "smooth_grad",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to avoid clipping gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "smooth_grad_tanh",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to avoid clipping tanh gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_75": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "badd",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Which task are we learning?",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_76": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/neural",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to store models.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_78": {
                "name": {
                    "value": "layer_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of layers to use",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_83": {
                "name": {
                    "value": "do_batchnorm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to use batch normalization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_85": {
                "name": {
                    "value": "do_resnet",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to use resnets.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_87": {
                "name": {
                    "value": "print_one",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Print one example each evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_91": {
                "name": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Which layer to output.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_99": {
                "name": {
                    "value": "progressive_curriculum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to use progressive curriculum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_100": {
                "name": {
                    "value": "taskid",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Feed task id to algorithm in each layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_102": {
                "name": {
                    "value": "always_large",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Perform the large test even when the model is inaccurate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_121": {
                "filename": {
                    "value": "command_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'commandline')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_167": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.random_seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_scope_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_156": {
                "filename": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_174": {
                "dirname": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MkDir_180": {
                "dirname": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "get_checkpoint_dir()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_unit_scaling_initializer_215": {
                "factor": {
                    "value": "1.8 * FLAGS.init_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_224": {
                "filename": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MkDir_177": {
                "dirname": {
                    "value": "os.path.dirname(checkpoint_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "plots/carries.py": {
        "tensorflow": {}
    },
    "plots/large_carries.py": {
        "tensorflow": {
            "Session_54": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}