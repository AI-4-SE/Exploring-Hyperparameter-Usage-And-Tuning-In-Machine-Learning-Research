{
    "COMA.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + state_dim * agent_num + agent_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.observations",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(observations)",
                            "Call"
                        ],
                        [
                            "self.memory.get()",
                            "Call"
                        ],
                        [
                            "torch.cat(observations).view(batch_size, self.state_dim * self.agent_num)",
                            "Call"
                        ],
                        [
                            "observations",
                            "Method Argument"
                        ],
                        [
                            "observations",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_172": {
                "variable": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.observations",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(observations)",
                            "Call"
                        ],
                        [
                            "self.memory.get()",
                            "Call"
                        ],
                        [
                            "torch.cat(observations).view(batch_size, self.state_dim * self.agent_num)",
                            "Call"
                        ],
                        [
                            "observations",
                            "Method Argument"
                        ],
                        [
                            "observations",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "input_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[observations.type(torch.float32), actions.type(torch.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "input_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, input_critic]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_100": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actors[i](observations[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_124": {
                "variable": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[i] * Q_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_125": {
                "variable": {
                    "value": "Q_taken_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target(input_critic).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "action_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions.type(torch.long)[:, i].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "actions.type(torch.long)[:, i].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "Q_taken_target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_128": {
                "variable": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.gather(pi[i], dim=1, index=action_taken).squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_142": {
                "variable": {
                    "value": "Q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(input_critic)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "action_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions.type(torch.long)[:, i].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "actions.type(torch.long)[:, i].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "Q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(reward[:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_152": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(r - Q_taken) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "params": {
                    "value": "self.actors[i].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__134": {
                "parameters": {
                    "value": "self.actors[i].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__156": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "self.pi[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_128": {
                "input": {
                    "value": "pi[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "action_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions.type(torch.long)[:, i].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "actions.type(torch.long)[:, i].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "advantage * log_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(observations)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}