{
    "dataloader.py": {
        "tensorflow": {
            "py_func_61": {
                "func": {
                    "value": "_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[path]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_69": {
                "func": {
                    "value": "_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, illum, cc24]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_95": {
                "func": {
                    "value": "_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, illum, cc24]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "tensorflow": {
            "set_verbosity_18": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_20": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "illums",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/alexnet.py": {
        "tensorflow": {
            "reshape_131": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID', name='pool5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_height, filter_width, input_channels / groups, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_122": {
                "variable": {
                    "value": "input_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_123": {
                "variable": {
                    "value": "weight_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels / groups, num_filters])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[num_in, num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_128": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "output_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, weight_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_in, num_out]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_146": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_out]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "xw_plus_b_149": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels / groups, num_filters])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[num_in, num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', shape=[num_filters])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_162": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "local_response_normalization_169": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_176": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bias_add_131": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convolve(x, weights)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', shape=[num_filters])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_131": {
                "input": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convolve(x, weights)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/fc4.py": {
        "tensorflow": {
            "clip_by_value_5": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(image, 0.0, 65535.0)",
                            "Call"
                        ],
                        [
                            "image / 65535.0",
                            "BinOp"
                        ],
                        [
                            "image * 255",
                            "BinOp"
                        ],
                        [
                            "image[..., ::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "65535.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "variable": {
                    "value": "illums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "illum_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(fc1, 3, [1, 1], scope='fc2', activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "AlexNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "branch",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "FCN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/mlp.py": {
        "tensorflow": {
            "reduce_mean_8": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 512, tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 512, tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 512, tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/squeezenet.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "self.imgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[104.0, 117.0, 123.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "img_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_96": {
                "variable": {
                    "value": "avg_pool_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net['pool10']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "net[pool_reshaped]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net['pool10']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[avg_pool_shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_214": {
                "variable": {
                    "value": "fire[concat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.add(fire['e1'], self.bias_variable([e1x1], name=layer_name + '_fire_bias_e1', value=self.model[layer_name + '/' + 'expand1x1_bias'])), tf.add(fire['e3'], self.bias_variable([e3x3], name=layer_name + '_fire_bias_e3', value=self.model[layer_name + '/' + 'expand3x3_bias']))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "self.weights[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "self.weights[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(value=value)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_150": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input + b",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 14, 14, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_169": {
                "input": {
                    "value": "layer_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input + b",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(value=init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_156": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input + b",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_215": {
                "x": {
                    "value": "fire['e1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.bias_variable([e1x1], name=layer_name + '_fire_bias_e1', value=self.model[layer_name + '/' + 'expand1x1_bias'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_220": {
                "x": {
                    "value": "fire['e3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.bias_variable([e3x3], name=layer_name + '_fire_bias_e3', value=self.model[layer_name + '/' + 'expand3x3_bias'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_229": {
                "x": {
                    "value": "fire['concat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "layer_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_input + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_109": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_133": {
                "value": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'xavier'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "add_n_81": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "slim.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "pretrain_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_100": {
                "variable": {
                    "value": "jointtrain_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_104": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_110": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "set_verbosity_23": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_25": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "illums",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 24, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "cc24s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "contrastive_losses * contrastive_loss_masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "FCN/AlexNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/loss.py": {
        "tensorflow": {
            "l2_normalize_16": {
                "variable": {
                    "value": "normalized_tensor1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_17": {
                "variable": {
                    "value": "normalized_tensor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normalized_tensor1 * normalized_tensor2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_19": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(normalized_tensor1 * normalized_tensor2, -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dot_prod, -safe_dot_prod, safe_dot_prod)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-safe_dot_prod",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "safe_dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.999999",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_44": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_scores] + n_scores_list",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones((TRAINING_BATCH_SIZE, 1)), tf.zeros((TRAINING_BATCH_SIZE, num_negatives))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_48": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "onehot_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones((TRAINING_BATCH_SIZE, 1)), tf.zeros((TRAINING_BATCH_SIZE, num_negatives))], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([p_scores] + n_scores_list, axis=1)",
                            "Call"
                        ],
                        [
                            "scores / TEMPERATURE",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_38": {
                "value": {
                    "value": "n_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_negatives",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "acos_21": {
                "x": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(normalized_tensor1 * normalized_tensor2, -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dot_prod, -safe_dot_prod, safe_dot_prod)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_31": {
                "input": {
                    "value": "a_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=onehot_labels, logits=scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_24": {
                "input_tensor": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.acos(dot_prod) * (180 / math.pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_46": {
                "shape": {
                    "value": "(TRAINING_BATCH_SIZE, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "shape": {
                    "value": "(TRAINING_BATCH_SIZE, num_negatives)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(normalized_tensor1 * normalized_tensor2, -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dot_prod, -safe_dot_prod, safe_dot_prod)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util/perturb.py": {
        "tensorflow": {
            "cond_22": {
                "variable": {
                    "value": "(intensity_gained_image, intensity_gain)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(rand_prob, do_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_do",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (image, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_36": {
                "variable": {
                    "value": "noisy_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(rand_prob, do_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_do",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_50": {
                "variable": {
                    "value": "noisy_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(rand_prob, do_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_do",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "less_22": {
                "x": {
                    "value": "rand_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "do_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_36": {
                "x": {
                    "value": "rand_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "do_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_50": {
                "x": {
                    "value": "rand_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "do_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "x": {
                    "value": "normalized_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image / 65535.0",
                            "BinOp"
                        ],
                        [
                            "image / 65535.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_44": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "util/raw2raw.py": {
        "tensorflow": {
            "less_27": {
                "variable": {
                    "value": "cc24s_A_underexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_A * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_A / norm_cc24s_A[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "underexposure_thr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_29": {
                "variable": {
                    "value": "cc24s_A_underexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_A_underexposure_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(cc24s_A, underexposure_thr)",
                            "Call"
                        ],
                        [
                            "cc24s_A_underexposure_mask[..., 0] & cc24s_A_underexposure_mask[..., 1] & cc24s_A_underexposure_mask[..., 2]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s_A_underexposure_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_31": {
                "variable": {
                    "value": "cc24s_A_overexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_A * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_A / norm_cc24s_A[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "overexposure_thr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4095.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_33": {
                "variable": {
                    "value": "cc24s_A_overexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_A_overexposure_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(cc24s_A, overexposure_thr)",
                            "Call"
                        ],
                        [
                            "cc24s_A_overexposure_mask[..., 0] & cc24s_A_overexposure_mask[..., 1] & cc24s_A_overexposure_mask[..., 2]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s_A_overexposure_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_35": {
                "variable": {
                    "value": "cc24s_B_underexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_B * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_B / norm_cc24s_B[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cc24s_A[shift_id:], cc24s_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "underexposure_thr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_37": {
                "variable": {
                    "value": "cc24s_B_underexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_B_underexposure_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(cc24s_B, underexposure_thr)",
                            "Call"
                        ],
                        [
                            "cc24s_B_underexposure_mask[..., 0] & cc24s_B_underexposure_mask[..., 1] & cc24s_B_underexposure_mask[..., 2]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s_B_underexposure_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_39": {
                "variable": {
                    "value": "cc24s_B_overexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_B * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_B / norm_cc24s_B[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cc24s_A[shift_id:], cc24s_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "overexposure_thr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4095.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_41": {
                "variable": {
                    "value": "cc24s_B_overexposure_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s_B_overexposure_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(cc24s_B, overexposure_thr)",
                            "Call"
                        ],
                        [
                            "cc24s_B_overexposure_mask[..., 0] & cc24s_B_overexposure_mask[..., 1] & cc24s_B_overexposure_mask[..., 2]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s_B_overexposure_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "valid_pixel_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cc24s_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - cc24s_A_underexposure_mask) * (1 - cc24s_A_overexposure_mask) * (1 - cc24s_B_underexposure_mask) * (1 - cc24s_B_overexposure_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "images_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "illums_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "illums",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "cc24s_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cc24s",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "tf.reduce_sum(cc24s, axis=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "images_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_A[shift_id:], images_A[0:shift_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "illums_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[illums_A[shift_id:], illums_A[0:shift_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "cc24s_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cc24s_A[shift_id:], cc24s_A[0:shift_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_71": {
                "variable": {
                    "value": "masks_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[masks_A[shift_id:], masks_A[0:shift_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lstsq_87": {
                "variable": {
                    "value": "M_AB",
                    "type": "Variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "cc24s_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_A * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_A / norm_cc24s_A[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "cc24s_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_B * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_B / norm_cc24s_B[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cc24s_A[shift_id:], cc24s_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "fast": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lstsq_88": {
                "variable": {
                    "value": "M_BA",
                    "type": "Variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "cc24s_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_B * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_B / norm_cc24s_B[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cc24s_A[shift_id:], cc24s_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "cc24s_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_A * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_A / norm_cc24s_A[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "fast": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_90": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "M_AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "M_AC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - w[:, None, None]) * I + w[:, None, None] * M_AB",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(M_AC, M_diag_C)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "M_diag_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_diag((illums_C + EPS) / (illums_C_pred + EPS))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "norms_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_126": {
                "variable": {
                    "value": "images_BA",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "images_BA",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(images_B, (b, -1, 3))[..., ::-1], M_BA), (b, tf.shape(images)[1], tf.shape(images)[2], 3))[..., ::-1]",
                            "Subscript"
                        ],
                        [
                            "images_BA / tf.reduce_mean(images_BA, axis=[1, 2, 3], keep_dims=True) * norms_A",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(images_BA, 0.0, 65535.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "65535.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_127": {
                "variable": {
                    "value": "images_AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "images_AC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(images_A, (b, -1, 3))[..., ::-1], M_AC), (b, tf.shape(images)[1], tf.shape(images)[2], 3))[..., ::-1]",
                            "Subscript"
                        ],
                        [
                            "images_AC / tf.reduce_mean(images_AC, axis=[1, 2, 3], keep_dims=True) * norms_A",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(images_AC, 0.0, 65535.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "65535.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "variable": {
                    "value": "images_BC",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "images_BC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(images_B, (b, -1, 3))[..., ::-1], M_BC), (b, tf.shape(images)[1], tf.shape(images)[2], 3))[..., ::-1]",
                            "Subscript"
                        ],
                        [
                            "images_BC / tf.reduce_mean(images_BC, axis=[1, 2, 3], keep_dims=True) * norms_A",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(images_BC, 0.0, 65535.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "65535.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "easy_n_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "easy_n_images_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[r2r['images']['BC']]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_187": {
                "variable": {
                    "value": "hard_n_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hard_n_images_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[r2r['images']['AC']]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_76": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "a": {
                    "value": "illums_A[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "M_AC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - w[:, None, None]) * I + w[:, None, None] * M_AB",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(M_AC, M_diag_C)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "images_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([images_A[shift_id:], images_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, -1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "images_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, -1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "images_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([images_A[shift_id:], images_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, -1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "cc24s_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_A * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_A / norm_cc24s_A[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cc24s, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "cc24s_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cc24s_B * cc24s_mask[..., None]",
                            "BinOp"
                        ],
                        [
                            "cc24s_B / norm_cc24s_B[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cc24s_A[shift_id:], cc24s_A[0:shift_id]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "input_tensor": {
                    "value": "cc24s",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cond_80": {
                "pred": {
                    "value": "tf.greater_equal(tf.random_uniform(()), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.random_uniform((b,), -5.0, -0.3)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.random_uniform((b,), 0.3, 5.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ones_84": {
                "shape": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_100": {
                "tensor": {
                    "value": "illums_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - w[:, None]) * illums_A + w[:, None] * illums_B",
                            "BinOp"
                        ],
                        [
                            "(illums_C + EPS) / (tf.norm(illums_C, axis=-1, keepdims=True) + EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_105": {
                "tensor": {
                    "value": "illums_C_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(illums_A[:, None, :], M_AC)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "(illums_C_pred + EPS) / (tf.norm(illums_C_pred, axis=-1, keepdims=True) + EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "a": {
                    "value": "tf.reshape(images_B, (b, -1, 3))[..., ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "M_BA",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.lstsq(cc24s_B, cc24s_A, fast=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "a": {
                    "value": "tf.reshape(images_A, (b, -1, 3))[..., ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "M_AC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - w[:, None, None]) * I + w[:, None, None] * M_AB",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(M_AC, M_diag_C)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "a": {
                    "value": "tf.reshape(images_B, (b, -1, 3))[..., ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "M_BC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - w[:, None, None]) * I + w[:, None, None] * M_BA",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "input_tensor": {
                    "value": "images_BA",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(images_B, (b, -1, 3))[..., ::-1], M_BA), (b, tf.shape(images)[1], tf.shape(images)[2], 3))[..., ::-1]",
                            "Subscript"
                        ],
                        [
                            "images_BA / tf.reduce_mean(images_BA, axis=[1, 2, 3], keep_dims=True) * norms_A",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(images_BA, 0.0, 65535.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "images_AC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(images_A, (b, -1, 3))[..., ::-1], M_AC), (b, tf.shape(images)[1], tf.shape(images)[2], 3))[..., ::-1]",
                            "Subscript"
                        ],
                        [
                            "images_AC / tf.reduce_mean(images_AC, axis=[1, 2, 3], keep_dims=True) * norms_A",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(images_AC, 0.0, 65535.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "images_BC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(images_B, (b, -1, 3))[..., ::-1], M_BC), (b, tf.shape(images)[1], tf.shape(images)[2], 3))[..., ::-1]",
                            "Subscript"
                        ],
                        [
                            "images_BC / tf.reduce_mean(images_BC, axis=[1, 2, 3], keep_dims=True) * norms_A",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(images_BC, 0.0, 65535.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "greater_equal_80": {
                "x": {
                    "value": "tf.random_uniform(())",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_115": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_116": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_117": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}