{
    "preproc.py": {
        "sklearn": {
            "LatentDirichletAllocation_92": {
                "variable": {
                    "value": "lda",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "possible_values": []
                }
            }
        }
    },
    "preproc_flickr_clean.py": {
        "sklearn": {
            "LatentDirichletAllocation_69": {
                "variable": {
                    "value": "lda",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_19": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "M_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "possible_values": [
                        [
                            "pdist(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "M_drop",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "possible_values": [
                        [
                            "pdist(x, y)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "10.0 / (nx * ny)",
                    "possible_values": []
                }
            },
            "max_75": {
                "variable": {
                    "value": "delta",
                    "possible_values": []
                },
                "input": {
                    "value": "M_drop",
                    "possible_values": [
                        [
                            "F.dropout(M, 10.0 / (nx * ny))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_81": {
                "variable": {
                    "value": "col",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[delta * torch.ones(M[:, 0:1].shape), torch.zeros((1, 1))]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "Mt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M, row]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "Mt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Mt, col]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p * torch.ones((nx, 1)) / nx, (1 - p) * torch.ones((1, 1))]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(1 - p) * torch.ones((ny, 1)) / ny, p * torch.ones((1, 1))]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "norms_1",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_1 ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_142": {
                "variable": {
                    "value": "norms_2",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_2 ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "inner",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "possible_values": [
                        [
                            "torch.abs(expanded_1 - expanded_2) ** norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "M[0:1, :].shape",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "-Mlam",
                    "possible_values": []
                }
            },
            "t_109": {
                "input": {
                    "value": "u",
                    "possible_values": [
                        [
                            "a",
                            "Name"
                        ],
                        [
                            "1.0 / ainvK.matmul(b / torch.t(torch.t(u).matmul(K)))",
                            "BinOp"
                        ],
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_116": {
                "input": {
                    "value": "E",
                    "possible_values": [
                        [
                            "upper_t * Mt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_146": {
                "input": {
                    "value": "eps + torch.abs(distances_squared)",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "input": {
                    "value": "K",
                    "possible_values": [
                        [
                            "torch.exp(-Mlam) + temp_term",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_151": {
                "input": {
                    "value": "expanded_1 - expanded_2",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "M[:, 0:1].shape",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "(nx, 1)",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "(ny, 1)",
                    "possible_values": []
                }
            },
            "abs_146": {
                "input": {
                    "value": "distances_squared",
                    "possible_values": [
                        [
                            "norms - 2 * sample_1.mm(sample_2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_106": {
                "input": {
                    "value": "u",
                    "possible_values": [
                        [
                            "a",
                            "Name"
                        ],
                        [
                            "1.0 / ainvK.matmul(b / torch.t(torch.t(u).matmul(K)))",
                            "BinOp"
                        ],
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_113": {
                "input": {
                    "value": "v",
                    "possible_values": [
                        [
                            "b / torch.t(torch.t(u).matmul(K))",
                            "BinOp"
                        ],
                        [
                            "v.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "input": {
                    "value": "K",
                    "possible_values": [
                        [
                            "torch.exp(-Mlam) + temp_term",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "MSELoss_55": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_56": {
                "variable": {
                    "value": "bce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "where_118": {
                "variable": {
                    "value": "YF",
                    "possible_values": []
                },
                "condition": {
                    "value": "T > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "Y1",
                    "possible_values": [
                        [
                            "Tensor(np.squeeze(Y1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y0",
                    "possible_values": [
                        [
                            "Tensor(np.squeeze(Y0))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_164": {
                "variable": {
                    "value": "YF",
                    "possible_values": []
                },
                "condition": {
                    "value": "T > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "Y1",
                    "possible_values": [
                        [
                            "Tensor(np.squeeze(Y1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y0",
                    "possible_values": [
                        [
                            "Tensor(np.squeeze(Y0))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_165": {
                "variable": {
                    "value": "YCF",
                    "possible_values": []
                },
                "condition": {
                    "value": "T > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "Y0",
                    "possible_values": [
                        [
                            "Tensor(np.squeeze(Y0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y1",
                    "possible_values": [
                        [
                            "Tensor(np.squeeze(Y1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_176": {
                "variable": {
                    "value": "pehe_ts",
                    "possible_values": []
                },
                "input": {
                    "value": "loss((y1_pred - y0_pred)[idx_test], (Y1 - Y0)[idx_test])",
                    "possible_values": []
                }
            },
            "abs_177": {
                "variable": {
                    "value": "mae_ate_ts",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((y1_pred - y0_pred)[idx_test]) - torch.mean((Y1 - Y0)[idx_test])",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "mean_167": {
                "input": {
                    "value": "YF[idx_train]",
                    "possible_values": []
                }
            },
            "std_167": {
                "input": {
                    "value": "YF[idx_train]",
                    "possible_values": []
                }
            },
            "where_170": {
                "condition": {
                    "value": "T > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "ycf_pred",
                    "possible_values": []
                },
                "y": {
                    "value": "yf_pred",
                    "possible_values": []
                }
            },
            "mean_123": {
                "input": {
                    "value": "YF[idx_train]",
                    "possible_values": []
                }
            },
            "std_123": {
                "input": {
                    "value": "YF[idx_train]",
                    "possible_values": []
                }
            },
            "where_139": {
                "condition": {
                    "value": "T > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "ycf_pred",
                    "possible_values": []
                },
                "y": {
                    "value": "yf_pred",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "(Y1 - Y0)[idx_test]",
                    "possible_values": []
                }
            }
        }
    },
    "models/netdeconf.py": {
        "torch": {
            "GCN_DECONF_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_in": {
                    "value": "n_in",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_out": {
                    "value": "n_out",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dropout": {
                    "value": "dropout",
                    "possible_values": []
                },
                "Linear_41": {
                    "variable": {
                        "value": "self.pp",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "nhid",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sigmoid_45": {
                    "variable": {
                        "value": "self.pp_act",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "relu_49": {
                "variable": {
                    "value": "rep",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc[0](x, adj)",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "rep",
                    "possible_values": []
                },
                "input": {
                    "value": "rep",
                    "possible_values": [
                        [
                            "F.relu(self.gc[0](x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(rep, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc[i](rep, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(rep, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "where_66": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "condition": {
                    "value": "t > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "possible_values": [
                        [
                            "self.out_t11(y10).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y0",
                    "possible_values": [
                        [
                            "self.out_t01(y00).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.out_t01",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.out_t11",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.out_t01",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.out_t11",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "rep",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc[i](rep, adj)",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "rep",
                    "possible_values": []
                },
                "input": {
                    "value": "rep",
                    "possible_values": [
                        [
                            "F.relu(self.gc[0](x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(rep, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc[i](rep, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(rep, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "y00",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_t00[i](rep)",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "y00",
                    "possible_values": []
                },
                "input": {
                    "value": "y00",
                    "possible_values": [
                        [
                            "F.relu(self.out_t00[i](rep))",
                            "Call"
                        ],
                        [
                            "F.dropout(y00, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "y10",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_t10[i](rep)",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "y10",
                    "possible_values": []
                },
                "input": {
                    "value": "y10",
                    "possible_values": [
                        [
                            "F.relu(self.out_t10[i](rep))",
                            "Call"
                        ],
                        [
                            "F.dropout(y10, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "nhid",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "possible_values": []
                }
            }
        }
    }
}