{
    "plain/Centralized_DIN/Dice.py": {
        "tensorflow": {
            "reduce_mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "brodcast_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(_x, axis=reduction_axes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(_x - brodcast_mean) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_19": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "brodcast_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "x_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(_x - brodcast_mean) / (brodcast_std + epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_6": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'alpha' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_18": {
                "x": {
                    "value": "_x - brodcast_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_6": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "plain/Centralized_DIN/model.py": {
        "tensorflow": {
            "concat_37": {
                "variable": {
                    "value": "self.item_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_batch_embedded, self.cat_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_his_batch_embedded, self.cat_his_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "variable": {
                    "value": "self.item_his_eb_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_42": {
                "variable": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea], -1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_43": {
                "variable": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inp, name='bn1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bn1, 200, activation=None, name='f1')",
                            "Call"
                        ],
                        [
                            "dice(dnn1, name='dice_1')",
                            "Call"
                        ],
                        [
                            "prelu(dnn1, 'prelu1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_54": {
                "variable": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn1, 80, activation=None, name='f2')",
                            "Call"
                        ],
                        [
                            "dice(dnn2, name='dice_2')",
                            "Call"
                        ],
                        [
                            "prelu(dnn2, 'prelu2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_79": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_109": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_113": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.seq_len_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_uid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_25": {
                "variable": {
                    "value": "self.uid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_mid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_29": {
                "variable": {
                    "value": "self.mid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "variable": {
                    "value": "self.mid_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_cat, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_34": {
                "variable": {
                    "value": "self.cat_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.cat_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.round(self.y_hat), self.target_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "variable": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "din_attention(self.item_eb, self.item_his_eb, self.mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_9": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_22": {
                "name": {
                    "value": "Embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_24": {
                "name": {
                    "value": "uid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_28": {
                "name": {
                    "value": "mid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_33": {
                "name": {
                    "value": "cat_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "logits": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn2, 2, activation=None, name='f3')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "Metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_70": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_72": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_77": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "Attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_126": {
                "name": {
                    "value": "att_fea",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attention_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_59": {
                "input_tensor": {
                    "value": "tf.log(self.y_hat) * self.target_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "tf.equal(tf.round(self.y_hat), self.target_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_76": {
                "x": {
                    "value": "tf.round(self.y_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_59": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_76": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plain/Centralized_DIN/train_taobao.py": {
        "tensorflow": {
            "GPUOptions_118": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_181": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_195": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "Session_119": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_182": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_119": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_182": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plain/Centralized_DIN/utils.py": {
        "tensorflow": {
            "equal_44": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(query, [1, tf.shape(facts)[1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(queries, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, facts, queries - facts, queries * facts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([queries, facts, queries - facts, queries * facts], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f1_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(din_all, 80, activation=tf.nn.sigmoid, name='f1_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f2_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_1_all, 40, activation=tf.nn.sigmoid, name='f2_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_2_all, 1, activation=None, name='f3_att')",
                            "Call"
                        ],
                        [
                            "tf.reshape(d_layer_3_all, [-1, 1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "variable": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_56": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(scores) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(scores, facts)",
                            "Call"
                        ],
                        [
                            "facts * tf.expand_dims(scores, -1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_44": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedAvg/Dice.py": {
        "tensorflow": {
            "reduce_mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "brodcast_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(_x, axis=reduction_axes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(_x - brodcast_mean) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_19": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "brodcast_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "x_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(_x - brodcast_mean) / (brodcast_std + epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_6": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'alpha' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_18": {
                "x": {
                    "value": "_x - brodcast_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_6": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedAvg/client_functions.py": {
        "tensorflow": {}
    },
    "plain/FedAvg/communication.py": {
        "tensorflow": {}
    },
    "plain/FedAvg/evaluate.py": {
        "tensorflow": {}
    },
    "plain/FedAvg/general_functions.py": {
        "tensorflow": {
            "equal_74": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(query, [1, tf.shape(facts)[1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(queries, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, facts, queries - facts, queries * facts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([queries, facts, queries - facts, queries * facts], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f1_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(din_all, 80, activation=tf.nn.sigmoid, name='f1_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f2_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_1_all, 40, activation=tf.nn.sigmoid, name='f2_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_2_all, 1, activation=None, name='f3_att')",
                            "Call"
                        ],
                        [
                            "tf.reshape(d_layer_3_all, [-1, 1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_86": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(scores) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_26": {
                "*inputs": {
                    "value": "*reassign_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(scores, facts)",
                            "Call"
                        ],
                        [
                            "facts * tf.expand_dims(scores, -1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_85": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_with_default_9": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/%s' % ('FedAvg', var.op.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_25": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "fvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_75": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedAvg/model.py": {
        "tensorflow": {
            "concat_38": {
                "variable": {
                    "value": "self.item_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_batch_embedded, self.cat_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_his_batch_embedded, self.cat_his_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "self.item_his_eb_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_43": {
                "variable": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea], -1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inp, name='bn1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bn1, 200, activation=None, name='f1')",
                            "Call"
                        ],
                        [
                            "dice(dnn1, name='dice_1')",
                            "Call"
                        ],
                        [
                            "prelu(dnn1, 'parametric_relu_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn1, 80, activation=None, name='f2')",
                            "Call"
                        ],
                        [
                            "dice(dnn2, name='dice_2')",
                            "Call"
                        ],
                        [
                            "prelu(dnn2, 'parametric_relu_2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_81": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.seq_len_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_uid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_26": {
                "variable": {
                    "value": "self.uid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_mid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "variable": {
                    "value": "self.mid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "self.mid_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_cat, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.cat_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_36": {
                "variable": {
                    "value": "self.cat_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.round(self.y_hat), self.target_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "din_attention(self.item_eb, self.item_his_eb, self.mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_9": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "Embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_25": {
                "name": {
                    "value": "uid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_29": {
                "name": {
                    "value": "mid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_34": {
                "name": {
                    "value": "cat_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "logits": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn2, 2, activation=None, name='f3')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_65": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_71": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_72": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.clip_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_79": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "name": {
                    "value": "Attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_119": {
                "name": {
                    "value": "att_fea",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attention_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "tf.log(self.y_hat) * self.target_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "tf.equal(tf.round(self.y_hat), self.target_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_78": {
                "x": {
                    "value": "tf.round(self.y_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_78": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedAvg/ps_functions.py": {
        "tensorflow": {
            "trainable_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedAvg/train_client.py": {
        "tensorflow": {
            "set_random_seed_25": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_158": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_159": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_159": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plain/FedAvg/train_ps.py": {
        "tensorflow": {
            "GPUOptions_124": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_125": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_130": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_131": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_24": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_125": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plain/FedSubAvg/Dice.py": {
        "tensorflow": {
            "reduce_mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "brodcast_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(_x, axis=reduction_axes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(_x - brodcast_mean) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_19": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "brodcast_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "x_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(_x - brodcast_mean) / (brodcast_std + epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_6": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'alpha' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_18": {
                "x": {
                    "value": "_x - brodcast_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_6": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedSubAvg/client_functions.py": {
        "tensorflow": {}
    },
    "plain/FedSubAvg/communication.py": {
        "tensorflow": {}
    },
    "plain/FedSubAvg/evaluate.py": {
        "tensorflow": {}
    },
    "plain/FedSubAvg/general_functions.py": {
        "tensorflow": {
            "equal_74": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(query, [1, tf.shape(facts)[1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(queries, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, facts, queries - facts, queries * facts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([queries, facts, queries - facts, queries * facts], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f1_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(din_all, 80, activation=tf.nn.sigmoid, name='f1_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f2_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_1_all, 40, activation=tf.nn.sigmoid, name='f2_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_2_all, 1, activation=None, name='f3_att')",
                            "Call"
                        ],
                        [
                            "tf.reshape(d_layer_3_all, [-1, 1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_86": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(scores) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_26": {
                "*inputs": {
                    "value": "*reassign_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(scores, facts)",
                            "Call"
                        ],
                        [
                            "facts * tf.expand_dims(scores, -1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_85": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_with_default_9": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/%s' % ('FedAvg', var.op.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_25": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "fvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_75": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedSubAvg/model.py": {
        "tensorflow": {
            "concat_38": {
                "variable": {
                    "value": "self.item_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_batch_embedded, self.cat_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_his_batch_embedded, self.cat_his_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "self.item_his_eb_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_43": {
                "variable": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea], -1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inp, name='bn1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bn1, 200, activation=None, name='f1')",
                            "Call"
                        ],
                        [
                            "dice(dnn1, name='dice_1')",
                            "Call"
                        ],
                        [
                            "prelu(dnn1, 'parametric_relu_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn1, 80, activation=None, name='f2')",
                            "Call"
                        ],
                        [
                            "dice(dnn2, name='dice_2')",
                            "Call"
                        ],
                        [
                            "prelu(dnn2, 'parametric_relu_2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_81": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.seq_len_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_uid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_26": {
                "variable": {
                    "value": "self.uid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_mid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "variable": {
                    "value": "self.mid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "self.mid_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_cat, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.cat_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_36": {
                "variable": {
                    "value": "self.cat_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.round(self.y_hat), self.target_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "din_attention(self.item_eb, self.item_his_eb, self.mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_9": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "Embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_25": {
                "name": {
                    "value": "uid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_29": {
                "name": {
                    "value": "mid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_34": {
                "name": {
                    "value": "cat_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "logits": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn2, 2, activation=None, name='f3')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_65": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_71": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_72": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.clip_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_79": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "name": {
                    "value": "Attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_119": {
                "name": {
                    "value": "att_fea",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attention_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "tf.log(self.y_hat) * self.target_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "tf.equal(tf.round(self.y_hat), self.target_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_78": {
                "x": {
                    "value": "tf.round(self.y_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_78": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedSubAvg/ps_functions.py": {
        "tensorflow": {
            "trainable_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plain/FedSubAvg/train_client.py": {
        "tensorflow": {
            "set_random_seed_25": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_158": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_159": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_159": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plain/FedSubAvg/train_ps.py": {
        "tensorflow": {
            "GPUOptions_119": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_120": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_125": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_24": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_120": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "secure/SFL/Dice.py": {
        "tensorflow": {
            "reduce_mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "brodcast_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(_x, axis=reduction_axes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(_x - brodcast_mean) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_19": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "brodcast_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "x_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(_x - brodcast_mean) / (brodcast_std + epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_6": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'alpha' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_18": {
                "x": {
                    "value": "_x - brodcast_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_6": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFL/client_plain_functions.py": {
        "tensorflow": {}
    },
    "secure/SFL/client_private_set_union.py": {
        "tensorflow": {}
    },
    "secure/SFL/client_secure_federated_submodel_averaging.py": {
        "tensorflow": {}
    },
    "secure/SFL/communication.py": {
        "tensorflow": {}
    },
    "secure/SFL/evaluate.py": {
        "tensorflow": {}
    },
    "secure/SFL/general_functions.py": {
        "tensorflow": {
            "equal_75": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_76": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(query, [1, tf.shape(facts)[1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(queries, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, facts, queries - facts, queries * facts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([queries, facts, queries - facts, queries * facts], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f1_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(din_all, 80, activation=tf.nn.sigmoid, name='f1_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f2_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_1_all, 40, activation=tf.nn.sigmoid, name='f2_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_2_all, 1, activation=None, name='f3_att')",
                            "Call"
                        ],
                        [
                            "tf.reshape(d_layer_3_all, [-1, 1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_87": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(scores) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_27": {
                "*inputs": {
                    "value": "*reassign_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(scores, facts)",
                            "Call"
                        ],
                        [
                            "facts * tf.expand_dims(scores, -1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_77": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_with_default_10": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/%s' % ('FedAvg', var.op.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_26": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "fvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_76": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_82": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFL/model.py": {
        "tensorflow": {
            "concat_38": {
                "variable": {
                    "value": "self.item_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_batch_embedded, self.cat_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_his_batch_embedded, self.cat_his_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "self.item_his_eb_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_43": {
                "variable": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea], -1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inp, name='bn1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bn1, 200, activation=None, name='f1')",
                            "Call"
                        ],
                        [
                            "dice(dnn1, name='dice_1')",
                            "Call"
                        ],
                        [
                            "prelu(dnn1, 'parametric_relu_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn1, 80, activation=None, name='f2')",
                            "Call"
                        ],
                        [
                            "dice(dnn2, name='dice_2')",
                            "Call"
                        ],
                        [
                            "prelu(dnn2, 'parametric_relu_2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_81": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.seq_len_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_uid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_26": {
                "variable": {
                    "value": "self.uid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_mid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "variable": {
                    "value": "self.mid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "self.mid_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_cat, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.cat_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_36": {
                "variable": {
                    "value": "self.cat_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.round(self.y_hat), self.target_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "din_attention(self.item_eb, self.item_his_eb, self.mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_9": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "Embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_25": {
                "name": {
                    "value": "uid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_29": {
                "name": {
                    "value": "mid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_34": {
                "name": {
                    "value": "cat_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "logits": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn2, 2, activation=None, name='f3')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_65": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_71": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_72": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.clip_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_79": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "name": {
                    "value": "Attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_119": {
                "name": {
                    "value": "att_fea",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attention_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "tf.log(self.y_hat) * self.target_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "tf.equal(tf.round(self.y_hat), self.target_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_78": {
                "x": {
                    "value": "tf.round(self.y_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_78": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFL/ps_plain_functions.py": {
        "tensorflow": {
            "trainable_variables_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFL/ps_private_set_union.py": {
        "tensorflow": {}
    },
    "secure/SFL/ps_secure_federated_submodel_averaging.py": {
        "tensorflow": {}
    },
    "secure/SFL/train_client.py": {
        "tensorflow": {
            "set_random_seed_50": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_260": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_261": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_261": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "secure/SFL/train_ps.py": {
        "tensorflow": {
            "GPUOptions_158": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_159": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_164": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_22": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_159": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "secure/SFSL/Dice.py": {
        "tensorflow": {
            "reduce_mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "brodcast_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(_x, axis=reduction_axes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(_x - brodcast_mean) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(input_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_19": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "brodcast_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(_x - brodcast_mean) + epsilon, axis=reduction_axes)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(std)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "x_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(_x - brodcast_mean) / (brodcast_std + epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_6": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'alpha' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_18": {
                "x": {
                    "value": "_x - brodcast_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_6": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFSL/client_plain_functions.py": {
        "tensorflow": {}
    },
    "secure/SFSL/client_private_set_union.py": {
        "tensorflow": {}
    },
    "secure/SFSL/client_secure_federated_submodel_averaging.py": {
        "tensorflow": {}
    },
    "secure/SFSL/communication.py": {
        "tensorflow": {}
    },
    "secure/SFSL/evaluate.py": {
        "tensorflow": {}
    },
    "secure/SFSL/general_functions.py": {
        "tensorflow": {
            "equal_75": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_76": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(query, [1, tf.shape(facts)[1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(queries, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, facts, queries - facts, queries * facts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "din_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([queries, facts, queries - facts, queries * facts], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f1_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_1_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(din_all, 80, activation=tf.nn.sigmoid, name='f1_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f2_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_layer_2_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_1_all, 40, activation=tf.nn.sigmoid, name='f2_att')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_layer_3_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(d_layer_2_all, 1, activation=None, name='f3_att')",
                            "Call"
                        ],
                        [
                            "tf.reshape(d_layer_3_all, [-1, 1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_87": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(scores) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_27": {
                "*inputs": {
                    "value": "*reassign_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(facts)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(scores, facts)",
                            "Call"
                        ],
                        [
                            "facts * tf.expand_dims(scores, -1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, tf.shape(facts))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(facts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(mask, tf.ones_like(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_77": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_with_default_10": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/%s' % ('FedAvg', var.op.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_26": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "fvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_layer_3_all",
                            "Name"
                        ],
                        [
                            "tf.where(key_masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, [-1, tf.shape(facts)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_76": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_82": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "facts",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFSL/model.py": {
        "tensorflow": {
            "concat_38": {
                "variable": {
                    "value": "self.item_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_batch_embedded, self.cat_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.mid_his_batch_embedded, self.cat_his_batch_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "self.item_his_eb_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.item_his_eb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_43": {
                "variable": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea], -1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inp, name='bn1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bn1, 200, activation=None, name='f1')",
                            "Call"
                        ],
                        [
                            "dice(dnn1, name='dice_1')",
                            "Call"
                        ],
                        [
                            "prelu(dnn1, 'parametric_relu_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dnn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn1, 80, activation=None, name='f2')",
                            "Call"
                        ],
                        [
                            "dice(dnn2, name='dice_2')",
                            "Call"
                        ],
                        [
                            "prelu(dnn2, 'parametric_relu_2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_81": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.uid_batch_embedded, self.item_eb, self.item_his_eb_sum, self.item_eb * self.item_his_eb_sum, att_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_his_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_batch_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.seq_len_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_uid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_26": {
                "variable": {
                    "value": "self.uid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.uid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mid_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_mid, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "variable": {
                    "value": "self.mid_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "self.mid_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.mid_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cat_embedding_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_cat, EMBEDDING_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.cat_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_36": {
                "variable": {
                    "value": "self.cat_his_batch_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.cat_his_batch_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.round(self.y_hat), self.target_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "din_attention(self.item_eb, self.item_his_eb, self.mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_9": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "Embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_25": {
                "name": {
                    "value": "uid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.uid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_29": {
                "name": {
                    "value": "mid_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mid_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_34": {
                "name": {
                    "value": "cat_embeddings_var",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cat_embeddings_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "logits": {
                    "value": "dnn3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dnn2, 2, activation=None, name='f3')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_65": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_71": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_72": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.clip_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_79": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "name": {
                    "value": "Attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_119": {
                "name": {
                    "value": "att_fea",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "att_fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attention_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "tf.log(self.y_hat) * self.target_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "tf.equal(tf.round(self.y_hat), self.target_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_78": {
                "x": {
                    "value": "tf.round(self.y_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_78": {
                "x": {
                    "value": "self.y_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFSL/ps_plain_functions.py": {
        "tensorflow": {
            "trainable_variables_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "secure/SFSL/ps_private_set_union.py": {
        "tensorflow": {}
    },
    "secure/SFSL/ps_secure_federated_submodel_averaging.py": {
        "tensorflow": {}
    },
    "secure/SFSL/train_client.py": {
        "tensorflow": {
            "set_random_seed_50": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_238": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_239": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_239": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "secure/SFSL/train_ps.py": {
        "tensorflow": {
            "GPUOptions_158": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_159": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_164": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_22": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_159": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "taobao_data_process/6_remap_to_new_id.py": {
        "tensorflow": {}
    }
}