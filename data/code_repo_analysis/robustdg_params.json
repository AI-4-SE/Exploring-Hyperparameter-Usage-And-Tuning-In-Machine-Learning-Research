{
    "evaluation/attribute_attack.py": {
        "sklearn": {},
        "tensorflow": {
            "numeric_column_244": {
                "key": {
                    "value": "'value_' + str(attack_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SpurCorrDataLoader(self.train_dataset['data_obj'])",
                            "Call"
                        ],
                        [
                            "data_utils.DataLoader(dataset, batch_size=self.args.batch_size, shuffle=True, **self.args.kwargs)",
                            "Call"
                        ],
                        [
                            "SpurCorrDataLoader(self.test_dataset['data_obj'])",
                            "Call"
                        ],
                        [
                            "data_utils.DataLoader(dataset, batch_size=self.args.batch_size, shuffle=True, **self.args.kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "train_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "train_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SpurCorrDataLoader(self.train_dataset['data_obj'])",
                            "Call"
                        ],
                        [
                            "data_utils.DataLoader(dataset, batch_size=self.args.batch_size, shuffle=True, **self.args.kwargs)",
                            "Call"
                        ],
                        [
                            "SpurCorrDataLoader(self.test_dataset['data_obj'])",
                            "Call"
                        ],
                        [
                            "data_utils.DataLoader(dataset, batch_size=self.args.batch_size, shuffle=True, **self.args.kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "test_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "test_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "train_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_156": {
                "variable": {
                    "value": "train_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(train_data['labels'], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "test_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "variable": {
                    "value": "test_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(test_data['labels'], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_79": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_108": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_140": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_164": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "train_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "test_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/logit_hist.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "stack_60": {
                "variable": {
                    "value": "final_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(final_loss)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(final_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_77": {
                "variable": {
                    "value": "final_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(final_loss)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(final_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_57": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_74": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_68": {
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/privacy_attack.py": {
        "sklearn": {},
        "tensorflow": {
            "numeric_column_104": {
                "key": {
                    "value": "'value_' + str(attack_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "evaluation/privacy_entropy.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "train_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "train_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "test_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "test_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "attack_data[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_logits, test_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "attack_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "attack_data[members]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones((sample_size, 1)), torch.zeros((sample_size, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_119": {
                "variable": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_52": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_73": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_169": {
                "variable": {
                    "value": "F_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "F_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_149": {
                "variable": {
                    "value": "threshold_data[y_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * (1.0 - F_y) * torch.log(F_y) - 1 * torch.sum(F_i * torch.log(1.0 - F_i), dim=1)",
                            "BinOp"
                        ],
                        [
                            "-1 * (1.0 - F_y) * torch.log(F_y) - 1 * torch.sum(F_i * torch.log(1.0 - F_i), dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_154": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem_predict == members",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_176": {
                "input": {
                    "value": "mem_predict == members",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_171": {
                "input": {
                    "value": "1.0 - F_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "F_i * torch.log(1.0 - F_i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_111": {
                "*size": {
                    "value": "(sample_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "(sample_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_144": {
                "input": {
                    "value": "1.0 - F_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "F_i * torch.log(1.0 - F_i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/privacy_loss_attack.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "train_data[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "train_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "train_data[obj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data['obj']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "test_data[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "test_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "test_data[obj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data['obj']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "test_data[free]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "test_data['free']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "attack_data[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_loss, test_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "attack_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "attack_data[members]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones((sample_size, 1)), torch.zeros((sample_size, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "attack_data[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_loss, test_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "attack_data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "attack_data[members]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones((train_loss.shape[0], 1)), torch.zeros((test_loss.shape[0], 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_197": {
                "variable": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_54": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_80": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data['loss'][:sample_size]",
                            "Subscript"
                        ],
                        [
                            "test_data['loss'][-1 - sample_size:-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_loss, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(test_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data['labels'][:sample_size]",
                            "Subscript"
                        ],
                        [
                            "test_data['labels'][-1 - sample_size:-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(test_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_103": {
                "input": {
                    "value": "train_data['obj']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_105": {
                "input": {
                    "value": "test_data['obj']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data['loss'][:sample_size]",
                            "Subscript"
                        ],
                        [
                            "test_data['loss'][-1 - sample_size:-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_loss, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(test_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data['labels'][:sample_size]",
                            "Subscript"
                        ],
                        [
                            "test_data['labels'][-1 - sample_size:-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(test_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_218": {
                "variable": {
                    "value": "threshold_data[y_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "variable"
                        ],
                        [
                            "loss",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_223": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem_predict == members",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_241": {
                "input": {
                    "value": "mem_predict == members",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_129": {
                "*size": {
                    "value": "(sample_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "(sample_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_189": {
                "*size": {
                    "value": "(train_loss.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "(test_loss.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_63": {
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_e[rand_indices]",
                            "Subscript"
                        ],
                        [
                            "y_e.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "y_e[rand_indices]",
                            "Subscript"
                        ],
                        [
                            "y_e.to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_90": {
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_e[rand_indices]",
                            "Subscript"
                        ],
                        [
                            "y_e.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "y_e[rand_indices]",
                            "Subscript"
                        ],
                        [
                            "y_e.to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "misc_scripts/logit_plot_slab.py": {
        "sklearn": {},
        "torch": {
            "device_157": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(args.cuda_device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_200": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_201": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_202": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "run * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_197": {
                "seed": {
                    "value": "run * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "sklearn": {
            "TSNE_311": {
                "variable": {
                    "value": "test_method",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains, 'train', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains, 'train', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains, 'train', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains + test_domains, 'train', 1, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "early_exaggeration": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains, 'val', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains, 'val', 1, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "learning_rate": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, test_domains, 'test', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, test_domains, 'test', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, train_domains + test_domains, 'test', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, test_domains, 'test', 1, kwargs)",
                            "Call"
                        ],
                        [
                            "get_dataloader(args, run, test_domains, 'test', 1, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "base_res_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_dir + args.dataset_name + '/' + 'dp_' + str(args.dp_epsilon) + '_' + args.method_name + '/' + args.match_layer + '/' + 'train_' + str(args.train_domains)",
                            "BinOp"
                        ],
                        [
                            "res_dir + args.dataset_name + '/' + args.method_name + '/' + args.match_layer + '/' + 'train_' + str(args.train_domains)",
                            "BinOp"
                        ],
                        [
                            "base_res_dir + '/slab_noise_' + str(args.slab_noise)",
                            "BinOp"
                        ]
                    ]
                },
                "n_iter_without_progress": {
                    "value": "run",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run in range(args.n_runs)",
                            "Call"
                        ]
                    ]
                },
                "min_grad_norm": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.cuda_device))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_183": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(args.cuda_device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_239": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_240": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_241": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_234": {
                "seed": {
                    "value": "run * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_236": {
                "seed": {
                    "value": "run * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_slab.py": {
        "sklearn": {},
        "torch": {
            "device_193": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(args.cuda_device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_241": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_242": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_243": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_236": {
                "seed": {
                    "value": "10 * run",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_238": {
                "seed": {
                    "value": "10 * run",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "sklearn": {},
        "torch": {
            "device_169": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(args.cuda_device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_211": {
                "seed": {
                    "value": "run * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_213": {
                "seed": {
                    "value": "run * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/attribute_attack.py": {
        "sklearn": {},
        "tensorflow": {
            "input_layer_33": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "feature_columns": {
                    "value": "params['feature_columns']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "params['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "argmax_46": {
                "variable": {
                    "value": "predicted_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, params['n_classes'], activation=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_57": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, params['n_classes'], activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_60": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "acc_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "tf.train.exponential_decay(learning_rate=params['learning_rate'], global_step=tf.train.get_global_step(), decay_steps=1000, decay_rate=0.96)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Estimator_87": {
                "variable": {
                    "value": "attacker",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "my_attack_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_attack_model",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{'feature_columns': my_feature_columns, 'hidden_units': [8, 6, 4], 'n_classes': n_classes, 'n_train_examples': len(X_att_train), 'learning_rate': 0.001}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dense_36": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['hidden_units']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_37": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_64": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "EstimatorSpec_83": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=tf.argmax(labels, 1), logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_54": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'class_ids': predicted_classes[:, tf.newaxis], 'probabilities': tf.nn.softmax(logits), 'logits': logits}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_67": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=tf.argmax(labels, 1), logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': accuracy}",
                            "Dict"
                        ]
                    ]
                }
            },
            "softmax_51": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, params['n_classes'], activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_57": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exponential_decay_76": {
                "learning_rate": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_global_step_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/helper.py": {
        "sklearn": {
            "TSNE_36": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cross_entropy_43": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temp_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_label.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_56": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "dataset[data_loader]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SlabData(args, domains, '/slab/', data_case=data_case, match_func=match_func, base_size=args.slab_num_samples, freq_ratio=50, data_dim=args.slab_data_dim, total_slabs=args.slab_total_slabs, seed=run, mask_linear=mask_linear)",
                            "Call"
                        ],
                        [
                            "PACS(args, domains, '/pacs/train_val_splits/', data_case=data_case, match_func=match_func)",
                            "Call"
                        ],
                        [
                            "ChestXRay(args, domains, '/chestxray/', data_case=data_case, match_func=match_func)",
                            "Call"
                        ],
                        [
                            "ChestXRay(args, domains, '/chestxray_spur/', data_case=data_case, match_func=match_func)",
                            "Call"
                        ],
                        [
                            "MnistRotated(args, domains, mnist_subset, '/mnist/', data_case=data_case, match_func=match_func)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size * 5",
                            "BinOp"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "batch_size",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "input": {
                    "value": "phi(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_143": {
                "variable": {
                    "value": "cos_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(cos_sim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "(x1 - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "torch.isnan(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "torch.isnan(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "torch.isnan(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "torch.isnan(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "torch.isnan(cos_sim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "(x1 - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_109": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1 / torch.max(norm, temp)",
                            "BinOp"
                        ],
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_113": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x2 / torch.max(norm, temp)",
                            "BinOp"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_121": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "x2.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_123": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "x2.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_125": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1 / torch.max(norm, temp)",
                            "BinOp"
                        ],
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_131": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "x2.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_133": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "x2.norm(dim=1)",
                            "Call"
                        ],
                        [
                            "norm.view(norm.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_135": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x2 / torch.max(norm, temp)",
                            "BinOp"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_146": {
                "input": {
                    "value": "cos_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x1 * x2, dim=2)",
                            "Call"
                        ],
                        [
                            "cos_sim / tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_150": {
                "input": {
                    "value": "cos_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x1 * x2, dim=2)",
                            "Call"
                        ],
                        [
                            "cos_sim / tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_152": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(temp_logits, target_label.long()).to(cuda)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits * scale, labels.long()).to(cuda)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.exp(cos_sim), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_50": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(temp_logits, target_label.long()).to(cuda)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits * scale, labels.long()).to(cuda)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.exp(cos_sim), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[scale]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_69": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_71": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "(x1 - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_73": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/privacy_attack.py": {
        "sklearn": {},
        "tensorflow": {
            "input_layer_33": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "feature_columns": {
                    "value": "params['feature_columns']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "params['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "argmax_46": {
                "variable": {
                    "value": "predicted_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, params['n_classes'], activation=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_57": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, params['n_classes'], activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_60": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "acc_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "tf.train.exponential_decay(learning_rate=params['learning_rate'], global_step=tf.train.get_global_step(), decay_steps=1000, decay_rate=0.96)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Estimator_87": {
                "variable": {
                    "value": "attacker",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "my_attack_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_attack_model",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{'feature_columns': my_feature_columns, 'hidden_units': [8, 4], 'n_classes': 2, 'n_train_examples': len(X_att_train), 'learning_rate': 0.001}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dense_36": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['hidden_units']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_37": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.feature_column.input_layer(features, params['feature_columns'])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(net, training=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_64": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "EstimatorSpec_83": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=tf.argmax(labels, 1), logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_54": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'class_ids': predicted_classes[:, tf.newaxis], 'probabilities': tf.nn.softmax(logits), 'logits': logits}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_67": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=tf.argmax(labels, 1), logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': accuracy}",
                            "Dict"
                        ]
                    ]
                }
            },
            "softmax_51": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, params['n_classes'], activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_57": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exponential_decay_76": {
                "learning_rate": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_global_step_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/data_utils.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trd",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "test_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ted",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "tr_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X_tr, Y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "te_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X_te, Y_te)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "tr_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "d_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_cifar(fpath, use_cifar10=use_cifar10, use_grayscale=use_grayscale, transform_type=transform_type, normalize=normalize, means=means, std=std, flatten_data=flatten_data, binarize=binarize, y0=y0)",
                            "Call"
                        ],
                        [
                            "get_cifar(fpath, use_cifar10=use_cifar10, use_grayscale=use_grayscale, transform_type=transform_type, normalize=normalize, flatten_data=flatten_data, binarize=binarize, y0=y0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "te_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "d_te",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_cifar(fpath, use_cifar10=use_cifar10, use_grayscale=use_grayscale, transform_type=transform_type, normalize=normalize, means=means, std=std, flatten_data=flatten_data, binarize=binarize, y0=y0)",
                            "Call"
                        ],
                        [
                            "get_cifar(fpath, use_cifar10=use_cifar10, use_grayscale=use_grayscale, transform_type=transform_type, normalize=normalize, flatten_data=flatten_data, binarize=binarize, y0=y0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_79": {
                "variable": {
                    "value": "Yu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(U)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_128": {
                "*tensors": {
                    "value": "X_tr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_129": {
                "*tensors": {
                    "value": "X_te",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {}
        }
    },
    "utils/scripts/lms_utils.py": {
        "sklearn": {
            "roc_auc_score_293": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "S.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_231": {
                "variable": {
                    "value": "rt_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_233": {
                "variable": {
                    "value": "rand_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_266": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_267": {
                "variable": {
                    "value": "rt_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['X']",
                            "Subscript"
                        ],
                        [
                            "data['X'].detach().cpu()",
                            "Call"
                        ],
                        [
                            "d['data']['X']",
                            "Subscript"
                        ],
                        [
                            "map(copy.deepcopy, dl.dataset.tensors)",
                            "Call"
                        ],
                        [
                            "map(lambda Z: Z.to(device), dl.dataset.tensors)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(W, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_136": {
                "input": {
                    "value": "model(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "KY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(torch.Tensor(np.array(K).dot(W)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_222": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_242": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_285": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rt_X_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(rt_X).to(device)",
                            "Call"
                        ],
                        [
                            "_get_dep_data(rt_X_, Y, coord if type(coord) in (list, tuple) else [coord])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(d['config']['dim'])",
                            "Call"
                        ],
                        [
                            "d['data']['W']",
                            "Subscript"
                        ],
                        [
                            "np.eye(d['config']['dim'])",
                            "Call"
                        ],
                        [
                            "np.eye(dim)",
                            "Call"
                        ],
                        [
                            "np.eye(dim)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(W).to(device)",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_33": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root, exp)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_189": {},
            "transpose_267": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(d['config']['dim'])",
                            "Call"
                        ],
                        [
                            "d['data']['W']",
                            "Subscript"
                        ],
                        [
                            "np.eye(d['config']['dim'])",
                            "Call"
                        ],
                        [
                            "np.eye(dim)",
                            "Call"
                        ],
                        [
                            "np.eye(dim)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(W).to(device)",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_271": {
                "n": {
                    "value": "len(rt_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_186": {},
            "cross_entropy_300": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_logits_given_tensor(X_, model, device=device, bs=250)",
                            "Call"
                        ],
                        [
                            "utils.get_logits_given_tensor(X_, model, device=device, bs=250)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "data['Y'].detach().cpu()",
                            "Call"
                        ],
                        [
                            "z['Y']",
                            "Subscript"
                        ],
                        [
                            "map(copy.deepcopy, dl.dataset.tensors)",
                            "Call"
                        ],
                        [
                            "map(lambda Z: Z.to(device), dl.dataset.tensors)",
                            "Call"
                        ],
                        [
                            "Y[perm]",
                            "Subscript"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/utils.py": {
        "sklearn": {
            "roc_auc_score_251": {
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y[p]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(torch.cat(Y))",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(dl, repeat=repeat, transform_fn=transform_fn)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, repeat=repeat)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, transform_fn=func)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(Y).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "map(np.concatenate, [S, Y])",
                            "Call"
                        ],
                        [
                            "get_logits(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_scores(model, loader, device)",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(loader)",
                            "Call"
                        ],
                        [
                            "Y.numpy()",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "map(np.concatenate, [S, Y])",
                            "Call"
                        ],
                        [
                            "get_logits(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_scores(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_logits_given_tensor(X, model, device=device, softmax=True).cpu()",
                            "Call"
                        ],
                        [
                            "S.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_258": {
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y[p]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(torch.cat(Y))",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(dl, repeat=repeat, transform_fn=transform_fn)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, repeat=repeat)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, transform_fn=func)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(Y).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "map(np.concatenate, [S, Y])",
                            "Call"
                        ],
                        [
                            "get_logits(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_scores(model, loader, device)",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(loader)",
                            "Call"
                        ],
                        [
                            "Y.numpy()",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "map(np.concatenate, [S, Y])",
                            "Call"
                        ],
                        [
                            "get_logits(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_scores(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_logits_given_tensor(X, model, device=device, softmax=True).cpu()",
                            "Call"
                        ],
                        [
                            "S.numpy()",
                            "Call"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "mc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ovr' if one_vs_rest is True else 'ovo'",
                            "IfExp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "randperm_38": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "dl0",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X0), torch.LongTensor(Y0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "dla.batch_size",
                            "Attribute"
                        ],
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "dl1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X1), torch.LongTensor(Y1))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "dla.batch_size",
                            "Attribute"
                        ],
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_134": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[p, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(torch.cat(X))",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(dl, repeat=repeat, transform_fn=transform_fn)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, repeat=repeat)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl)",
                            "Call"
                        ],
                        [
                            "X.reshape(X.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, transform_fn=func)",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(loader)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchSampler_135": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(X)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(sampler, bs, False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "dla.batch_size",
                            "Attribute"
                        ],
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_33": {
                "dataset": {
                    "value": "TensorDataset(X, Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "dla.batch_size",
                            "Attribute"
                        ],
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_48": {
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X), torch.LongTensor(Y))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "dla.batch_size",
                            "Attribute"
                        ],
                        [
                            "dl.batch_size",
                            "Attribute"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_152": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xb)",
                            "Call"
                        ],
                        [
                            "get_logits_given_tensor(X, model, device=device, bs=bs)",
                            "Call"
                        ],
                        [
                            "model(xb).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_162": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_273": {
                "input": {
                    "value": "F.relu(1 - out * y_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_33": {
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_43": {
                "*tensors": {
                    "value": "torch.Tensor(X0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_44": {
                "*tensors": {
                    "value": "torch.Tensor(X1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_48": {
                "*tensors": {
                    "value": "torch.Tensor(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[p, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(torch.cat(X))",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(dl, repeat=repeat, transform_fn=transform_fn)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, repeat=repeat)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl)",
                            "Call"
                        ],
                        [
                            "X.reshape(X.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, transform_fn=func)",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(loader)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y[p]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(torch.cat(Y))",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(dl, repeat=repeat, transform_fn=transform_fn)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, repeat=repeat)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl)",
                            "Call"
                        ],
                        [
                            "extract_numpy_from_loader(dl, transform_fn=func)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(Y).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "map(np.concatenate, [S, Y])",
                            "Call"
                        ],
                        [
                            "get_logits(model, loader, device)",
                            "Call"
                        ],
                        [
                            "get_scores(model, loader, device)",
                            "Call"
                        ],
                        [
                            "extract_tensors_from_loader(loader)",
                            "Call"
                        ],
                        [
                            "Y.numpy()",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_147": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(logits)",
                            "Call"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_273": {
                "input": {
                    "value": "1 - out * y_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_187": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xb)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_299": {
                "mode": {
                    "value": "update_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer is not None",
                            "Compare"
                        ],
                        [
                            "optimizer is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "cross_entropy_303": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xb)",
                            "Call"
                        ],
                        [
                            "model(xb)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "transform_fn(xb, yb)",
                            "Call"
                        ],
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "yb.to(device, non_blocking=False)",
                            "Call"
                        ],
                        [
                            "transform_fn(xb, yb)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "yb.to(device)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "yb.to(device)",
                            "Call"
                        ],
                        [
                            "train_dl",
                            "variable"
                        ],
                        [
                            "tr_batch_fn(xb, yb)",
                            "Call"
                        ],
                        [
                            "yb.to(device, non_blocking=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_321": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_327": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xb)",
                            "Call"
                        ],
                        [
                            "model(xb)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "transform_fn(xb, yb)",
                            "Call"
                        ],
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "yb.to(device, non_blocking=False)",
                            "Call"
                        ],
                        [
                            "transform_fn(xb, yb)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "yb.to(device)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "yb.to(device)",
                            "Call"
                        ],
                        [
                            "train_dl",
                            "variable"
                        ],
                        [
                            "tr_batch_fn(xb, yb)",
                            "Call"
                        ],
                        [
                            "yb.to(device, non_blocking=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_325": {
                "mode": {
                    "value": "update_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer is not None",
                            "Compare"
                        ],
                        [
                            "optimizer is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "save_399": {
                "obj": {
                    "value": "{'model': copy.deepcopy(model).cpu(), 'stats': stats, 'opt': copy.deepcopy(opt).cpu()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.split(' ')[-1]",
                            "Subscript"
                        ],
                        [
                            "inp.split(' ')[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_197": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xb)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_663": {
                "obj": {
                    "value": "{'model': model, 'opt': opt, 'update_gap': update_gap}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.split(' ')[-1]",
                            "Subscript"
                        ],
                        [
                            "inp.split(' ')[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/bnlearn_data.py": {
        "tensorflow": {
            "numeric_column_73": {
                "key": {
                    "value": "str(key)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/algo.py": {
        "torch": {
            "StepLR_102": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "data_match_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_match_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(data_match_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_234": {
                "variable": {
                    "value": "label_match_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_match_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(label_match_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_175": {
                "obj": {
                    "value": "self.phi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/Model_' + self.post_string + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.phi.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.phi.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_261": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_230": {
                "tensors": {
                    "value": "data_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_231": {
                "tensors": {
                    "value": "label_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_266": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x_e)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/csd.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.sms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(0, 0.1, size=[self.K + 1, m, self.num_classes], dtype=torch.float, device='cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.sm_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(0, 0.1, size=[self.K + 1, self.num_classes], dtype=torch.float, device='cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(mean=0.0, std=0.1, size=[num_domains, self.K], dtype=torch.float, device='cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.cs_wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(mean=0.1, std=0.0001, size=[], dtype=torch.float, device='cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_37": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.phi.parameters())}, {'params': self.sms}, {'params': self.sm_biases}, {'params': self.embs}, {'params': self.cs_wt}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "c_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "di",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "c_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones((batch_size, 1), dtype=torch.float).to(self.cuda) * self.cs_wt, c_wts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "c_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(domains, self.embs)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.ones((batch_size, 1), dtype=torch.float).to(self.cuda) * self.cs_wt, c_wts), 1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(c_wts).to(self.cuda)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_69": {
                "variable": {
                    "value": "diag_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.eye(self.K + 1).to(self.cuda) for _ in range(self.num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "cps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.matmul(sms[:, :, _], torch.transpose(sms[:, :, _], 0, 1)) for _ in range(self.num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_71": {
                "variable": {
                    "value": "orth_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - diag_tensor) * (cps - diag_tensor) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "self.phi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/Model_' + self.post_string + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "self.sms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/Sms_' + self.post_string + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "self.sm_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/SmBiases_' + self.post_string + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_31": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.K + 1, m, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_32": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.K + 1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_34": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_domains, self.K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_35": {
                "mean": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "w_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sms[0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_62": {
                "equation": {
                    "value": "bk,kl->bl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "c_wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(domains, self.embs)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.ones((batch_size, 1), dtype=torch.float).to(self.cuda) * self.cs_wt, c_wts), 1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(c_wts).to(self.cuda)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_63": {
                "equation": {
                    "value": "brl,br->bl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bk,krl->brl', c_wts, self.sms)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_155": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_69": {
                "n": {
                    "value": "self.K + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "input": {
                    "value": "sms[:, :, _]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(sms[:, :, _], 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_78": {
                "input": {
                    "value": "self.sms[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "input": {
                    "value": "sms[:, :, _]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_115": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e, y_e, d_e.to(self.cuda), eval_case=0)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e, y_e, d_e.to(self.cuda), eval_case=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_160": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e, y_e, d_e.to(self.cuda), eval_case=0)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e, y_e, d_e.to(self.cuda), eval_case=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/dann.py": {
        "torch": {
            "SGD_41": {
                "variable": {
                    "value": "self.disc_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.discriminator.parameters()) + list(self.class_embeddings.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_47": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.featurizer.parameters()) + list(self.classifier.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "disc_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(disc_input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_100": {
                "variable": {
                    "value": "classifier_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(all_z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_e",
                            "variable"
                        ]
                    ]
                }
            },
            "one_hot_83": {
                "variable": {
                    "value": "y_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_e",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_83": {
                "variable": {
                    "value": "y_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_85": {
                "variable": {
                    "value": "disc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(disc_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "disc_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_e",
                            "variable"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_88": {
                "variable": {
                    "value": "disc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(disc_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "disc_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_e",
                            "variable"
                        ]
                    ]
                }
            },
            "empty_cache_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "disc_softmax[:, disc_labels].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[disc_input]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_126": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/erm.py": {
        "torch": {
            "randperm_39": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data_match_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_40": {
                "variable": {
                    "value": "data_match_tensor_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_match_tensor[perm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_41": {
                "variable": {
                    "value": "label_match_tensor_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_match_tensor[perm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_53": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_57": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_69": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x_e)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/erm_match.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "wasserstein_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_match.flatten(start_dim=0, end_dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(feat_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_171": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.phi.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.lr / 2 ** int(epoch / lr_schedule_step)",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_77": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_match.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "torch.argmax(feat_match, dim=1) == label_match",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "split_85": {
                "tensor": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_81": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "(feat_match[:, d_i, :] - feat_match[:, d_j, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "torch.abs(feat_match[:, d_i, :] - feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "cosine_similarity(feat_match[:, d_i, :], feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_97": {
                "input": {
                    "value": "feat_match[:, d_i, :] - feat_match[:, d_j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/hybrid.py": {
        "torch": {
            "save_36": {
                "obj": {
                    "value": "self.phi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/' + self.ctr_load_post_string + '/Model_' + self.post_string + '_' + str(run) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_res_dir + '/Model_' + self.ctr_load_post_string + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_124": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_128": {
                "variable": {
                    "value": "erm_loss_extra",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "augmentation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "wasserstein_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_match.flatten(start_dim=0, end_dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(feat_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(label_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "(out - out_org) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_165": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_match.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "torch.argmax(feat_match, dim=1) == label_match",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "torch.abs(out - out_org)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_172": {
                "tensor": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_173": {
                "tensor": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_match_tensor.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label_match.flatten(start_dim=0, end_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(label_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "cosine_similarity(out, out_org)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_140": {
                "input": {
                    "value": "out - out_org",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_168": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "(feat_match[:, d_i, :] - feat_match[:, d_j, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "torch.abs(feat_match[:, d_i, :] - feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "cosine_similarity(feat_match[:, d_i, :], feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_185": {
                "input": {
                    "value": "feat_match[:, d_i, :] - feat_match[:, d_j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/irm.py": {
        "torch": {
            "tensor_48": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_51": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "irm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_match.flatten(start_dim=0, end_dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(feat_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(label_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_match.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "torch.argmax(feat_match, dim=1) == label_match",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "empty_cache_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_83": {
                "tensor": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_84": {
                "tensor": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_match_tensor.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label_match.flatten(start_dim=0, end_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(label_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_79": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithms/match_dg.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "self.phi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/Model_' + self.ctr_save_post_string + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "self.phi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.base_res_dir + '/' + self.ctr_load_post_string + '/Model_' + self.post_string + '_' + str(run) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_res_dir + '/Model_' + self.ctr_load_post_string + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_140": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "same_ctr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "diff_ctr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "same_hinge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "diff_hinge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_match.flatten(start_dim=0, end_dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(feat_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(label_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_296": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_299": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_300": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_304": {
                "variable": {
                    "value": "erm_loss_extra",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "wasserstein_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_match.flatten(start_dim=0, end_dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_331": {
                "variable": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(feat_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(label_match, len(self.train_domains))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_397": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.phi.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.lr / 2 ** int(epoch / lr_schedule_step)",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_164": {
                "tensor": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ],
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_165": {
                "tensor": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_match_tensor.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label_match.flatten(start_dim=0, end_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(label_match, len(self.train_domains)))",
                            "Call"
                        ],
                        [
                            "label_match_tensor.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label_match.flatten(start_dim=0, end_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(label_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_324": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ],
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_match.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "torch.argmax(feat_match, dim=1) == label_match",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "torch.isnan(neg_feat_match)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "torch.isnan(diff_neg_feat_match)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "torch.isnan(neg_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_331": {
                "tensor": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ],
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_332": {
                "tensor": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_match_tensor.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label_match.flatten(start_dim=0, end_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(label_match, len(self.train_domains)))",
                            "Call"
                        ],
                        [
                            "label_match_tensor.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label_match.flatten(start_dim=0, end_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(label_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(self.train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_189": {
                "input": {
                    "value": "neg_feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_match[neg_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_195": {
                "input": {
                    "value": "diff_neg_feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_feat_match.view(neg_feat_match.shape[0] * neg_feat_match.shape[1], neg_feat_match.shape[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_200": {
                "input": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dist(pos_feat_match[:, d_i, :], diff_neg_feat_match[:, :], self.args.pos_metric, self.args.tau, xent=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_209": {
                "input": {
                    "value": "torch.isnan(neg_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "torch.isnan(torch.log(torch.exp(pos_dist) + neg_dist))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_220": {
                "input": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dist(pos_feat_match[:, d_i, :], diff_neg_feat_match[:, :], self.args.pos_metric, self.args.tau, xent=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_209": {
                "input": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dist(pos_feat_match[:, d_i, :], diff_neg_feat_match[:, :], self.args.pos_metric, self.args.tau, xent=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_213": {
                "input": {
                    "value": "torch.log(torch.exp(pos_dist) + neg_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "pos_dist - torch.log(torch.exp(pos_dist) + neg_dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_327": {
                "input": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ],
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, len(self.train_domains)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_342": {
                "input": {
                    "value": "(feat_match[:, d_i, :] - feat_match[:, d_j, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_213": {
                "input": {
                    "value": "torch.exp(pos_dist) + neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "torch.abs(feat_match[:, d_i, :] - feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_219": {
                "input": {
                    "value": "torch.exp(pos_dist) + neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_346": {
                "input": {
                    "value": "cosine_similarity(feat_match[:, d_i, :], feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_213": {
                "input": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - embedding_dist(pos_feat_match[:, d_i, :], pos_feat_match[:, d_j, :], self.args.pos_metric)",
                            "BinOp"
                        ],
                        [
                            "pos_dist / self.args.tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_344": {
                "input": {
                    "value": "feat_match[:, d_i, :] - feat_match[:, d_j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_219": {
                "input": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - embedding_dist(pos_feat_match[:, d_i, :], pos_feat_match[:, d_j, :], self.args.pos_metric)",
                            "BinOp"
                        ],
                        [
                            "pos_dist / self.args.tau",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "algorithms/mmd.py": {
        "torch": {
            "addmm_42": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_norm.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x2.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.my_cdist(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_105": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_112": {
                "variable": {
                    "value": "erm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "mmd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unique_118": {
                "variable": {
                    "value": "match_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_119": {
                "variable": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_53": {
                "input": {
                    "value": "D.mul(-g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "unique_126": {
                "input": {
                    "value": "d_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_e[y_e == y_c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_149": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/adult_loader.py": {
        "torch": {
            "cat_70": {
                "variable": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "training_list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "training_list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "train_spur",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "training_list_spur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "train_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "train_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_99": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_out_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_103": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_train_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "domain_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "domain_spur",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_spur.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_51": {
                "input": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(data_dir + domain + '_' + self.data_case + '_label.pt').long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/chestxray_loader.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_100": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_104": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "domain_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_image.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "domain_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_image_org.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_54": {
                "input": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(data_dir + domain + '_' + self.data_case + '_label.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/chestxray_loader_aug.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "data_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img_org",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_111": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_115": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "domain_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_image.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_53": {
                "variable": {
                    "value": "domain_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_image_org.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_63": {
                "input": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(data_dir + domain + '_' + self.data_case + '_label.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/chestxray_loader_match_eval.py": {
        "torch": {
            "cat_90": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img['aug'] + list_img['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels['aug'] + list_labels['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_123": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.training_list_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "domain_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_image.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "domain_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_image_org.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + domain + '_' + self.data_case + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_63": {
                "input": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(data_dir + domain + '_' + self.data_case + '_label.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_64": {
                "input": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(data_dir + domain + '_' + self.data_case + '_label.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/data_gen_domainbed.py": {
        "torch": {}
    },
    "data/data_gen_mnist.py": {
        "torch": {
            "cat_154": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_obj_train.data, data_obj_test.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_obj_train.targets, data_obj_test.targets)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "mnist_img_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mnist_size, 3, img_w, img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "mnist_img_rot_org",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mnist_size, 3, img_w, img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "mnist_img_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mnist_size, img_w, img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "mnist_img_rot_org",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mnist_size, img_w, img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "mnist_img_rot_org",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((mnist_size, 3, img_w, img_h))",
                            "Call"
                        ],
                        [
                            "torch.zeros((mnist_size, img_w, img_h))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_dir + '_org_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((data_obj_train.targets, data_obj_test.targets))",
                            "Call"
                        ],
                        [
                            "torch.cat((data_obj_train.targets, data_obj_test.targets))",
                            "Call"
                        ],
                        [
                            "labels[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "save_dir + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_obj_train.data, data_obj_test.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_obj_train.targets, data_obj_test.targets)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_183": {
                "seed": {
                    "value": "seed * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "mnist_img_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((mnist_size, 3, img_w, img_h))",
                            "Call"
                        ],
                        [
                            "torch.zeros((mnist_size, img_w, img_h))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_dir + '_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_185": {
                "seed": {
                    "value": "seed * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/data_loader.py": {
        "torch": {}
    },
    "data/mnist_loader.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_93": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_97": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_org_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/mnist_loader_match_eval.py": {
        "torch": {
            "cat_82": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img['aug'] + list_img['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels['aug'] + list_labels['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_110": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_114": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.training_list_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "mnist_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_org_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/mnist_loader_match_eval_spur.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img['aug'] + list_img['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels['aug'] + list_labels['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_117": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_121": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "mnist_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_org_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/mnist_loader_spur.py": {
        "torch": {
            "cat_70": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_102": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_106": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "mnist_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_label.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "mnist_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_dir + '_org_data.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/pacs_loader.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_127": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_131": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "pacs_img_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pacs_imgs.shape[0], self.args.img_c, self.args.img_w, self.args.img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "pacs_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(domain_data.get('labels')) - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "data/pacs_loader_aug.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_121": {
                "variable": {
                    "value": "data_imgs_org",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img_org",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_150": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_154": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "pacs_img_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pacs_imgs.shape[0], self.args.img_c, self.args.img_w, self.args.img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "pacs_img_trans_org",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pacs_imgs.shape[0], self.args.img_c, self.args.img_w, self.args.img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "pacs_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(domain_data.get('labels')) - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "data/pacs_loader_match_eval.py": {
        "torch": {
            "cat_121": {
                "variable": {
                    "value": "data_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_img['aug'] + list_img['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels['aug'] + list_labels['org']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_150": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "out_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_classes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_154": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.training_list_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "pacs_img_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pacs_imgs.shape[0], self.args.img_c, self.args.img_w, self.args.img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "pacs_img_trans_org",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pacs_imgs.shape[0], self.args.img_c, self.args.img_w, self.args.img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "pacs_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(domain_data.get('labels')) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "data": {
                    "value": "pacs_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(domain_data.get('labels')) - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "data/slab_loader.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "data_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_126": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_130": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.list_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(num_samples, spur_prob, slab_noise, total_slabs, data_case, seed, mask_linear)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(num_samples, spur_prob, slab_noise, total_slabs, data_case, seed, mask_linear)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/slab_loader_spur.py": {
        "torch": {
            "cat_116": {
                "variable": {
                    "value": "data_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "data_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_137": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(num_samples, spur_prob, slab_noise, total_slabs, data_case, seed, mask_linear)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(num_samples, spur_prob, slab_noise, total_slabs, data_case, seed, mask_linear)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_gen_syn.py": {
        "torch": {}
    },
    "evaluation/base_eval.py": {
        "torch": {
            "cat_179": {
                "variable": {
                    "value": "final_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "final_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_145": {
                "variable": {
                    "value": "self.sms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "self.sm_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "self.save_path + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_232": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_236": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(out, y_e.long()).to(self.cuda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "input": {
                    "value": "x_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x_e)",
                            "Call"
                        ],
                        [
                            "x_e[torch.randperm(x_e.size()[0])]",
                            "Subscript"
                        ],
                        [
                            "x_e.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "x_e[torch.randperm(x_e.size()[0])]",
                            "Subscript"
                        ],
                        [
                            "x_e.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "x_e.to(self.cuda)",
                            "Call"
                        ],
                        [
                            "x_e",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "w_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sms[0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_169": {
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_187": {
                "n": {
                    "value": "x_e.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward(x_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_238": {
                "input": {
                    "value": "torch.argmax(out, dim=1) == y_e",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cross_entropy_236": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.forward(x_e), dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.forward(x_e), dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_238": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.forward(x_e), dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.forward(x_e), dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward(x_e)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/feat_eval.py": {
        "torch": {
            "stack_44": {
                "variable": {
                    "value": "data_match_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_match_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(data_match_tensor)",
                            "Call"
                        ],
                        [
                            "self.get_match_function_batch(batch_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_45": {
                "variable": {
                    "value": "label_match_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_match_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(label_match_tensor)",
                            "Call"
                        ],
                        [
                            "self.get_match_function_batch(batch_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "label_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_match.flatten(start_dim=0, end_dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(feat_match, total_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "wasserstein_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_41": {
                "tensors": {
                    "value": "data_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "label_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_105": {
                "tensor": {
                    "value": "feat_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(data_match)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(feat_match, total_domains))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "total_domains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.train_dataset['total_domains']",
                            "Subscript"
                        ],
                        [
                            "self.val_dataset['total_domains']",
                            "Subscript"
                        ],
                        [
                            "self.test_dataset['total_domains']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_116": {
                "input": {
                    "value": "(feat_match[:, d_i, :] - feat_match[:, d_j, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "torch.abs(feat_match[:, d_i, :] - feat_match[:, d_j, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "1.0 - cosine_similarity(feat_match[:, d_i, :], feat_match[:, d_j, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "feat_match[:, d_i, :] - feat_match[:, d_j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/match_eval.py": {
        "torch": {}
    },
    "evaluation/per_domain_acc.py": {
        "torch": {
            "argmax_54": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(out, y_e.long()).to(self.cuda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_59": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_e)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_e.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.argmax(out_c, dim=1) == y_c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_67": {
                "input": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/slab_feat_eval.py": {
        "torch": {
            "mm_29": {
                "variable": {
                    "value": "sim_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / torch.max(a_n, eps * torch.ones_like(a_n))",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "a_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.norm(dim=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_28": {
                "input": {
                    "value": "b_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.norm(dim=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1).to(self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_27": {
                "input": {
                    "value": "a_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.norm(dim=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "b_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.norm(dim=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unique_80": {
                "variable": {
                    "value": "match_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_e[indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_cache_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_82": {
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "(x1 - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "sim_matrix(x1, x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_98": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/t_sne.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "feat_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "label_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label_all).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "domain_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "domain_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(domain_all).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_63": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_64": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/alexnet.py": {
        "torch": {
            "Sequential_38": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4)), ('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout()), ('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout()), ('fc8', nn.Linear(4096, num_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.getenv('PT_DATA_DIR') + '/pacs/alexnet_caffe.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/t-dimaha/RobustDG/robustdg/data/datasets/pacs/alexnet_caffe.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_41": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_42": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_46": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/densenet.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "models/domain_bed_mnist.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_27": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_30": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/fc.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.rep_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp_dim, inp_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.fc_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/lenet.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.predict_conv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.predict_fc_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(16 * 5 * 5, 120)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "variable"
                        ],
                        [
                            "classes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "os.getenv('PT_DATA_DIR') + '/checkpoints/resnet18-5c106cde.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "os.getenv('PT_DATA_DIR') + '/checkpoints/resnet50-19c8e357.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/slab.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.feat_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inp_shape, self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_dim, self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_dim, self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "self.inp_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/match_function.py": {
        "torch": {
            "rand_36": {
                "variable": {
                    "value": "data[key][label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(val_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "data[key][idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(val_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_38": {
                "variable": {
                    "value": "data[key][obj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(val_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "data[key][data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(val_dim, args.img_c, args.img_w, args.img_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_75": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_e, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "variable": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(d_e, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "data[key][data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(val_dim, args.slab_data_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_171": {
                "variable": {
                    "value": "base_feat_data_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base_feat_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_data[base_domain_idx]['data'][indices_base]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "base_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(base_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_181": {
                "variable": {
                    "value": "feat_x_data_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feat_x_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_data[domain_idx]['data'][indices_curr]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_218": {
                "variable": {
                    "value": "ws_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(feat_x - base_feat[idx]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_219": {
                "variable": {
                    "value": "(sort_val, sort_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ws_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((feat_x - base_feat[idx]) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/ensemble.py": {
        "torch": {
            "Linear_79": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes * len(self.models)",
                            "BinOp"
                        ],
                        [
                            "self.num_classes * len(self.models)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs.reshape(outs.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs.reshape(outs.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs.reshape(outs.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs.reshape(outs.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs.reshape(outs.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs.reshape(outs.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "[m(x) for m in self.models]",
                            "ListComp"
                        ],
                        [
                            "[F.softmax(o, dim=1) for o in outs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "dataset": {
                    "value": "TensorDataset(X, Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs or dl.batch_size",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_67": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_54": {
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/gendata.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "tr_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X_tr, Y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nw",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pm",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_17": {
                "variable": {
                    "value": "te_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X_tr, Y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nw",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pm",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_15": {
                "*tensors": {
                    "value": "X_tr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_17": {
                "*tensors": {
                    "value": "X_tr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(size=(N, dim))",
                            "Call"
                        ],
                        [
                            "X * scale",
                            "BinOp"
                        ],
                        [
                            "_get_random_data(N, dim, width if scale_noise else 1.0)",
                            "Call"
                        ],
                        [
                            "X[P, :]",
                            "Subscript"
                        ],
                        [
                            "_get_random_data(N, dim, width if scale_noise else 1.0)",
                            "Call"
                        ],
                        [
                            "X[P, :]",
                            "Subscript"
                        ],
                        [
                            "X[P, :]",
                            "Subscript"
                        ],
                        [
                            "X[P, :]",
                            "Subscript"
                        ],
                        [
                            "X.dot(W)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_21": {
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice([0, 1], size=N)",
                            "Call"
                        ],
                        [
                            "_get_random_data(N, dim, width if scale_noise else 1.0)",
                            "Call"
                        ],
                        [
                            "Y[P]",
                            "Subscript"
                        ],
                        [
                            "_get_random_data(N, dim, width if scale_noise else 1.0)",
                            "Call"
                        ],
                        [
                            "Y[P]",
                            "Subscript"
                        ],
                        [
                            "Y[P]",
                            "Subscript"
                        ],
                        [
                            "Y[P]",
                            "Subscript"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_237": {
                "variable": {
                    "value": "X[idx_n_inner, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_239": {
                "variable": {
                    "value": "X[idx_n_outer, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_247": {
                "variable": {
                    "value": "X[idx_p_ctr, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_249": {
                "variable": {
                    "value": "X[idx_p_sid, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_181": {
                "variable": {
                    "value": "X[idx_n, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_189": {
                "variable": {
                    "value": "X[idx_p_ctr, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_193": {
                "variable": {
                    "value": "X[idx_p_sid, coord]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/gpu_utils.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device if torch.cuda.is_available() and device_id is not None else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_cached_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_15": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/mnistcifar_utils.py": {
        "torch": {}
    },
    "utils/scripts/ptb_utils.py": {
        "torch": {
            "argmax_23": {
                "input": {
                    "value": "model(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_like_144": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "xb.to(self.device)",
                            "Call"
                        ],
                        [
                            "xb.cpu()",
                            "Call"
                        ],
                        [
                            "xb.to(self.device)",
                            "Call"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_152": {
                "variable": {
                    "value": "self.delta.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.B[0] - xb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_220": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "xb.to(self.device)",
                            "Call"
                        ],
                        [
                            "xb.cpu()",
                            "Call"
                        ],
                        [
                            "xb.to(self.device)",
                            "Call"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_56": {
                "variable": {
                    "value": "yh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xba).detach()",
                            "Call"
                        ],
                        [
                            "model(xb + max_delta)",
                            "Call"
                        ],
                        [
                            "model(xb + delta)",
                            "Call"
                        ],
                        [
                            "self._get_loss(xb, yb, model, get_scores=True)",
                            "Call"
                        ],
                        [
                            "model(xb + self.delta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_100": {
                "variable": {
                    "value": "max_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.CrossEntropyLoss(reduction='none')(out, yb)",
                            "Call"
                        ],
                        [
                            "torch.max(max_loss, all_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_81": {
                "input": {
                    "value": "xb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "xb.to(self.device)",
                            "Call"
                        ],
                        [
                            "xb.cpu()",
                            "Call"
                        ],
                        [
                            "xb.to(self.device)",
                            "Call"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ],
                        [
                            "xb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_114": {
                "variable": {
                    "value": "yh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xba).detach()",
                            "Call"
                        ],
                        [
                            "model(xb + max_delta)",
                            "Call"
                        ],
                        [
                            "model(xb + delta)",
                            "Call"
                        ],
                        [
                            "self._get_loss(xb, yb, model, get_scores=True)",
                            "Call"
                        ],
                        [
                            "model(xb + self.delta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_153": {
                "input": {
                    "value": "self.B[1] - xb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_89": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_161": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xba).detach()",
                            "Call"
                        ],
                        [
                            "model(xb + max_delta)",
                            "Call"
                        ],
                        [
                            "model(xb + delta)",
                            "Call"
                        ],
                        [
                            "self._get_loss(xb, yb, model, get_scores=True)",
                            "Call"
                        ],
                        [
                            "model(xb + self.delta)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dl",
                            "variable"
                        ],
                        [
                            "yb.to(self.device)",
                            "Call"
                        ],
                        [
                            "yb.cpu()",
                            "Call"
                        ],
                        [
                            "yb.to(self.device)",
                            "Call"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ],
                        [
                            "yb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_167": {
                "variable": {
                    "value": "rand_yb",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(yb),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_96": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/scripts/synth_models.py": {
        "torch": {
            "Sequential_157": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lin_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool1d_78": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.maxpool_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "variable": {
                    "value": "self.ih_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.hh_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.hh_convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_channels * fc_idim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_odim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "*args": {
                    "value": "nn.Linear(input_dim, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "self.input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.fsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "next(self.strides)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_137": {
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_145": {
                "p": {
                    "value": "input_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_149": {
                "num_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_83": {
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_120": {
                "kernel_size": {
                    "value": "self.avgpool_ksize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "self.outch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.fsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "next(self.strides)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_154": {
                "num_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_125": {
                "kernel_size": {
                    "value": "self.avgpool_ksize",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/slab_data.py": {
        "torch": {}
    }
}