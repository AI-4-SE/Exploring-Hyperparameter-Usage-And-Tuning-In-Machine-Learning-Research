{
    "implementation/src/ltag/datasets/manager.py": {
        "sklearn": {
            "train_test_split_255": {
                "variable": {
                    "value": "outer_split",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[idxs]",
                            "Subscript"
                        ],
                        [
                            "targets[idxs]",
                            "Subscript"
                        ],
                        [
                            "targets[idxs]",
                            "Subscript"
                        ],
                        [
                            "targets[idxs]",
                            "Subscript"
                        ],
                        [
                            "targets[idxs]",
                            "Subscript"
                        ],
                        [
                            "targets[idxs]",
                            "Subscript"
                        ],
                        [
                            "targets[idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "self.holdout_test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_268": {
                "variable": {
                    "value": "(train_i_split, val_i_split)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_o_split",
                    "type": "variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "train_o_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[train_o_split]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "self.holdout_test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_303": {
                "variable": {
                    "value": "(train_i_split, val_i_split)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_ok_split",
                    "type": "variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "train_ok_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[train_ok_split]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "self.holdout_test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "implementation/src/ltag/models/kernel.py": {
        "sklearn": {
            "SVC_15": {
                "variable": {
                    "value": "self.svm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SVR_18": {
                "variable": {
                    "value": "self.svm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/playground.py": {
        "sklearn": {},
        "tensorflow": {
            "Adam_37": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0007",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0007",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/chaining/model.py": {
        "tensorflow": {
            "Model_13": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "implementation/src/ltag/datasets/utils.py": {
        "tensorflow": {
            "constant_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.ones((g.order(), 1)) for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "tf.ragged.constant(x)",
                            "Call"
                        ],
                        [
                            "[[f for (_, f) in g.nodes(data='features')] for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "[[np.concatenate((I_n[data['label'] - 1], data.get('features', n_zero))) for (_, data) in g.nodes(data=True)] for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "x.to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "e[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_37": {
                "variable": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nx.to_numpy_array(g) for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "tf.ragged.constant(adjs)",
                            "Call"
                        ],
                        [
                            "adjs.to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(adjs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_dense_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.ones((g.order(), 1)) for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "tf.ragged.constant(x)",
                            "Call"
                        ],
                        [
                            "[[f for (_, f) in g.nodes(data='features')] for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "[[np.concatenate((I_n[data['label'] - 1], data.get('features', n_zero))) for (_, data) in g.nodes(data=True)] for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "x.to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "e[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_dense_46": {
                "variable": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nx.to_numpy_array(g) for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "tf.ragged.constant(adjs)",
                            "Call"
                        ],
                        [
                            "adjs.to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(adjs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_54": {
                "value": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.ones((g.order(), 1)) for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "tf.ragged.constant(x)",
                            "Call"
                        ],
                        [
                            "[[f for (_, f) in g.nodes(data='features')] for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "[[np.concatenate((I_n[data['label'] - 1], data.get('features', n_zero))) for (_, data) in g.nodes(data=True)] for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "x.to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "e[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_51": {
                "x": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nx.to_numpy_array(g) for g in graphs]",
                            "ListComp"
                        ],
                        [
                            "tf.ragged.constant(adjs)",
                            "Call"
                        ],
                        [
                            "adjs.to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(adjs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "n_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g.order() for g in graphs]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_435": {
                "dims": {
                    "value": "[None, *y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_448": {
                "dims": {
                    "value": "[None, *y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_460": {
                "dims": {
                    "value": "[None, *y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_429": {
                "dims": {
                    "value": "[None, dim_wl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_430": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_431": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_432": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_433": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_434": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_443": {
                "dims": {
                    "value": "[None, dim_wl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_444": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_445": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_446": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_447": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_455": {
                "dims": {
                    "value": "[None, dim_wl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_456": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_457": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_458": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_459": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/evaluation/evaluate.py": {
        "tensorflow": {
            "TensorBoard_54": {
                "variable": {
                    "value": "tb",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir_base / f'{t}{label}/'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "write_images": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EarlyStopping_58": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "loss if val_ds is None else val_loss",
                    "type": "IfExp",
                    "possible_values": []
                },
                "patience": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "patience",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "min_delta": {
                    "value": "stopping_min_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "stopping_min_delta",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "restore_best_weights": {
                    "value": "restore_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "restore_best",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clear_session_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/evaluation/model_factories.py": {
        "tensorflow": {
            "Adam_41": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "implementation/src/ltag/layers/DenseLayer.py": {
        "tensorflow": {}
    },
    "implementation/src/ltag/layers/dense/AvgEdgePooling.py": {
        "tensorflow": {
            "reduce_sum_19": {
                "variable": {
                    "value": "Y_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_20": {
                "variable": {
                    "value": "n_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(n * n, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_no_nan_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Y, axis=(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(n * n, axis=-1), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_20": {
                "input": {
                    "value": "n * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/dense/AvgVertPooling.py": {
        "tensorflow": {
            "shape_21": {
                "variable": {
                    "value": "Y_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * n_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_27": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.math.divide_no_nan(tf.transpose(tf.reduce_sum(Y, 1)), tf.cast(n, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_no_nan_28": {
                "x": {
                    "value": "tf.transpose(tf.reduce_sum(Y, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(n, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "a": {
                    "value": "tf.reduce_sum(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * n_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/dense/EdgeFeaturePreparation.py": {
        "tensorflow": {
            "matrix_transpose_32": {
                "variable": {
                    "value": "X_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_33": {
                "variable": {
                    "value": "X_d",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "X_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matrix_transpose(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "X_e",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(X_t)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "A_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(A)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "AX_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X_e, A_e]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_43": {
                "variable": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_dense_29": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_dense_30": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_dense_41": {
                "variable": {
                    "value": "AX_e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "AX_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X_e, A_e], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.sparse.from_dense(AX_e)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "implementation/src/ltag/layers/dense/GCNLayer.py": {
        "tensorflow": {
            "get_18": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_20": {
                "variable": {
                    "value": "self.k_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "k_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'sigmoid'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "serialize_26": {
                "variable": {
                    "value": "base_config[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_28": {
                "variable": {
                    "value": "base_config[k_act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.k_act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_56": {
                "variable": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_57": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "X_dim[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "X_dim[:-2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_69": {
                "variable": {
                    "value": "XW",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.linalg.matmul(X, self.W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.W_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "XWA",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "AI",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A * A_filter + Id",
                            "BinOp"
                        ],
                        [
                            "A + Id",
                            "BinOp"
                        ],
                        [
                            "ops.normalize_mat(AI)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "XW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.linalg.matmul(X, self.W), self.W_bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_60": {
                "variable": {
                    "value": "XK",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.linalg.matmul(X, self.K)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.K_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "A_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(XK, XK, adjoint_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "XK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.linalg.matmul(X, self.K), self.K_bias)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "XK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.linalg.matmul(X, self.K), self.K_bias)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/dense/MaxVertPooling.py": {
        "tensorflow": {
            "reduce_max_20": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/dense/WL2GCNLayer.py": {
        "tensorflow": {
            "get_21": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "serialize_30": {
                "variable": {
                    "value": "base_config[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "XW",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "XW_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.wl2_convolution_dense(X, self.local_hash)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_prop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_65": {
                "variable": {
                    "value": "XW_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "XW + XW_prop",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.W_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl1/GINLayer.py": {
        "tensorflow": {
            "get_21": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_23": {
                "variable": {
                    "value": "self.W_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "W_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_24": {
                "variable": {
                    "value": "self.b_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "b_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "serialize_31": {
                "variable": {
                    "value": "base_config[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "X_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.gin_convolution_compact.python_function(X, ref_a, ref_b)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "X_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X_agg, self.W_hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X_hid, self.b_hidden)",
                            "Call"
                        ],
                        [
                            "self.act(X_hid)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_74": {
                "variable": {
                    "value": "X_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X_agg, self.W_hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X_hid, self.b_hidden)",
                            "Call"
                        ],
                        [
                            "self.act(X_hid)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.b_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_79": {
                "variable": {
                    "value": "X_out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X_hid, self.W_out)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X_out, self.b_out)",
                            "Call"
                        ],
                        [
                            "self.act(X_out)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.b_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl2/AvgPooling.py": {
        "tensorflow": {
            "boolean_mask_29": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(Y, vert_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "vert_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_in[:, 0] == 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_30": {
                "variable": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, vert_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "vert_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_in[:, 0] == 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "unsorted_segment_mean_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(Y, vert_mask)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, vert_mask)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v_count)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_37": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(Y, vert_mask)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, vert_mask)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v_count)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl2/CWL2GCNLayer.py": {
        "tensorflow": {
            "get_22": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_23": {
                "variable": {
                    "value": "self.local_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "local_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_28": {
                "variable": {
                    "value": "self.W_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "W_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_29": {
                "variable": {
                    "value": "self.W_prop_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "W_prop_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_30": {
                "variable": {
                    "value": "self.W_back_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "W_back_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_31": {
                "variable": {
                    "value": "self.b_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "b_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_32": {
                "variable": {
                    "value": "self.b_prop_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "b_prop_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "serialize_38": {
                "variable": {
                    "value": "base_config[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_39": {
                "variable": {
                    "value": "base_config[local_act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.local_act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_44": {
                "variable": {
                    "value": "base_config[W_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.W_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_45": {
                "variable": {
                    "value": "base_config[W_prop_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.W_prop_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_46": {
                "variable": {
                    "value": "base_config[W_back_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.W_back_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_47": {
                "variable": {
                    "value": "base_config[b_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.b_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_48": {
                "variable": {
                    "value": "base_config[b_prop_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.b_prop_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "XW",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "XW_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_prop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "XW_back",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_back",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_118": {
                "variable": {
                    "value": "XW_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "XW + X_conv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_110": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_a + X_b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(S, self.b_prop)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.b_prop",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl2/K2GNNLayer.py": {
        "tensorflow": {
            "get_20": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_23": {
                "variable": {
                    "value": "self.W_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "W_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_24": {
                "variable": {
                    "value": "self.W_prop_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "W_prop_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_25": {
                "variable": {
                    "value": "self.b_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "b_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "serialize_31": {
                "variable": {
                    "value": "base_config[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_34": {
                "variable": {
                    "value": "base_config[W_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.W_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_35": {
                "variable": {
                    "value": "base_config[W_prop_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.W_prop_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_36": {
                "variable": {
                    "value": "base_config[b_regularizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.b_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "XW",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "XW_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_prop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_80": {
                "variable": {
                    "value": "XW_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "XW + X_conv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl2/SagPooling.py": {
        "tensorflow": {
            "exp_34": {
                "variable": {
                    "value": "Y_att",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(Y_att)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_48": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * Y_att",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(Y, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Y_att[:, 0] >= self.att_threshold",
                            "Compare"
                        ],
                        [
                            "vert_mask",
                            "variable"
                        ],
                        [
                            "mask & vert_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_49": {
                "variable": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Y_att[:, 0] >= self.att_threshold",
                            "Compare"
                        ],
                        [
                            "vert_mask",
                            "variable"
                        ],
                        [
                            "mask & vert_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsorted_segment_mean_54": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * Y_att",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(Y, mask)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, mask)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v_count)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * Y_att",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(Y, mask)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, mask)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v_count)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_57": {
                "variable": {
                    "value": "y_att",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(Y_att)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(e_map, mask)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v_count)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_51": {
                "input": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl2/SortPooling.py": {
        "tensorflow": {
            "squeeze_30": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(Y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "segment_ids_to_row_splits_32": {
                "variable": {
                    "value": "row_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v_count)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_35": {
                "variable": {
                    "value": "k_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.k_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(Y_d)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_37": {
                "variable": {
                    "value": "(Y_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_r.to_tensor(default_value=-np.inf)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.minimum(self.k_pool, tf.shape(Y_d)[-1])",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.W[0:k_pool]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Y_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.is_inf(Y_top), 0.0, Y_top) * W",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_40": {
                "condition": {
                    "value": "tf.math.is_inf(Y_top)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "Y_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_sort[:, 0:k_pool]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_35": {
                "input": {
                    "value": "Y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_r.to_tensor(default_value=-np.inf)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_40": {
                "x": {
                    "value": "Y_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_sort[:, 0:k_pool]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "implementation/src/ltag/layers/wl2/WL2GCNLayer.py": {
        "tensorflow": {
            "get_23": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "serialize_33": {
                "variable": {
                    "value": "base_config[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "XW",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "XW_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.wl2_convolution_compact(X, ref_a, ref_b, backref, self.local_hash)",
                            "Call"
                        ],
                        [
                            "ops.wl2_convolution(X, ref_a, ref_b, self.local_hash)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_prop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_73": {
                "variable": {
                    "value": "XW_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "XW + XW_prop",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.W_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/models/gnn.py": {
        "tensorflow": {
            "Input_17": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_18": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_19": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_25": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_26": {
                "variable": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_27": {
                "variable": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_28": {
                "variable": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "e_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_29": {
                "variable": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_35": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_36": {
                "variable": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_37": {
                "variable": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_38": {
                "variable": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "backref",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_39": {
                "variable": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "e_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_40": {
                "variable": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_46": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_47": {
                "variable": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_48": {
                "variable": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "backref",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_49": {
                "variable": {
                    "value": "e_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "e_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_50": {
                "variable": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_56": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_57": {
                "variable": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_58": {
                "variable": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_59": {
                "variable": {
                    "value": "v_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_60": {
                "variable": {
                    "value": "v_count",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "X_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X, X_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.Input(shape=(None, in_dim), name='X', sparse=sparse)",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(None,), dtype=tf.float32, name='X')",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(None,), dtype=tf.float32, name='X')",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(None,), dtype=tf.float32, name='X')",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(None,), dtype=tf.float32, name='X')",
                            "Call"
                        ],
                        [
                            "h[0]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "implementation/src/ltag/ops.py": {
        "tensorflow": {
            "reduce_sum_8": {
                "variable": {
                    "value": "diags",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_9": {
                "variable": {
                    "value": "diags_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(M, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_10": {
                "variable": {
                    "value": "diags_norm_fixed",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_finite(diags_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "diags_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(diags, -0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(tf.shape(diags_norm))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_13": {
                "variable": {
                    "value": "D_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "diags_norm_fixed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.is_finite(diags_norm), diags_norm, tf.zeros(tf.shape(diags_norm)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_14": {
                "a": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "D_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(diags_norm_fixed)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_20": {
                "variable": {
                    "value": "vec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(n, maxlen=max_n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "vec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(n, maxlen=max_n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "m_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec_mask",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sequence_mask(n, maxlen=max_n), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sequence_mask(n, maxlen=max_n), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "variable": {
                    "value": "m_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec_mask",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sequence_mask(n, maxlen=max_n), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sequence_mask(n, maxlen=max_n), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.linalg.matmul(m_1, m_2), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_35": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_sum(AX_e, axis=-1) == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_48": {
                "variable": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_51": {
                "variable": {
                    "value": "X_b_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n], X_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_53": {
                "variable": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "X_b_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n], X_shape], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(X, X_b_shape)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "X_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(X, X_b_shape)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 3, 2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_64": {
                "variable": {
                    "value": "X_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_65": {
                "variable": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "variable": {
                    "value": "X_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agg(X_a, X_b)",
                            "Call"
                        ],
                        [
                            "agg(X_a, X_b, X_back)",
                            "Call"
                        ],
                        [
                            "agg(X_a, X_b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_73": {
                "variable": {
                    "value": "X_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_74": {
                "variable": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_81": {
                "variable": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_82": {
                "variable": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_83": {
                "variable": {
                    "value": "X_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ]
                    ]
                },
                "updates": {
                    "value": "X_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agg(X_a, X_b)",
                            "Call"
                        ],
                        [
                            "agg(X_a, X_b, X_back)",
                            "Call"
                        ],
                        [
                            "agg(X_a, X_b)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_89": {
                "variable": {
                    "value": "X_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_91": {
                "variable": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_93": {
                "variable": {
                    "value": "X_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ]
                    ]
                },
                "updates": {
                    "value": "X_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, ref_a, axis=0, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_a, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_99": {
                "variable": {
                    "value": "X_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_102": {
                "variable": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_104": {
                "variable": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ],
                        [
                            "ref_a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ],
                        [
                            "ref_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_22": {
                "input": {
                    "value": "vec_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec_mask",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sequence_mask(n, maxlen=max_n), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sequence_mask(n, maxlen=max_n), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "variable": {
                    "value": "mask_p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "tf.linalg.matmul(mask_p, mask)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reduce_sum(AX_e, axis=-1) == 0, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_44": {
                "input": {
                    "value": "tf.where(mask_p == 0, 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "X_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agg(X_1, X_2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_76": {
                "variable": {
                    "value": "X_back",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "backref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(backref, axis=-1)",
                            "Call"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ],
                        [
                            "backref",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_finite_11": {
                "x": {
                    "value": "diags_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(diags, -0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "shape": {
                    "value": "tf.shape(diags_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_20": {
                "lengths": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_shape[-2]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_n",
                            "Method Argument"
                        ],
                        [
                            "max_n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_26": {
                "lengths": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_shape[-2]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_n",
                            "Method Argument"
                        ],
                        [
                            "max_n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_29": {
                "input": {
                    "value": "tf.linalg.matmul(m_1, m_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_44": {
                "condition": {
                    "value": "mask_p == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scatter_nd_109": {
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(ref_b, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "X_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, ref_a, axis=0, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_a, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_12": {
                "input": {
                    "value": "diags_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(diags, -0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_29": {
                "a": {
                    "value": "m_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(vec_mask, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "m_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(vec_mask, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "AX_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AX_e",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_108": {
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(ref_a, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "X_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(X, X_b_shape)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, ref_b, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}