{
    "classifier/engine.py": {
        "tensorflow": {
            "placeholder_68": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 55]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_76": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_84": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_89": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 55]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_157": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_161": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_167": {
                "variable": {
                    "value": "merge",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_eager_execution_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_logger_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_eager_execution_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_logger_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_166": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=Y), name='loss')",
                            "Call"
                        ],
                        [
                            "loss + l2_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=Y), name='loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_75": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGG16(X, keep_prob)",
                            "Call"
                        ],
                        [
                            "VGG16(X, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_84": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_156": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGG16(X, keep_prob)",
                            "Call"
                        ],
                        [
                            "VGG16(X, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_161": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_163": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/networks.py": {
        "tensorflow": {
            "conv2d_18": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 64, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_21": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool2, 128, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_27": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv3, 128, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv4, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool4, 256, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv5, 256, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_34": {
                "variable": {
                    "value": "pool7",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv6, 256, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv7, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool7, 512, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv8, 512, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_41": {
                "variable": {
                    "value": "pool10",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv9, 512, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "conv11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv10, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "conv12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool10, 512, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "conv13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv11, 512, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_48": {
                "variable": {
                    "value": "pool13",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv12, 512, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_51": {
                "variable": {
                    "value": "full_in",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv13, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_54": {
                "variable": {
                    "value": "full1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "full_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(pool13)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "full2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "full1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=full_in, units=4096, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "full2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=full1, units=4096, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/utils.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_23": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "debug.py": {
        "tensorflow": {
            "placeholder_25": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 256, 256, 55]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_33": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_41": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_45": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "old_train_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./template data/trained_model/epoch10/model'",
                            "str"
                        ]
                    ]
                }
            },
            "reset_default_graph_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_eager_execution_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_32": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGG16(X, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_41": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_classes], name='Y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_43": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_variable_68": {
                "variable": {
                    "value": "new_vn_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "old_train_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./template data/trained_model/epoch10/model'",
                            "str"
                        ]
                    ]
                },
                "name": {
                    "value": "tensor_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "vn.name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "vn.name.split(':')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_variable_76": {
                "variable": {
                    "value": "new_vn_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "old_train_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./template data/trained_model/epoch10/model'",
                            "str"
                        ]
                    ]
                },
                "name": {
                    "value": "new_tensor_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_name.replace('dense', 'fully_connected').replace('kernel', 'weights').replace('bias', 'biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_70": {
                "ref": {
                    "value": "vn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_exist",
                            "variable"
                        ],
                        [
                            "left",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "new_vn_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(old_train_model_dir, tensor_name)",
                            "Call"
                        ],
                        [
                            "tf.train.load_variable(old_train_model_dir, new_tensor_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_77": {
                "ref": {
                    "value": "vn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_exist",
                            "variable"
                        ],
                        [
                            "left",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "new_vn_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(old_train_model_dir, tensor_name)",
                            "Call"
                        ],
                        [
                            "tf.train.load_variable(old_train_model_dir, new_tensor_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}