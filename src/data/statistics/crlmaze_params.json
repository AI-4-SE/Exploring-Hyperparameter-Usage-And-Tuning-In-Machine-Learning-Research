{
    "src/aac_base.py": {
        "torch": {
            "zeros_80": {
                "variable": {
                    "value": "episode_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "fs_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg['fisher_sample_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg['learning_rate'][task_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "state.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_155": {
                "variable": {
                    "value": "state.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "terminal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "episode_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cfg['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_344": {
                "variable": {
                    "value": "state.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_345": {
                "variable": {
                    "value": "state.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "state.screen[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nstate.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "state.variables[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nstate.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "state.screen[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "state.variables[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(grads, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_323": {
                "obj": {
                    "value": "state_dict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(state)",
                            "Call"
                        ],
                        [
                            "torch.load(state, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "torch.load(load)",
                            "Call"
                        ],
                        [
                            "torch.load(load, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg['checkpoint_file'][:-4] + str(task_id) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_353": {
                "variable": {
                    "value": "state.screen[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "state.variables[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "state.screen[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nstate.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "state.variables[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nstate.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NormalizedState(screen=torch.Tensor(fs_size, *self.cfg['screen_size']), variables=torch.Tensor(fs_size, self.cfg['variable_num']), depth=None, labels=None)",
                            "Call"
                        ],
                        [
                            "NormalizedState(screen=None, depth=None, labels=None, variables=None)",
                            "Call"
                        ],
                        [
                            "self.cfg['load']",
                            "Subscript"
                        ],
                        [
                            "self.cfg['checkpoint_file'][:-4] + str(task_id - 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "NormalizedState(screen=None, depth=None, labels=None, variables=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_144": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NormalizedState(screen=torch.Tensor(fs_size, *self.cfg['screen_size']), variables=torch.Tensor(fs_size, self.cfg['variable_num']), depth=None, labels=None)",
                            "Call"
                        ],
                        [
                            "NormalizedState(screen=None, depth=None, labels=None, variables=None)",
                            "Call"
                        ],
                        [
                            "self.cfg['load']",
                            "Subscript"
                        ],
                        [
                            "self.cfg['checkpoint_file'][:-4] + str(task_id - 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "NormalizedState(screen=None, depth=None, labels=None, variables=None)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_332": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_334": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_74": {},
            "Tensor_75": {},
            "from_numpy_187": {
                "variable": {
                    "value": "state.screen[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "state.variables[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cfg['checkpoint_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_371": {
                "variable": {
                    "value": "state.screen[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.screen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_373": {
                "variable": {
                    "value": "state.variables[id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_state.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_303": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "artifacts/best_model.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/aac_map.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg['screen_size'][0] * cfg['frame_num']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.screen_features1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 27 * 37",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.screen_feature_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.screen_feature_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.action1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.screen_feature_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer1_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.action2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer1_size + cfg['variable_num']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg['button_num']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.batch_norm_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer1_size + cfg['variable_num']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.value1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.screen_feature_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer1_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.value2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer1_size + cfg['variable_num']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "self.batch_norm_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer1_size + cfg['variable_num']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "variable": {
                    "value": "screen_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "screen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cuda.Variable(screen, volatile=not self.training)",
                            "Call"
                        ],
                        [
                            "torch.stack(screen_batch)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "selu_56": {
                "variable": {
                    "value": "screen_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(screen_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_57": {
                "variable": {
                    "value": "screen_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(screen_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_58": {
                "variable": {
                    "value": "screen_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(screen_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_64": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.screen_features1(screen_features)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(input)",
                            "Call"
                        ],
                        [
                            "F.selu(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_67": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.action1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[action, variables]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "selu_141": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.value1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[value, variables]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_147": {
                "variable": {
                    "value": "action_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(action_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "rew",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_168": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "screen",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "screen_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "nonzero_95": {
                "variable": {
                    "value": "indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "terminal == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_108": {
                "variable": {
                    "value": "base_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg['base_model']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_184": {
                "input": {
                    "value": "self.outputs[i].value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "cuda.Variable(returns[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_201": {
                "input": {
                    "value": "torch.sum(rew, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "rew",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(self.rewards, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "screens",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/cuda.py": {
        "torch": {
            "is_available_18": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ewc_regularizer.py": {
        "torch": {
            "clamp_77": {
                "variable": {
                    "value": "self.fisher[task_id][name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fisher[task_id][name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "self.cfg['clip_value']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {}
    },
    "src/model_utils.py": {
        "torch": {
            "set_default_tensor_type_21": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}