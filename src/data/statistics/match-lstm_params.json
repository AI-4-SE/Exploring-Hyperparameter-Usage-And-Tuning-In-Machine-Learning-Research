{
    "dataset.py": {
        "torch": {
            "DataLoader_203": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SNLIDataset(self.train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "dev_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SNLIDataset(self.dev_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_224": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SNLIDataset(self.train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "dev_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SNLIDataset(self.dev_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_241": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SNLIDataset(self.test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "prem_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e[1] for e in b]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "prem",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(np.array([e[0][:prem_max_len] for e in b]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "hypo_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e[3] for e in b]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "hypo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(np.array([e[2][:hypo_max_len] for e in b]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e[4] for e in b]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.req_grad_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_170": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_208": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "config.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "model_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_189": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__103": {
                "parameters": {
                    "value": "model.req_grad_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_111": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(ex[0], ex[1], ex[2], ex[3])",
                            "Call"
                        ],
                        [
                            "model(ex[0], ex[1], ex[2], ex[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_187": {
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_144": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(ex[0], ex[1], ex[2], ex[3])",
                            "Call"
                        ],
                        [
                            "model(ex[0], ex[1], ex[2], ex[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word2vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "len(word2vec[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.w_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.w_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.w_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.w_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.lstm_prem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.embedding_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_39": {
                "variable": {
                    "value": "self.lstm_hypo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.embedding_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_40": {
                "variable": {
                    "value": "self.lstm_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2 * config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_60": {
                "variable": {
                    "value": "(_, p_idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_69": {
                "variable": {
                    "value": "packed_premise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "premise",
                    "type": "Call",
                    "possible_values": [
                        [
                            "premise.to(self.device)",
                            "Call"
                        ],
                        [
                            "premise[:, p_idxes]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(self.word_embed(premise), p=self.config.dropout_emb, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.word_embed(premise)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "premise_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(h_s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "h_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_s[:, p_idx_unsort]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sort_79": {
                "variable": {
                    "value": "(_, h_idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_88": {
                "variable": {
                    "value": "packed_hypothesis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hypothesis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hypothesis.to(self.device)",
                            "Call"
                        ],
                        [
                            "hypothesis[:, h_idxes]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(self.word_embed(hypothesis), p=self.config.dropout_emb, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.word_embed(hypothesis)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "hypothesis_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hypothesis_len[h_idx_unsort]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_91": {
                "variable": {
                    "value": "(h_t, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "h_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_t[:, h_idx_unsort]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "h_m_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "c_m_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "h_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_64": {
                "variable": {
                    "value": "premise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.word_embed(premise)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "hypothesis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.word_embed(hypothesis)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "e_kj",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(prem_max_len, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "alpha_kj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_kj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((prem_max_len, batch_size), device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "a_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(alpha_kj.t(), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "h_s.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "a_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(torch.unsqueeze(alpha_kj.t(), 1), h_s.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(a_k, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "m_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a_k, h_t_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "word2vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "variable": {
                    "value": "tanh_s_t_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_s(h_s[j]) + self.w_t(h_t_k) + self.w_m(h_m_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "input": {
                    "value": "alpha_kj.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}