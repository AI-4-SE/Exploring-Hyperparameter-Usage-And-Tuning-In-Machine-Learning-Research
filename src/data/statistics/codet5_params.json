{
    "run_clone.py": {
        "sklearn": {
            "recall_score_89": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_trues, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, 1] > best_threshold",
                            "Compare"
                        ]
                    ]
                }
            },
            "precision_score_90": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_trues, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, 1] > best_threshold",
                            "Compare"
                        ]
                    ]
                }
            },
            "f1_score_91": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_trues, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, 1] > best_threshold",
                            "Compare"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "SequentialSampler_63": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_clone_data(args, args.test_filename, pool, tokenizer, 'test', False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_clone_data(args, args.dev_filename, pool, tokenizer, 'valid', is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_clone_data(args, args.test_filename, pool, tokenizer, 'test', False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_clone_data(args, args.dev_filename, pool, tokenizer, 'valid', is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_123": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_124": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_clone_data(args, args.train_filename, pool, tokenizer, 'train', is_sample=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_126": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ],
                        [
                            "CloneModel(model, config, tokenizer, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SummaryWriter_162": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "summary_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(args.summary_dir, '/'.join(args.output_dir.split('/')[1:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_168": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_clone_data(args, args.train_filename, pool, tokenizer, 'train', is_sample=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_170": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_clone_data(args, args.train_filename, pool, tokenizer, 'train', is_sample=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_148": {
                "f": {
                    "value": "args.load_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_303": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ],
                        [
                            "CloneModel(model, config, tokenizer, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__223": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_299": {
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'checkpoint-{}/pytorch_model.bin'.format(criteria))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "configs.py": {
        "torch": {
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_117": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_135": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_120": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_137": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "TransformerDecoderLayer_29": {
                "variable": {
                    "value": "decoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "config.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerDecoder_30": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.TransformerDecoderLayer(d_model=config.hidden_size, nhead=config.num_attention_heads)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, x.size(-1) * 2)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(vec)",
                            "Call"
                        ],
                        [
                            "self.classifier(vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(vec)",
                            "Call"
                        ],
                        [
                            "self.classifier(vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_208": {
                "variable": {
                    "value": "self.lsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_177": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "first_module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "second_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_240": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_240": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_247": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, 0)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "args.load_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_205": {
                "input": {
                    "value": "torch.ones(2048, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_78": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_91": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_139": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_152": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_205": {
                "*size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_272": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_ids, beam.getCurrentState())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "[x.view(-1) for x in p] + [zero] * (self.max_length - len(p))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam.buildTargetTokens(hyp)[:self.beam_size]",
                            "Subscript"
                        ],
                        [
                            "[torch.cat([x.view(-1) for x in p] + [zero] * (self.max_length - len(p))).view(1, -1) for p in pred]",
                            "ListComp"
                        ],
                        [
                            "preds",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_282": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "run_defect.py": {
        "torch": {
            "SequentialSampler_60": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_defect_data(args, args.test_filename, pool, tokenizer, 'test', False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_defect_data(args, args.dev_filename, pool, tokenizer, 'valid', is_sample=False)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_defect_data(args, args.test_filename, pool, tokenizer, 'test', False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_defect_data(args, args.dev_filename, pool, tokenizer, 'valid', is_sample=False)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_118": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_defect_data(args, args.train_filename, pool, tokenizer, 'train', is_sample=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_120": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_152": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ],
                        [
                            "DefectModel(model, config, tokenizer, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SummaryWriter_155": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "summary_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(args.summary_dir, '/'.join(args.output_dir.split('/')[1:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_161": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_defect_data(args, args.train_filename, pool, tokenizer, 'train', is_sample=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_163": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_defect_data(args, args.train_filename, pool, tokenizer, 'train', is_sample=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "args.load_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_295": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ],
                        [
                            "DefectModel(model, config, tokenizer, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__215": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_291": {
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'checkpoint-{}/pytorch_model.bin'.format(criteria))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_gen.py": {
        "torch": {
            "SequentialSampler_50": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.test_filename, pool, tokenizer, 'test', only_src=True, is_sample=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev')",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev', only_src=True, is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.test_filename, pool, tokenizer, 'test', only_src=True, is_sample=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev')",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev', only_src=True, is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_86": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.test_filename, pool, tokenizer, 'test', only_src=True, is_sample=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev')",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev', only_src=True, is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.test_filename, pool, tokenizer, 'test', only_src=True, is_sample=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev')",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev', only_src=True, is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.test_filename, pool, tokenizer, 'test', only_src=True, is_sample=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev')",
                            "Call"
                        ],
                        [
                            "load_and_cache_gen_data(args, args.dev_filename, pool, tokenizer, 'dev', only_src=True, is_sample=True)",
                            "Call"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ],
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_179": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_or_load_gen_model(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.train_filename, pool, tokenizer, 'train')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data) if args.local_rank == -1 else DistributedSampler(train_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_187": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "summary_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(args.summary_dir, '/'.join(args.output_dir.split('/')[1:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_191": {
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.train_filename, pool, tokenizer, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_191": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_gen_data(args, args.train_filename, pool, tokenizer, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_368": {
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'checkpoint-{}/pytorch_model.bin'.format(criteria))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_280": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_297": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_340": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_multi_gen.py": {
        "torch": {
            "SequentialSampler_90": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_193": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_or_load_gen_model(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SummaryWriter_201": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "summary_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./tensorboard/{}'.format('/'.join(args.output_dir.split('/')[1:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_218": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_data_list, all_tasks)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_220": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_data_list, all_tasks)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_222": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_data_list, all_tasks)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "get_bs(cur_task, args.model_name_or_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "WORKER_NUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_data_list, all_tasks)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "get_bs(cur_task, args.model_name_or_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_367": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_513": {
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'checkpoint-{}/{}/pytorch_model.bin'.format(criteria, cur_task))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_345": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_354": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_369": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_373": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_429": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_469": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(last_output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.source_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.source_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_69": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.source_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_96": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "examples_data_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_41": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "all_target_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.target_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_44": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_target_ids)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_target_ids)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_72": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_target_ids)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_target_ids)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_99": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_target_ids)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_source_ids, all_target_ids)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.source_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "examples_data_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cache_fn)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + ('_src' if only_src else '') + data_tag)",
                            "Call"
                        ],
                        [
                            "'{}/{}.pt'.format(args.cache_path, split_tag + '_all' if args.data_num == -1 else '_%d' % args.data_num)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.cache_path, split_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_160": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "all_target_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.target_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_163": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}