{
    "cGPLVM/GP_mappings.py": {
        "torch": {
            "Parameter_48": {
                "variable": {
                    "value": "self.noise_var",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_103": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_106": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_108": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_110": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_111": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_131": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_137": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_139": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_141": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_142": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_168": {
                "variable": {
                    "value": "L_all",
                    "possible_values": []
                },
                "input": {
                    "value": "K_all",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(z, z, x, x, jitter=self.jitter) + sigma2 * torch.eye(y.size()[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_inverse_169": {
                "variable": {
                    "value": "K_all_inv",
                    "possible_values": []
                },
                "input": {
                    "value": "L_all",
                    "possible_values": [
                        [
                            "torch.cholesky(K_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_174": {
                "variable": {
                    "value": "tmp",
                    "possible_values": []
                },
                "input": {
                    "value": "K_sf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(z_star, z, x_star, x, which_kernels=which_kernels)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(z_star, z, x_star, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K_all_inv",
                    "possible_values": [
                        [
                            "torch.cholesky_inverse(L_all)",
                            "Call"
                        ],
                        [
                            "torch.inverse(self.get_K_without_noise(z, z, x, x, jitter=self.jitter) + sigma2 * torch.eye(y.size()[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_176": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "input": {
                    "value": "K_ss - torch.mm(tmp, K_sf.t())",
                    "possible_values": []
                }
            },
            "Gamma_181": {
                "variable": {
                    "value": "p_ls",
                    "possible_values": []
                },
                "concentration": {
                    "value": "50.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "10.0",
                    "possible_values": []
                }
            },
            "sum_181": {
                "variable": {
                    "value": "p_ls",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Gamma_182": {
                "variable": {
                    "value": "p_var",
                    "possible_values": []
                },
                "concentration": {
                    "value": "1.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "p_var",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.ls",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0 * torch.ones(2)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_200": {
                "variable": {
                    "value": "self.var",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_201": {
                "variable": {
                    "value": "self.noise_var",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "zx",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "zx2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z2, x2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_237": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_240": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_242": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_244": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_245": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_264": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_270": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_272": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_274": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_275": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_317": {
                "variable": {
                    "value": "self.ls",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.var",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.noise_var",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "linspace_327": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_365": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_368": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_370": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_372": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_373": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_393": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_395": {
                "variable": {
                    "value": "K_all_inv",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_K_without_noise(z, z, x, x, jitter=self.jitter) + sigma2 * torch.eye(y.size()[0])",
                    "possible_values": []
                }
            },
            "mm_404": {
                "variable": {
                    "value": "tmp",
                    "possible_values": []
                },
                "input": {
                    "value": "K_sf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(z_star, z, x_star, x, which_kernels=which_kernels)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(z_star, z, x_star, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K_all_inv",
                    "possible_values": [
                        [
                            "torch.cholesky_inverse(L_all)",
                            "Call"
                        ],
                        [
                            "torch.inverse(self.get_K_without_noise(z, z, x, x, jitter=self.jitter) + sigma2 * torch.eye(y.size()[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_406": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "input": {
                    "value": "K_ss - torch.mm(tmp, K_sf.t())",
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "variable": {
                    "value": "self.ls",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0 * torch.ones(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_438": {
                "variable": {
                    "value": "self.var",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_439": {
                "variable": {
                    "value": "self.noise_var",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_478": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_481": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_483": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_485": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_486": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_505": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2",
                    "possible_values": [
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ],
                        [
                            "self.get_noise_var()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_510": {
                "variable": {
                    "value": "L",
                    "possible_values": []
                },
                "input": {
                    "value": "K_uu",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, self.x_u, self.x_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, self.z_u, jitter=self.jitter, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_512": {
                "variable": {
                    "value": "AAT",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "possible_values": []
                }
            },
            "cholesky_514": {
                "variable": {
                    "value": "LB",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "possible_values": [
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ],
                        [
                            "AAT + torch.eye(self.M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_515": {
                "variable": {
                    "value": "Aerr",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(K_uf, L, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_553": {
                "variable": {
                    "value": "self.beta",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(3)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_554": {
                "variable": {
                    "value": "self.noise_var",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Normal_571": {
                "variable": {
                    "value": "log_prob",
                    "possible_values": []
                },
                "loc": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "self.intercept + self.beta[0] * z + self.beta[1] * x + self.beta[2] * z * x",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(self.get_noise_var())",
                    "possible_values": []
                }
            },
            "sum_571": {
                "variable": {
                    "value": "log_prob",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.ls",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0 * torch.ones(n_lengthscales)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.ls",
                    "possible_values": []
                },
                "data": {
                    "value": "ls_init.clone()",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "var_init",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(1 + covariate_dim), -1.0 + torch.zeros(covariate_dim)]",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.var",
                    "possible_values": []
                },
                "data": {
                    "value": "var_init",
                    "possible_values": [
                        [
                            "torch.cat([torch.ones(1 + covariate_dim), -1.0 + torch.zeros(covariate_dim)])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.var",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_var_init.clone()",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept_init",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept_init",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_322": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept_init",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_442": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_444": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept_init",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_557": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_559": {
                "variable": {
                    "value": "self.intercept",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept_init",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "isnan_94": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "triangular_solve_107": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "eye_109": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "isnan_122": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_140": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "triangular_solve_145": {
                "b": {
                    "value": "K_us",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_146": {
                "b": {
                    "value": "tmp1",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mm_147": {
                "input": {
                    "value": "tmp2.t()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_150": {
                "input": {
                    "value": "tmp2",
                    "possible_values": [
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_150": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "isnan_158": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_158": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mm_175": {
                "input": {
                    "value": "tmp",
                    "possible_values": [
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ],
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_200": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "isnan_229": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_229": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_243": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "isnan_256": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_256": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_273": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "triangular_solve_278": {
                "b": {
                    "value": "K_us",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_279": {
                "b": {
                    "value": "tmp1",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mm_280": {
                "input": {
                    "value": "tmp2.t()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_284": {
                "input": {
                    "value": "tmp2",
                    "possible_values": [
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_284": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "eye_295": {
                "n": {
                    "value": "N",
                    "possible_values": [
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Gamma_299": {
                "concentration": {
                    "value": "1.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_299": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Gamma_300": {
                "concentration": {
                    "value": "10.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_300": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_317": {
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "isnan_355": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_355": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_371": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "isnan_385": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_385": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mm_405": {
                "input": {
                    "value": "tmp",
                    "possible_values": [
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ],
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_417": {
                "n": {
                    "value": "N",
                    "possible_values": [
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Gamma_421": {
                "concentration": {
                    "value": "1.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_421": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "isnan_471": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_471": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_484": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "isnan_498": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_498": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_513": {
                "n": {
                    "value": "self.M",
                    "possible_values": []
                }
            },
            "triangular_solve_518": {
                "b": {
                    "value": "K_us",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, self.x_u, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z_star, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_519": {
                "b": {
                    "value": "tmp1",
                    "possible_values": [
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(K_us, L, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mm_520": {
                "input": {
                    "value": "tmp2.t()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_524": {
                "input": {
                    "value": "tmp2",
                    "possible_values": [
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.triangular_solve(tmp1, LB, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_524": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "eye_535": {
                "n": {
                    "value": "N",
                    "possible_values": [
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z.size()[0]",
                            "Subscript"
                        ],
                        [
                            "y.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Gamma_539": {
                "concentration": {
                    "value": "1.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_539": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_553": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "zeros_like_576": {
                "input": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "self.intercept + torch.mm(tmp2.t(), c)",
                            "BinOp"
                        ],
                        [
                            "self.intercept + torch.mm(tmp, y)",
                            "BinOp"
                        ],
                        [
                            "self.intercept + torch.mm(tmp2.t(), c)",
                            "BinOp"
                        ],
                        [
                            "self.intercept + torch.mm(tmp, y)",
                            "BinOp"
                        ],
                        [
                            "self.intercept + torch.mm(tmp2.t(), c)",
                            "BinOp"
                        ],
                        [
                            "self.intercept + self.beta[0] * z_star + self.beta[1] * x_star + self.beta[2] * z_star * x_star",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_576": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Gamma_579": {
                "concentration": {
                    "value": "1.0",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_579": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "triangular_solve_112": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "Kdiag",
                    "possible_values": [
                        [
                            "self.get_K_diag(z, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_diag(z_star, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_kernel_var().repeat(N)",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ]
                    ]
                }
            },
            "triangular_solve_138": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_143": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "eye_167": {
                "n": {
                    "value": "y.size()[0]",
                    "possible_values": []
                }
            },
            "mm_176": {
                "input": {
                    "value": "tmp",
                    "possible_values": [
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ],
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K_sf.t()",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ones_201": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "triangular_solve_241": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_246": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "Kdiag",
                    "possible_values": [
                        [
                            "self.get_K_diag(z, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_diag(z_star, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_kernel_var().repeat(N)",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ]
                    ]
                }
            },
            "triangular_solve_271": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_276": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_319": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "triangular_solve_369": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_374": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sum_381": {
                "input": {
                    "value": "Kdiag",
                    "possible_values": [
                        [
                            "self.get_K_diag(z, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_diag(z_star, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_kernel_var().repeat(N)",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_406": {
                "input": {
                    "value": "tmp",
                    "possible_values": [
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ],
                        [
                            "torch.mm(K_sf, K_all_inv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K_sf.t()",
                    "possible_values": []
                }
            },
            "ones_437": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_439": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_442": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "triangular_solve_482": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_487": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sum_494": {
                "input": {
                    "value": "Kdiag",
                    "possible_values": [
                        [
                            "self.get_K_diag(z, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_diag(z_star, x_star)",
                            "Call"
                        ],
                        [
                            "self.get_kernel_var().repeat(N)",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ff.diag()",
                            "Call"
                        ],
                        [
                            "K_ss.diag()",
                            "Call"
                        ]
                    ]
                }
            },
            "triangular_solve_511": {
                "b": {
                    "value": "K_uf",
                    "possible_values": [
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, self.x_u, x)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z)",
                            "Call"
                        ],
                        [
                            "self.get_K_without_noise(self.z_u, z, which_kernels=which_kernels)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "possible_values": [
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(K_uu)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "triangular_solve_516": {
                "b": {
                    "value": "Aerr",
                    "possible_values": [
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ],
                        [
                            "torch.mm(A, y)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_554": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "n_lengthscales",
                    "possible_values": [
                        [
                            "1 + 3 * covariate_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_43": {
                "*size": {
                    "value": "1 + covariate_dim",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "torch.log(torch.diag(LB))",
                    "possible_values": []
                }
            },
            "log_116": {
                "input": {
                    "value": "torch.diag(LB)",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "possible_values": []
                }
            },
            "diag_118": {
                "input": {
                    "value": "AAT",
                    "possible_values": [
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_250": {
                "input": {
                    "value": "torch.log(torch.diag(LB))",
                    "possible_values": []
                }
            },
            "log_250": {
                "input": {
                    "value": "torch.diag(LB)",
                    "possible_values": []
                }
            },
            "sum_251": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "possible_values": []
                }
            },
            "diag_252": {
                "input": {
                    "value": "AAT",
                    "possible_values": [
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_296": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_379": {
                "input": {
                    "value": "torch.log(torch.diag(LB))",
                    "possible_values": []
                }
            },
            "log_379": {
                "input": {
                    "value": "torch.diag(LB)",
                    "possible_values": []
                }
            },
            "sum_380": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "possible_values": []
                }
            },
            "diag_381": {
                "input": {
                    "value": "AAT",
                    "possible_values": [
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_396": {
                "n": {
                    "value": "y.size()[0]",
                    "possible_values": []
                }
            },
            "zeros_like_418": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_492": {
                "input": {
                    "value": "torch.log(torch.diag(LB))",
                    "possible_values": []
                }
            },
            "log_492": {
                "input": {
                    "value": "torch.diag(LB)",
                    "possible_values": []
                }
            },
            "sum_493": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "possible_values": []
                }
            },
            "diag_494": {
                "input": {
                    "value": "AAT",
                    "possible_values": [
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(A, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_536": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "covariate_dim",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_117": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_251": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_252": {
                "input": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_380": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_381": {
                "input": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_493": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "y[subset, :]",
                            "Subscript"
                        ],
                        [
                            "y - self.intercept",
                            "BinOp"
                        ],
                        [
                            "(y - self.intercept).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_494": {
                "input": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(Aerr, LB, upper=False)[0] / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "diag_116": {
                "input": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_250": {
                "input": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_379": {
                "input": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_492": {
                "input": {
                    "value": "LB",
                    "possible_values": [
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_571": {
                "input": {
                    "value": "self.get_noise_var()",
                    "possible_values": []
                }
            }
        }
    },
    "cGPLVM/cGPLVM.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.GP_mappings",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GP_mapping(intercept_init=Y_colmeans[j], **kwargs) for j in range(self.output_dim)]",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_like_36": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_mu",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "f_mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "f_var",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "variable": {
                    "value": "f_sd",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0001 + f_var",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.GP_mappings",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GP_mapping(intercept_init=Y_colmeans[j], **kwargs) for j in range(self.output_dim)]",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_like_121": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_mu",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "f_mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "f_var",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "variable": {
                    "value": "f_sd",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-06 + f_var",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "f_mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "f_var",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "variable": {
                    "value": "f_sd",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-06 + f_var",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.z_mu",
                    "possible_values": []
                },
                "data": {
                    "value": "z_init.clone()",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.z_logsigma",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones_like(z_init)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.z_mu",
                    "possible_values": []
                },
                "data": {
                    "value": "z_init.clone()",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.z_logsigma",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones_like(z_init)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_like_17": {
                "input": {
                    "value": "z_init",
                    "possible_values": []
                }
            },
            "ones_like_96": {
                "input": {
                    "value": "z_init",
                    "possible_values": []
                }
            },
            "ones_like_20": {
                "input": {
                    "value": "z_init",
                    "possible_values": []
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "z_init",
                    "possible_values": []
                }
            }
        }
    },
    "cGPLVM/cGPLVM_survival.py": {
        "torch": {
            "ModuleList_40": {
                "variable": {
                    "value": "self.GP_mappings",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GP_mapping(intercept_init=Y_colmeans[j], **kwargs) for j in range(self.output_dim)]",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.q_shape",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 + torch.zeros(N, 1)",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.q_logscale",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 + torch.zeros(N, 1)",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_like_63": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_mu",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_obs",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "f_mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "f_var",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "sqrt_108": {
                "variable": {
                    "value": "f_sd",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-06 + f_var",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "f_mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "f_var",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_star",
                    "possible_values": [
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ],
                        [
                            "z_star.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_dim",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "variable": {
                    "value": "f_sd",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-06 + f_var",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.z_mu",
                    "possible_values": []
                },
                "data": {
                    "value": "z_init.clone()",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.z_logsigma",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0 * torch.ones_like(z_init)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "Y.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "Y.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_like_32": {
                "input": {
                    "value": "z_init",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "Y.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "Y.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "input": {
                    "value": "self.q_shape",
                    "possible_values": []
                }
            },
            "sigmoid_136": {
                "input": {
                    "value": "self.q_logscale",
                    "possible_values": []
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "z_init",
                    "possible_values": []
                }
            }
        }
    },
    "cGPLVM/helpers.py": {
        "torch": {
            "Normal_6": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(mu)",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(mu)",
                    "possible_values": []
                }
            },
            "Normal_7": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "possible_values": []
                },
                "scale": {
                    "value": "sigma",
                    "possible_values": []
                }
            },
            "meshgrid_16": {
                "variable": {
                    "value": "(x1_s, x2_s)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[grid_x1.to(device), grid_x2.to(device)]",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "torch.distributions.kl_divergence(q, p)",
                    "possible_values": []
                }
            },
            "log_13": {
                "input": {
                    "value": "1.0 + torch.exp(x)",
                    "possible_values": []
                }
            },
            "zeros_like_6": {
                "input": {
                    "value": "mu",
                    "possible_values": []
                }
            },
            "ones_like_6": {
                "input": {
                    "value": "mu",
                    "possible_values": []
                }
            },
            "exp_13": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "a.repeat(nrow_b, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cGPLVM/helpers_survival.py": {
        "torch": {
            "Uniform_19": {
                "variable": {
                    "value": "u0",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.zeros_like(loc)",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones_like(scale)",
                    "possible_values": []
                }
            },
            "Weibull_43": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "possible_values": []
                },
                "concentration": {
                    "value": "shape",
                    "possible_values": []
                }
            },
            "Weibull_56": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "possible_values": []
                },
                "concentration": {
                    "value": "shape",
                    "possible_values": []
                }
            },
            "Uniform_60": {
                "variable": {
                    "value": "u0",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.zeros_like(scale)",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones_like(scale)",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "logp",
                    "possible_values": []
                },
                "input": {
                    "value": "q_loc",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "KL_avg",
                    "possible_values": []
                },
                "input": {
                    "value": "logq - logp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "KL",
                    "possible_values": []
                },
                "input": {
                    "value": "KL_avg",
                    "possible_values": [
                        [
                            "torch.mean(logq - logp, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_22": {
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "Phi_inverse(u) * scale + loc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Normal_28": {
                "loc": {
                    "value": "loc",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "possible_values": []
                }
            },
            "erfinv_13": {
                "input": {
                    "value": "2 * value - 1",
                    "possible_values": []
                }
            },
            "Normal_34": {
                "loc": {
                    "value": "loc",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "possible_values": []
                }
            },
            "log_34": {
                "input": {
                    "value": "F_b - F_a + 1e-08",
                    "possible_values": []
                }
            },
            "pow_39": {
                "input": {
                    "value": "x_over_lambda",
                    "possible_values": [
                        [
                            "x / scale",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "shape",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "F_b - F_a + 1e-08",
                    "possible_values": []
                }
            },
            "pow_51": {
                "input": {
                    "value": "-torch.log(1.0 - u)",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / shape",
                    "possible_values": []
                }
            },
            "isnan_71": {
                "input": {
                    "value": "logp",
                    "possible_values": [
                        [
                            "torch.zeros_like(q_loc)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_9": {
                "input": {
                    "value": "x / math.sqrt(2)",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "x_over_lambda",
                    "possible_values": [
                        [
                            "x / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "loc",
                    "possible_values": []
                }
            },
            "ones_like_19": {
                "input": {
                    "value": "scale",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "1.0 - u",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "scale",
                    "possible_values": []
                }
            },
            "ones_like_60": {
                "input": {
                    "value": "scale",
                    "possible_values": []
                }
            }
        }
    },
    "cGPLVM/kernels.py": {
        "torch": {
            "sum_8": {
                "variable": {
                    "value": "s_x",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x, 2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_8": {
                "variable": {
                    "value": "s_x",
                    "possible_values": []
                },
                "input": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "sum_9": {
                "variable": {
                    "value": "s_y",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(y, 2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_9": {
                "variable": {
                    "value": "s_y",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, -1]",
                    "possible_values": []
                }
            },
            "exp_10": {
                "input": {
                    "value": "-0.5 * (s_x + s_y - 2 * torch.mm(x, y.t()))",
                    "possible_values": []
                }
            },
            "erf_27": {
                "input": {
                    "value": "(a - x) / sqrt2lengthscale",
                    "possible_values": []
                }
            },
            "erf_28": {
                "input": {
                    "value": "(a - y) / sqrt2lengthscale",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "erf_49": {
                "input": {
                    "value": "(a - x) / sqrt2lengthscale",
                    "possible_values": []
                }
            },
            "eye_12": {
                "n": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_35": {
                "n": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_98": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_99": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_100": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_8": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x / lengthscale",
                            "BinOp"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_9": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "y / lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "erf_31": {
                "input": {
                    "value": "(a - b) / sqrt2lengthscale * torch.ones(1)",
                    "possible_values": []
                }
            },
            "mm_33": {
                "input": {
                    "value": "K12",
                    "possible_values": [
                        [
                            "torch.erf((b - x) / sqrt2lengthscale) - torch.erf((a - x) / sqrt2lengthscale)",
                            "BinOp"
                        ],
                        [
                            "torch.erf((b - x) / sqrt2lengthscale) - torch.erf((a - x) / sqrt2lengthscale)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K21T.t()",
                    "possible_values": []
                }
            },
            "erf_52": {
                "input": {
                    "value": "(a - b) / sqrt2lengthscale * torch.ones(1)",
                    "possible_values": []
                }
            },
            "exp_32": {
                "input": {
                    "value": "-temp ** 2",
                    "possible_values": []
                }
            },
            "exp_53": {
                "input": {
                    "value": "-temp ** 2",
                    "possible_values": []
                }
            },
            "mm_10": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x / lengthscale",
                            "BinOp"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.t()",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "examples/1_example_decomposition.py": {
        "torch": {
            "linspace_23": {
                "variable": {
                    "value": "z_inducing",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "z_inducing",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "linspace_24": {
                "variable": {
                    "value": "x_inducing",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "x_inducing",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "linspace_44": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Uniform_13": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "low": {
                    "value": "-2.0",
                    "possible_values": []
                },
                "high": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "Y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "F_pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_star, x_star, f_mean, f_z_mean, f_x_mean, f_int_mean]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Categorical_14": {
                "probs": {
                    "value": "torch.Tensor(class_p)",
                    "possible_values": []
                }
            },
            "randn_16": {
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sin_16": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "Uniform(-2.0, 2.0).rsample(sample_shape=(N, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}