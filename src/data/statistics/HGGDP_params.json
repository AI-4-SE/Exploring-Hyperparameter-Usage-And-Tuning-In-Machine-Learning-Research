{
    "hggdp_rec/hggdp/losses/dsm.py": {
        "torch": {
            "randn_like_7": {
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_12": {
                "input": {
                    "value": "dlogp + kernel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_10": {
                "outputs": {
                    "value": "logp.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "perturbed_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "samples + vector",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_19": {
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_like_31": {
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/main_siat.py": {
        "torch": {
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_51": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/models/cond_refinenet_dilated.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_53": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_102": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xs[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "xs[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.adapt_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PixelShuffle_240": {
                "variable": {
                    "value": "self.pixelshuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, output, output, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_311": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_321": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "getattr(self, '{}_{}_norm'.format(i + 1, j + 1))(x, y)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, '{}_{}_conv'.format(i + 1, j + 1))(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "m(x, y)",
                            "Call"
                        ],
                        [
                            "2 * x - 1.0",
                            "BinOp"
                        ],
                        [
                            "m(x, y)",
                            "Call"
                        ],
                        [
                            "2 * x - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_322": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "var_323": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_346": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_349": {
                "variable": {
                    "value": "self.begin_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.data.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "variable": {
                    "value": "self.end_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_354": {
                "variable": {
                    "value": "self.res1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm), ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.res2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_368": {
                "variable": {
                    "value": "self.res3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=2), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ELU_431": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_434": {
                "variable": {
                    "value": "self.begin_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.data.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_437": {
                "variable": {
                    "value": "self.end_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_439": {
                "variable": {
                    "value": "self.res1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm), ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_446": {
                "variable": {
                    "value": "self.res2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_453": {
                "variable": {
                    "value": "self.res3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_460": {
                "variable": {
                    "value": "self.res4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 4 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=2), ConditionalResidualBlock(4 * self.ngf, 4 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_467": {
                "variable": {
                    "value": "self.res5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(4 * self.ngf, 4 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=4), ConditionalResidualBlock(4 * self.ngf, 4 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.norms[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.convs[i](h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.adapt_convs[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.msf(hs, y, output_shape)",
                            "Call"
                        ],
                        [
                            "hs[0]",
                            "Subscript"
                        ],
                        [
                            "self.crp(h, y)",
                            "Call"
                        ],
                        [
                            "self.output_convs(h, y)",
                            "Call"
                        ],
                        [
                            "self.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "h + means[..., None, None] * alpha[..., None, None]",
                            "BinOp"
                        ],
                        [
                            "h + means[..., None, None] * alpha[..., None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ZeroPad2d((1, 0, 1, 0))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_313": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_317": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.res4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=True, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_383": {
                "variable": {
                    "value": "self.res4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=False, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "input": {
                    "value": "v + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ZeroPad2d_213": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_278": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/models/gmm.py": {
        "torch": {
            "eye_11": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MultivariateNormal_17": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.range(1, dim) / 10",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.mix_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[5 * torch.ones(dim), -torch.ones(dim) * 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_37": {
                "variable": {
                    "value": "mix_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_47": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(logps, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.mix_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[5 * torch.ones(dim), -torch.ones(dim) * 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(dim) * self.sigma for i in range(len(self.mix_probs))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_70": {
                "variable": {
                    "value": "mix_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_80": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(logps, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_90": {
                "variable": {
                    "value": "rands",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "range_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(3, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.mix_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "variable": {
                    "value": "mix_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_120": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-energy.sum(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "log_prob + mix_probs",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(log_prob, dim=-1)",
                            "Call"
                        ],
                        [
                            "-energy",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_size, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_size, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_16": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_47": {
                "tensors": {
                    "value": "logps",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "enable_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "logps",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_111": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_112": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_14": {
                "n": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_39": {
                "input": {
                    "value": "means",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ],
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grad_55": {
                "outputs": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.log_prob(samples, sigma).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "samples.detach()",
                            "Call"
                        ],
                        [
                            "(rands - 0.5) * self.range * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_73": {
                "input": {
                    "value": "means",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ],
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_32": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/models/inception.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/models/pix2pix.py": {
        "torch": {
            "LambdaLR_49": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=9)",
                            "Call"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=6)",
                            "Call"
                        ],
                        [
                            "UnetGenerator(input_nc, output_nc, 7, ngf, norm_layer=norm_layer, use_dropout=use_dropout)",
                            "Call"
                        ],
                        [
                            "UnetGenerator(input_nc, output_nc, 8, ngf, norm_layer=norm_layer, use_dropout=use_dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers=3, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers_D, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "PixelDiscriminator(input_nc, ndf, norm_layer=norm_layer)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_304": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_data",
                            "Name"
                        ],
                        [
                            "fake_data",
                            "Name"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "variable": {
                    "value": "downconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_508": {
                "variable": {
                    "value": "downrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_510": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_539": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_576": {
                "variable": {
                    "value": "downconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_579": {
                "variable": {
                    "value": "downrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_581": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_610": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_661": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_693": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_51": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_229": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "*args": {
                    "value": "*conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_514": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_585": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_53": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "target_real_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_226": {
                "data": {
                    "value": "target_fake_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_231": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_340": {
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_366": {
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "ngf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_413": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_521": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_528": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_545": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_592": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_599": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_616": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_639": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ELU_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_654": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_656": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_660": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_686": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_688": {
                "in_channels": {
                    "value": "ndf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_690": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_691": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_55": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.niter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_295": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_305": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_360": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_405": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_415": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_419": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_646": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_648": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReplicationPad2d_407": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_421": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_535": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_606": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/models/refinenet_dilated_baseline.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_77": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xs[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "xs[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.adapt_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PixelShuffle_215": {
                "variable": {
                    "value": "self.pixelshuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, output, output, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_284": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_286": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_293": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "getattr(self, '{}_{}_norm'.format(i + 1, j + 1))(x, y)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, '{}_{}_conv'.format(i + 1, j + 1))(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "m(x, y)",
                            "Call"
                        ],
                        [
                            "2 * x - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_294": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "var_295": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_315": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_318": {
                "variable": {
                    "value": "self.begin_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.data.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "variable": {
                    "value": "self.end_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self.res1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm), ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_330": {
                "variable": {
                    "value": "self.res2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.res3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=2), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_138": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.norms[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.convs[i](h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.adapt_convs[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.msf(hs, y, output_shape)",
                            "Call"
                        ],
                        [
                            "hs[0]",
                            "Subscript"
                        ],
                        [
                            "self.crp(h, y)",
                            "Call"
                        ],
                        [
                            "self.output_convs(h, y)",
                            "Call"
                        ],
                        [
                            "self.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "h + means[..., None, None] * self.alpha[..., None, None]",
                            "BinOp"
                        ],
                        [
                            "h + means[..., None, None] * self.alpha[..., None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ZeroPad2d((1, 0, 1, 0))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_345": {
                "variable": {
                    "value": "self.res4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=True, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_352": {
                "variable": {
                    "value": "self.res4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=False, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_296": {
                "input": {
                    "value": "v + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ZeroPad2d_188": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "hggdp_rec/hggdp/siat/siat_multich.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_100000.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_38": {
                "variable": {
                    "value": "scorenet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "scorenet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(scorenet, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * grad1",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_97": {
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * grad1",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hggdp_rec/hggdp/siat/siat_multich_compare_ddp.py": {
        "torch": {
            "load_123": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_100000.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "scorenet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "scorenet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(scorenet, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 6, 216, 256).uniform_(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 216, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * grad1",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_191": {
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 216, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * grad1",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hggdp_rec/hggdp/siat/siat_multich_compare_modl.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_100000.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_80": {
                "variable": {
                    "value": "scorenet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "scorenet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(scorenet, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 6, 256, 232).uniform_(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 232).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * grad1",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_139": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_150": {
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 232).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * grad1",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hggdp_rec/hggdp/siat/siat_multinoise.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_100000.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "variable": {
                    "value": "scorenet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "scorenet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(scorenet, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * (grad1 + grad2 + grad3) / 3.0",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_105": {
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * (grad1 + grad2 + grad3) / 3.0",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_106": {
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * (grad1 + grad2 + grad3) / 3.0",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_107": {
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(1, 6, 256, 256).uniform_(-1, 1)).cuda()",
                            "Call"
                        ],
                        [
                            "x0 + step_size * (grad1 + grad2 + grad3) / 3.0",
                            "BinOp"
                        ],
                        [
                            "np.array(x0.cpu().detach(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack([x_real, x_imag, x_real, x_imag, x_real, x_imag], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x0, dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hggdp_rec/hggdp/siat/siat_train.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "GetMRI(root='/home/b110/\u684c\u9762/SIATdata_500mat_64_dataaug_6ch/real_imag', augment=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "GetMRI(root='/home/b110/\u684c\u9762/SIATdata_500mat_64_dataaug_6ch/real_imag', augment=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.exp(np.linspace(np.log(self.config.model.sigma_begin), np.log(self.config.model.sigma_end), self.config.model.num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optim.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optim.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_56": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lam + (1 - 2 * lam) * image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_56": {
                "input": {
                    "value": "-image",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_116": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(sigmas)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(X.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_48": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_147": {
                "variable": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(sigmas)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(test_X.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "test_X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_50": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}.pth'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_like_112": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X / 256.0 * 255.0 + torch.rand_like(X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_143": {
                "input": {
                    "value": "test_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "next(test_iter)",
                            "Call"
                        ],
                        [
                            "next(test_iter)",
                            "Call"
                        ],
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X / 256.0 * 255.0 + torch.rand_like(test_X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(test_X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}