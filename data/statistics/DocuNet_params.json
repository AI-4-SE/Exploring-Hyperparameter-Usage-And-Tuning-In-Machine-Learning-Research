{
    "attn_unet.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_104": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_94": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_97": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "element_wise.py": {
        "torch": {
            "einsum_23": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iaj,ibj->ijab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tensor_1, tensor_2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "long_seq.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(start_tokens).to(input_ids)",
                            "Call"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_10": {
                "variable": {
                    "value": "end_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "end_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(end_tokens).to(input_ids)",
                            "Call"
                        ],
                        [
                            "end_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_37": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "input_ids1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids[i, :512 - len_end], end_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "input_ids2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_tokens, input_ids[i, l_i - 512 + len_start:l_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, c - 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, c - 512, 0, c - 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_58": {
                "variable": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_output[i][:512 - len_end]",
                            "Subscript"
                        ],
                        [
                            "F.pad(output1, (0, 0, 0, c - 512 + len_end))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, c - 512 + len_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_59": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[i][:512 - len_end]",
                            "Subscript"
                        ],
                        [
                            "F.pad(mask1, (0, c - 512 + len_end))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, c - 512 + len_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_60": {
                "variable": {
                    "value": "att1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention[i][:, :512 - len_end, :512 - len_end]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att1, (0, c - 512 + len_end, 0, c - 512 + len_end))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, c - 512 + len_end, 0, c - 512 + len_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_65": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_output[i + 1][len_start:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(output2, (0, 0, l_i - 512 + len_start, c - l_i))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, l_i - 512 + len_start, c - l_i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_66": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[i + 1][len_start:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(mask2, (l_i - 512 + len_start, c - l_i))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(l_i - 512 + len_start, c - l_i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_67": {
                "variable": {
                    "value": "att2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention[i + 1][:, len_start:, len_start:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att2, [l_i - 512 + len_start, c - l_i, l_i - 512 + len_start, c - l_i])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[l_i - 512 + len_start, c - l_i, l_i - 512 + len_start, c - l_i]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "zeros_like_18": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "y_pred_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_pred_neg, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_pred_pos, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_21": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred - y_true * 1e+30",
                            "BinOp"
                        ],
                        [
                            "torch.cat([y_pred_neg, zeros], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_22": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred - (1 - y_true) * 1e+30",
                            "BinOp"
                        ],
                        [
                            "torch.cat((y_pred_pos, zeros), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "th_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "th_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_41": {
                "variable": {
                    "value": "(top_v, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_81": {
                "variable": {
                    "value": "(top_v, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "input": {
                    "value": "logit1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - (1 - p_mask) * 1e+30",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_69": {
                "input": {
                    "value": "logit2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - (1 - n_mask) * 1e+30",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model_balanceloss.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.head_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 * config.hidden_size + args.unet_out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.tail_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 * config.hidden_size + args.unet_out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size * block_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.bertdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.liner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.unet_in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "hss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "tss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "ent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ],
                        [
                            "sequence_output.size()",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_height",
                            "Attribute"
                        ],
                        [
                            "max([len(x) for x in entity_pos])",
                            "Call"
                        ],
                        [
                            "ne",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "run_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_output.device.index",
                            "Attribute"
                        ],
                        [
                            "run_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "rel_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ],
                        [
                            "sequence_output.size()",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_height",
                            "Attribute"
                        ],
                        [
                            "max([len(x) for x in entity_pos])",
                            "Call"
                        ],
                        [
                            "ne",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_height",
                            "Attribute"
                        ],
                        [
                            "max([len(x) for x in entity_pos])",
                            "Call"
                        ],
                        [
                            "ne",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "run_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_output.device.index",
                            "Attribute"
                        ],
                        [
                            "run_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_119": {
                "variable": {
                    "value": "htss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "htss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(htss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "index_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "index_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(index_pair, dim=0).reshape(-1, 2).to(sequence_output.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "index_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "map_rss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "map_rss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(map_rss, dim=0).reshape(bs, ne, ne, d)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "map_rss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ],
                        [
                            "sequence_output.size()",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_height",
                            "Attribute"
                        ],
                        [
                            "max([len(x) for x in entity_pos])",
                            "Call"
                        ],
                        [
                            "ne",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_190": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.head_extractor(torch.cat([hs, h_t], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tail_extractor(torch.cat([ts, h_t], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "entity_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "entity_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_embs, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_hrt(sequence_output, attention, entity_pos, hts)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "entity_atts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "entity_atts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_atts, dim=0)",
                            "Call"
                        ],
                        [
                            "entity_as[b]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_95": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_embs, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_hrt(sequence_output, attention, entity_pos, hts)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ht_i[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_96": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_embs, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_hrt(sequence_output, attention, entity_pos, hts)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ht_i[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones((ne, 1), dtype=int) * i, torch.arange(0, ne).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_137": {
                "variable": {
                    "value": "h_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_atts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_atts, dim=0)",
                            "Call"
                        ],
                        [
                            "entity_as[b]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_pair[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_138": {
                "variable": {
                    "value": "t_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_atts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_atts, dim=0)",
                            "Call"
                        ],
                        [
                            "entity_as[b]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_pair[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor(label) for label in labels]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels, dim=0).to(logits)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "attn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[similar1, similar2, similar3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_182": {
                "variable": {
                    "value": "attn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "[hs, h_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "[ts, h_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logsumexp_70": {
                "variable": {
                    "value": "e_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(e_emb, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "e_att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "e_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "attention[i, :, start + offset]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(h, c).to(attention)",
                            "Call"
                        ],
                        [
                            "torch.stack(e_att, dim=0).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.zeros(h, c).to(attention)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_71": {
                "variable": {
                    "value": "e_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "e_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "e_att",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "e_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "e_att",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_131": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_height",
                            "Attribute"
                        ],
                        [
                            "max([len(x) for x in entity_pos])",
                            "Call"
                        ],
                        [
                            "ne",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_131": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "(ne, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "e_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sequence_output[i, start + offset]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(self.config.hidden_size).to(sequence_output)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(torch.stack(e_emb, dim=0), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.config.hidden_size).to(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prepro.py": {
        "torch": {}
    },
    "train_balanceloss.py": {
        "torch": {
            "DataLoader_142": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_269": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_270": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_308": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "DocREModel(config, args, model, num_labels=args.num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(range(torch.cuda.device_count())))",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "args.train_from_saved_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "args.train_from_saved_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_303": {
                "f": {
                    "value": "args.train_from_saved_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_315": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_30": {
                "f": {
                    "value": "args.train_from_saved_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__74": {
                "parameters": {
                    "value": "cur_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "{'epoch': epoch, 'checkpoint': cur_model.state_dict(), 'best_f1': best_score, 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_bio.py": {
        "torch": {
            "DataLoader_109": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_209": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_210": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_248": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__54": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "{'epoch': epoch, 'checkpoint': model.state_dict(), 'best_f1': best_score}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils_sample.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f['input_ids'] + [0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[f['input_ids'] + [0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1.0] * len(f['input_ids']) + [0.0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_mask, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "[[1.0] * len(f['input_ids']) + [0.0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_mask, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f['input_ids'] + [0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[f['input_ids'] + [0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1.0] * len(f['input_ids']) + [0.0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_mask, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "[[1.0] * len(f['input_ids']) + [0.0] * (max_len - len(f['input_ids'])) for f in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_mask, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_9": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_11": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}