{
    "evaluators.py": {
        "tensorflow": {
            "create_file_writer_282": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.logs_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_359": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.Reduction.AUTO",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_378": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_loss_0(labels=labels, predictions=predictions, reduction=tf.keras.losses.Reduction.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_logger_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_log_device_placement_225": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MirroredStrategy_228": {
                "variable": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_242": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trace_on_283": {
                "graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "profiler": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "function_435": {
                "input_signature": {
                    "value": "[self.iter_dataset.element_spec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_576": {
                "variable": {
                    "value": "decoder_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(decoder_predictions, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_587": {
                "variable": {
                    "value": "image_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_replica_image_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strategy.experimental_local_results(image_ids_batch)",
                            "Call"
                        ],
                        [
                            "self.strategy.experimental_local_results(image_ids_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "function_531": {
                "input_signature": {
                    "value": "[self.iter_dataset.element_spec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_685": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Checkpoint_690": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_364": {
                "name": {
                    "value": "COCO Numbers/Bleu_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_365": {
                "name": {
                    "value": "COCO Numbers/Bleu_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_366": {
                "name": {
                    "value": "COCO Numbers/Bleu_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_367": {
                "name": {
                    "value": "COCO Numbers/Bleu_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_368": {
                "name": {
                    "value": "COCO Numbers/METEOR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_369": {
                "name": {
                    "value": "COCO Numbers/ROUGE_L",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_370": {
                "name": {
                    "value": "COCO Numbers/CIDEr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_371": {
                "name": {
                    "value": "COCO Numbers/SPICE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_507": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_563": {
                "variable": {
                    "value": "agg_layer_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "local_layer_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strategy.experimental_local_results(layer_attn)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_576": {
                "values": {
                    "value": "decoder_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strategy.experimental_local_results(outputs_batch['predictions'])",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(tf.concat(decoder_predictions, axis=0), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_551": {
                "variable": {
                    "value": "agg_layer_embd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "local_layer_embd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strategy.experimental_local_results(layer_state['output_embeddings'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_552": {
                "variable": {
                    "value": "agg_layer_score",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "local_layer_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strategy.experimental_local_results(layer_state['output_scores'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_553": {
                "variable": {
                    "value": "agg_layer_id",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "local_layer_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strategy.experimental_local_results(layer_state['output_ids'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_310": {
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(mtype, mname)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "summary_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metrics[mtype][mname].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in range(self.steps_max)",
                            "Call"
                        ],
                        [
                            "step in range(self.steps_max)",
                            "Call"
                        ],
                        [
                            "step in range(self.steps_max)",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_257": {
                "dims": {
                    "value": "[self.max_vid_length, self.d_vid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_258": {
                "dims": {
                    "value": "[self.max_vid_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_259": {
                "dims": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorShape_260": {
                "dims": {
                    "value": "[self.max_txt_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_261": {
                "dims": {
                    "value": "[self.max_txt_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_312": {
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(mtype, mname)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "summary_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metrics[mtype][mname].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in range(self.steps_max)",
                            "Call"
                        ],
                        [
                            "step in range(self.steps_max)",
                            "Call"
                        ],
                        [
                            "step in range(self.steps_max)",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "t5.py": {
        "tensorflow": {
            "shape_72": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TruncatedNormal_67": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_76": {
                "input_tensor": {
                    "value": "tf.square(x_1 - x_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNormalization_89": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_91": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_103": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_104": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "variable": {
                    "value": "sim_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(inputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "query + q_position_embeddings",
                            "BinOp"
                        ],
                        [
                            "self.wi(tf.concat([query, tf.zeros_like(query)], axis=-1))[:, :, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.dict, axis=-1)",
                            "Call"
                        ],
                        [
                            "key + kv_position_embeddings",
                            "BinOp"
                        ],
                        [
                            "self.wi(tf.concat([tf.zeros_like(key), key], axis=-1))[:, tf.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, key, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(sim_, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_108": {
                "variable": {
                    "value": "word_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sim_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, key, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(sim_, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_120": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._calc_word_id(y, training)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_167": {
                "variable": {
                    "value": "self.temporal_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.max_temporal_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "temporal_position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_173": {
                "variable": {
                    "value": "self.spatial_center_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.max_spatial_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "spatial_center_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_180": {
                "variable": {
                    "value": "self.spatial_size_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.max_spatial_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "spatial_size_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_189": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_195": {
                "variable": {
                    "value": "center_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "center_x * self.max_spatial_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_198": {
                "variable": {
                    "value": "center_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "center_y * self.max_spatial_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_201": {
                "variable": {
                    "value": "center_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "center_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_y * self.max_spatial_size + center_x",
                            "BinOp"
                        ],
                        [
                            "tf.cast(center_ids, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_207": {
                "variable": {
                    "value": "length_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spatial_ids[:, :, 1] - spatial_ids[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_208": {
                "variable": {
                    "value": "length_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spatial_ids[:, :, 3] - spatial_ids[:, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_211": {
                "variable": {
                    "value": "size_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "size_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_y * self.max_spatial_size + length_x",
                            "BinOp"
                        ],
                        [
                            "tf.cast(size_ids, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_223": {
                "variable": {
                    "value": "temporal_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position_ids[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_257": {
                "variable": {
                    "value": "self.temporal_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.max_temporal_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "temporal_position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_265": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_299": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_301": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_302": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "role_cont_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, qlen * klen, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "role_cont_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "role_cont_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(query + key, [-1, qlen * klen, dim])",
                            "Call"
                        ],
                        [
                            "self._split_heads(role_cont_rep, bs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(role_cont_rep, (bs, -1, self.d_kv))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "variable": {
                    "value": "outputs_vq[output_embeddings]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, -1, self.n_heads, self.d_kv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "outputs_vq[output_embeddings]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, qlen, klen, self.n_heads, self.d_kv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "outputs_vq[output_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, -1, self.n_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "outputs_vq[output_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, qlen, klen, self.n_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "outputs_vq[output_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, -1, self.n_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "outputs_vq[output_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, qlen, klen, self.n_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_346": {
                "variable": {
                    "value": "r3_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "r3_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r3 * r3_scores",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(r3_weighted, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r3_weighted, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "self.layernorm(r3_weighted)",
                            "Call"
                        ],
                        [
                            "self.dropout(r3_weighted, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_347": {
                "variable": {
                    "value": "r3_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "r3_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r3 * r3_scores",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(r3_weighted, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r3_weighted, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "self.layernorm(r3_weighted)",
                            "Call"
                        ],
                        [
                            "self.dropout(r3_weighted, training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_368": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_369": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_370": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_372": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_373": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_408": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ],
                        [
                            "self.q(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ],
                        [
                            "self.q(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k(key)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ],
                        [
                            "self.k(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ],
                        [
                            "self.k(key)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_411": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_414": {
                "variable": {
                    "value": "role_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(value)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ],
                        [
                            "self.v(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ],
                        [
                            "self.v(value)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_415": {
                "variable": {
                    "value": "role_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "role_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(role_states, [bs, -1, self.d_kv])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1, self.d_kv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_419": {
                "variable": {
                    "value": "outputs_vq[output_embeddings]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, self.n_heads, -1, self.d_kv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "outputs_vq[output_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, self.n_heads, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_421": {
                "variable": {
                    "value": "outputs_vq[output_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_vq['output_scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, self.n_heads, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_488": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_489": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_510": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_522": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_523": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_524": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_525": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_553": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_586": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_587": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_588": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_611": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_612": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_634": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ],
                        [
                            "n in enumerate(self.layers)",
                            "Call"
                        ],
                        [
                            "n in enumerate(zip(self.layers, past_key_value_states))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_641": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / np.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_658": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(values, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_750": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ],
                        [
                            "self.q(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ],
                        [
                            "self.q(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k(key)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ],
                        [
                            "self.k(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ],
                        [
                            "self.k(key)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_752": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_755": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(value)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ],
                        [
                            "self.v(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ],
                        [
                            "self.v(value)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_858": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ],
                        [
                            "self.q(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ],
                        [
                            "self.q(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(q, bs)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k(key)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ],
                        [
                            "self.k(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ],
                        [
                            "self.k(key)",
                            "Call"
                        ],
                        [
                            "self._split_heads(k, bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_860": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_863": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(value)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ],
                        [
                            "self.v(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ],
                        [
                            "self.v(value)",
                            "Call"
                        ],
                        [
                            "self._split_heads(v, bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_910": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_1260": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_1291": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "(1.0 - attention_mask) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1410": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_1463": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "(1.0 - attention_mask) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_76": {
                "x": {
                    "value": "x_1 - x_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_382": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, self.d_kv))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_477": {
                "params": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_491": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "first_dims + [self.vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_615": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.num_relative_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relative_attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_629": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ],
                        [
                            "n in enumerate(self.layers)",
                            "Call"
                        ],
                        [
                            "n in enumerate(zip(self.layers, past_key_value_states))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_631": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ],
                        [
                            "n in enumerate(self.layers)",
                            "Call"
                        ],
                        [
                            "n in enumerate(zip(self.layers, past_key_value_states))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.less(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ],
                        [
                            "n in enumerate(self.layers)",
                            "Call"
                        ],
                        [
                            "n in enumerate(zip(self.layers, past_key_value_states))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / np.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_664": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, self.d_kv))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_669": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.inner_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_722": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_723": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_725": {
                "x": {
                    "value": "use_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_758": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_weights, v)",
                            "Call"
                        ],
                        [
                            "tf.multiply(hidden_states, r)",
                            "Call"
                        ],
                        [
                            "self._join_heads(hidden_states, bs)",
                            "Call"
                        ],
                        [
                            "self.o(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_weights, v)",
                            "Call"
                        ],
                        [
                            "tf.multiply(hidden_states, r)",
                            "Call"
                        ],
                        [
                            "self._join_heads(hidden_states, bs)",
                            "Call"
                        ],
                        [
                            "self.o(hidden_states)",
                            "Call"
                        ],
                        [
                            "attention_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "inputs + self.dropout(hidden_states, training=training)",
                            "BinOp"
                        ],
                        [
                            "attention_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "query + self.dropout(hidden_states, training=training)",
                            "BinOp"
                        ],
                        [
                            "attention_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "self.feed_forward(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.dropout(inputs_embeds, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "self.final_layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.dropout(inputs_embeds, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "self.final_layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(r, bs)",
                            "Call"
                        ],
                        [
                            "self.r(query=inputs, key=inputs, q_position_embeddings=position_embeddings, k_position_embeddings=position_embeddings, training=training)",
                            "Call"
                        ],
                        [
                            "self.r(query=inputs, key=inputs, value=inputs, mask=mask, q_position_embeddings=position_embeddings, kv_position_embeddings=position_embeddings, training=training)",
                            "Call"
                        ],
                        [
                            "self.r(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(r, bs)",
                            "Call"
                        ],
                        [
                            "self.r(query=query, key=key, q_position_embeddings=position_embeddings, k_position_embeddings=kv_position_embeddings, training=training)",
                            "Call"
                        ],
                        [
                            "self.r(query=query, key=key, value=value, mask=mask, q_position_embeddings=position_embeddings, kv_position_embeddings=kv_position_embeddings, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_833": {
                "x": {
                    "value": "use_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_866": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_weights, v)",
                            "Call"
                        ],
                        [
                            "tf.multiply(hidden_states, r)",
                            "Call"
                        ],
                        [
                            "self._join_heads(hidden_states, bs)",
                            "Call"
                        ],
                        [
                            "self.o(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_weights, v)",
                            "Call"
                        ],
                        [
                            "tf.multiply(hidden_states, r)",
                            "Call"
                        ],
                        [
                            "self._join_heads(hidden_states, bs)",
                            "Call"
                        ],
                        [
                            "self.o(hidden_states)",
                            "Call"
                        ],
                        [
                            "attention_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "inputs + self.dropout(hidden_states, training=training)",
                            "BinOp"
                        ],
                        [
                            "attention_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "query + self.dropout(hidden_states, training=training)",
                            "BinOp"
                        ],
                        [
                            "attention_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "self.feed_forward(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.dropout(inputs_embeds, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "self.final_layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.dropout(inputs_embeds, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs['hidden_states']",
                            "Subscript"
                        ],
                        [
                            "self.final_layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r(inputs)",
                            "Call"
                        ],
                        [
                            "self._split_heads(r, bs)",
                            "Call"
                        ],
                        [
                            "self.r(query=inputs, key=inputs, q_position_embeddings=position_embeddings, k_position_embeddings=position_embeddings, training=training)",
                            "Call"
                        ],
                        [
                            "self.r(query=inputs, key=inputs, value=inputs, mask=mask, q_position_embeddings=position_embeddings, kv_position_embeddings=position_embeddings, training=training)",
                            "Call"
                        ],
                        [
                            "self.r(query)",
                            "Call"
                        ],
                        [
                            "self._split_heads(r, bs)",
                            "Call"
                        ],
                        [
                            "self.r(query=query, key=key, q_position_embeddings=position_embeddings, k_position_embeddings=kv_position_embeddings, training=training)",
                            "Call"
                        ],
                        [
                            "self.r(query=query, key=key, value=value, mask=mask, q_position_embeddings=position_embeddings, kv_position_embeddings=kv_position_embeddings, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_1287": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, mask_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_1451": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, mask_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_1455": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, encoder_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1485": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, encoder_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoder_attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_123": {
                "input": {
                    "value": "z - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_382": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_510": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_511": {
                "x": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_595": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_635": {
                "x": {
                    "value": "tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / np.log(max_distance / max_exact) * (num_buckets - max_exact)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_651": {},
            "transpose_658": {
                "a": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_attention_bias(rp_bucket)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_664": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_669": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1274": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, input_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1428": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, input_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_1470": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_equal_1471": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_ids[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_1474": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1)), seq_ids[None, :, None])",
                            "Call"
                        ],
                        [
                            "tf.cast(causal_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_95": {
                "identifier": {
                    "value": "glorot_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_326": {
                "values": {
                    "value": "[query, tf.zeros_like(query)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_327": {
                "values": {
                    "value": "[tf.zeros_like(key), key]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_628": {
                "x": {
                    "value": "tf.math.less(n, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_128": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self.DenseReLUDense(norm_x, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_132": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.dict, output_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_628": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ],
                        [
                            "n in enumerate(self.layers)",
                            "Call"
                        ],
                        [
                            "n in enumerate(zip(self.layers, past_key_value_states))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1472": {
                "input": {
                    "value": "seq_ids[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, mask_seq_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_326": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(inputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "query + q_position_embeddings",
                            "BinOp"
                        ],
                        [
                            "self.wi(tf.concat([query, tf.zeros_like(query)], axis=-1))[:, :, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_327": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.dict, axis=-1)",
                            "Call"
                        ],
                        [
                            "key + kv_position_embeddings",
                            "BinOp"
                        ],
                        [
                            "self.wi(tf.concat([tf.zeros_like(key), key], axis=-1))[:, tf.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_636": {
                "x": {
                    "value": "tf.dtypes.cast(n, tf.float32) / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_636": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ],
                        [
                            "n in enumerate(self.layers)",
                            "Call"
                        ],
                        [
                            "n in enumerate(zip(self.layers, past_key_value_states))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainers.py": {
        "tensorflow": {
            "shape_75": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_235": {
                "variable": {
                    "value": "randomness",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(seq_len, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_236": {
                "variable": {
                    "value": "random_vocabs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(seq_len,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "maxval": {
                    "value": "Generator.tokenizer.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_251": {
                "x": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.stack(mask_ids) + tf.stack(random_ids)) * cap_attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "self.minimum_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MirroredStrategy_367": {
                "variable": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cross_device_ops": {
                    "value": "self.cross_device_ops(self.num_packs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_413": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_file_writer_427": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.outputs_path, 'train_logs', self.run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_507": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.Reduction.AUTO",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_526": {
                "variable": {
                    "value": "per_example_loss_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_loss_0(labels=txt_labels, predictions=txt_predictions, mask=txt_labels_mask, reduction=tf.keras.losses.Reduction.NONE)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(per_example_loss_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_530": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "per_example_loss_pred + per_example_loss_model * self.lr_r3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_317": {
                "variable": {
                    "value": "self.last_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.lr_warmup(step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lr_anneal(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_logger_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_log_device_placement_363": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trace_on_428": {
                "graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "profiler": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_seed_499": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "function_550": {
                "input_signature": {
                    "value": "[self.iter_dataset.element_spec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CheckpointManager_574": {
                "variable": {
                    "value": "manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "directory": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.outputs_path, 'checkpoints', self.run_name)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Checkpoint_664": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_49": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_equal_50": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_ids[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1)), seq_ids[None, :, None])",
                            "Call"
                        ],
                        [
                            "tf.cast(causal_mask, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_309": {
                "x": {
                    "value": "self.lr_cosine(step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.minimum_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_512": {
                "name": {
                    "value": "Accuracies/Train_Accuracy_CMLM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_560": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cmlm",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.trainable_variables",
                            "Attribute"
                        ]
                    ]
                },
                "gate_gradients": {
                    "value": "self.deterministic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_250": {
                "values": {
                    "value": "random_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * seq_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_253": {
                "values": {
                    "value": "no_touch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * seq_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_311": {
                "x": {
                    "value": "self.lr_linear(step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.minimum_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_416": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_51": {
                "input": {
                    "value": "seq_ids[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, mask_seq_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_126": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_295": {
                "x": {
                    "value": "np.pi * (step - self.max_warmup_steps) / self.max_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_455": {
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(mtype, mname)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "summary_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metrics[mtype][mname].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in range(self.max_steps)",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_383": {
                "dims": {
                    "value": "[self.max_vid_length, self.d_vid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_384": {
                "dims": {
                    "value": "[self.max_vid_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_385": {
                "dims": {
                    "value": "[self.max_txt_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_386": {
                "dims": {
                    "value": "[self.max_txt_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_457": {
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(mtype, mname)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "summary_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metrics[mtype][mname].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in range(self.max_steps)",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "text_460": {
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(mtype, mname)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "summary_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metrics[mtype][mname].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in range(self.max_steps)",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tx_helper.py": {
        "tensorflow": {
            "shape_11": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1296": {
                "variable": {
                    "value": "broad_casted_batch_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(shape[0]), axis=-1), shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1298": {
                "variable": {
                    "value": "pair_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_473": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_580": {
                "variable": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_625": {
                "variable": {
                    "value": "min_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_626": {
                "variable": {
                    "value": "max_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_673": {
                "variable": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_783": {
                "variable": {
                    "value": "min_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_784": {
                "variable": {
                    "value": "max_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_848": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_beams,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1083": {
                "variable": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sent_lengths_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1181": {
                "value": {
                    "value": "token_penalties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(get_shape(logits))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_1262": {
                "variable": {
                    "value": "sorted_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1263": {
                "variable": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorted_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_1267": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(sorted_logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roll_1283": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cumulative_probs > top_p",
                            "Compare"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]], -1)",
                            "Call"
                        ],
                        [
                            "tf.roll(sorted_indices_to_remove, 1, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]], -1)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1284": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_1300": {
                "indices": {
                    "value": "pair_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.reshape(values, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_shape(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1306": {
                "condition": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "value_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(tensor) + value",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_392": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_415": {
                "variable": {
                    "value": "pad_token_in_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.math.equal(pad_token_id, input_ids), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_416": {
                "variable": {
                    "value": "pad_token_in_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pad_token_in_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.math.equal(pad_token_id, input_ids), dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.cast(pad_token_in_input, dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_419": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(input_ids, pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_457": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_460": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones((batch_size, seq_length), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, seq_length))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, seq_length))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_480": {
                "variable": {
                    "value": "encoder_outputs[position_embeddings]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_outputs['position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1), shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_601": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_608": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(tokens_to_add, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_613": {
                "variable": {
                    "value": "is_sents_unfinished_and_token_to_add_is_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(eos_in_sents, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_632": {
                "variable": {
                    "value": "broad_casted_sent_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sent_lengths, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_sent_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_635": {
                "variable": {
                    "value": "broad_casted_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(max_sent_length), -1), [max_sent_length, batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_639": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "broad_casted_range < broad_casted_sent_lengths",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, max_sent_length], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.ones([batch_size, max_sent_length.numpy()], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "pad_token_id * tf.ones((num_pad_tokens,), dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_761": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(tokens_to_add, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_791": {
                "variable": {
                    "value": "broad_casted_sent_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sent_lengths, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_sent_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_794": {
                "variable": {
                    "value": "broad_casted_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(max_sent_length), -1), [max_sent_length, batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_798": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "broad_casted_range < broad_casted_sent_lengths",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, max_sent_length], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.ones([batch_size, max_sent_length.numpy()], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "pad_token_id * tf.ones((num_pad_tokens,), dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_842": {
                "variable": {
                    "value": "beam_scores_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_844": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[beam_scores_begin, beam_scores_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_846": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_882": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1029": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[0] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1030": {
                "variable": {
                    "value": "beam_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[1] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1031": {
                "variable": {
                    "value": "beam_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[2] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1034": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.identity(input_ids[x, :]) for x in beam_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_1035": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(beam_tokens, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1113": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "decoded_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1117": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_1274": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_1296": {
                "input": {
                    "value": "tf.expand_dims(tf.range(shape[0]), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_shape(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1298": {
                "values": {
                    "value": "[broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1300": {
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1305": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_421": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_465": {
                "shape": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_474": {
                "input": {
                    "value": "tf.expand_dims(tf.range(batch_size), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "num_beams * effective_batch_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_581": {
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_loop_options_586": {
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[(input_ids, tf.TensorShape([None, None])), (sent_lengths, tf.TensorShape([None])), (unfinished_sents, tf.TensorShape([None]))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_674": {
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_696": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_730": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_733": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_746": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random.categorical(next_token_logits, dtype=tf.int32, num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_751": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_767": {
                "variable": {
                    "value": "is_sents_unfinished_and_token_to_add_is_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(eos_in_sents, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_875": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_889": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_892": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch_hypotheses, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_940": {
                "variable": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "categorical_942": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_946": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_949": {
                "variable": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_950": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_951": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_959": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_963": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_1086": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1086": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1267": {
                "logits": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(logits, sorted_indices, axis=-1, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1296": {
                "input": {
                    "value": "tf.range(shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_415": {
                "x": {
                    "value": "tf.math.equal(pad_token_id, input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_419": {
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pad_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eos_token_id",
                            "variable"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_458": {
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones((batch_size, seq_length), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, seq_length))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, seq_length))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_474": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_478": {
                "params": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1), shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_584": {
                "input_tensor": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_614": {
                "x": {
                    "value": "eos_in_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ],
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_629": {
                "shape": {
                    "value": "[batch_size, max_sent_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_633": {
                "input": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_636": {
                "input": {
                    "value": "tf.expand_dims(tf.range(max_sent_length), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_sent_length, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_779": {
                "input_tensor": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_788": {
                "shape": {
                    "value": "[batch_size, max_sent_length.numpy()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_792": {
                "input": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_795": {
                "input": {
                    "value": "tf.expand_dims(tf.range(max_sent_length), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_sent_length, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_843": {
                "shape": {
                    "value": "(batch_size, num_beams - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_1051": {
                "input_tensor": {
                    "value": "next_scores[batch_idx, :num_beams] == tf.reshape(beam_scores, (batch_size, num_beams))[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_1101": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypo, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_1285": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1298": {
                "tensor": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_415": {
                "x": {
                    "value": "pad_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eos_token_id",
                            "variable"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_608": {
                "input": {
                    "value": "tokens_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_636": {
                "input": {
                    "value": "tf.range(max_sent_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_710": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_724": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_747": {
                "logits": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs['decoder_head_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_761": {
                "input": {
                    "value": "tokens_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_768": {
                "x": {
                    "value": "eos_in_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ],
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_795": {
                "input": {
                    "value": "tf.range(max_sent_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_911": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_925": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_931": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_954": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_1034": {
                "input": {
                    "value": "input_ids[x, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_1035": {
                "input": {
                    "value": "beam_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[1] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1088": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1105": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decoded_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypo",
                            "variable"
                        ],
                        [
                            "tf.concat([hypo, padding], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i], eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32), decoded_slice)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_1258": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits_shape[-1])",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_1276": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :min_tokens_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_207": {
                "params": {
                    "value": "layer_past_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_past_states",
                            "variable"
                        ]
                    ]
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[2] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "beam_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_1015": {
                "input_tensor": {
                    "value": "next_scores[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1054": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_1100": {
                "shape": {
                    "value": "(num_pad_tokens,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_587": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_588": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_589": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_1003": {
                "input": {
                    "value": "input_ids[effective_beam_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1052": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_1106": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1107": {
                "shape": {
                    "value": "(sent_max_len,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vid_cap.py": {
        "tensorflow": {
            "uniform_54": {
                "variable": {
                    "value": "txt_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_55": {
                "variable": {
                    "value": "vid_inputs_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_56": {
                "variable": {
                    "value": "txt_inputs_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_112": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.tx.encoder.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "vid_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "vid_features",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "vid_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid_inputs[:, :, :-5]",
                            "Subscript"
                        ],
                        [
                            "self.proj(vid_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(vid_features)",
                            "Call"
                        ],
                        [
                            "self.get_vid_features(vid_inputs, training)",
                            "Call"
                        ],
                        [
                            "self.get_vid_features(vid_inputs, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['decoder_head_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "uniform_50": {
                "variable": {
                    "value": "vid_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, d_vid]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "vid_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([batch_size, 1, d_vid], minval=0, maxval=255, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(vid_inputs, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "self._dummy_inputs(batch_size, vid_inputs, from_features, d_vid)",
                            "Call"
                        ],
                        [
                            "self._dummy_inputs(batch_size, vid_inputs, from_features, d_vid)",
                            "Call"
                        ],
                        [
                            "vid_inputs",
                            "Method Argument"
                        ],
                        [
                            "vid_inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vid_inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vid_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "function_184": {
                "variable": {
                    "value": "self.gen_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "self.tx.generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "experimental_autograph_options": {
                    "value": "tf.autograph.experimental.Feature.EQUALITY_OPERATORS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}