{
    "src/lib/post_proc/mdod.py": {
        "tensorflow": {
            "convert_to_tensor_43": {
                "variable": {
                    "value": "boxes_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "boxes_s * self.coord_scale_factor",
                            "BinOp"
                        ],
                        [
                            "lib_util.clip_boxes(boxes_s, input_size)",
                            "Call"
                        ],
                        [
                            "boxes_s.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "boxes_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "boxes_s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "boxes_s.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(boxes_s)",
                            "Call"
                        ],
                        [
                            "tf.image.combined_non_max_suppression(boxes_s, confs_s, self.max_boxes, self.max_boxes, self.nms_thresh, self.conf_thresh, clip_boxes=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_44": {
                "variable": {
                    "value": "confs_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "confs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_s[:, 1:] if self.n_classes == prob_s.shape[1] else prob_s",
                            "IfExp"
                        ],
                        [
                            "confs_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "confs_s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "confs_s.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(confs_s)",
                            "Call"
                        ],
                        [
                            "tf.image.combined_non_max_suppression(boxes_s, confs_s, self.max_boxes, self.max_boxes, self.nms_thresh, self.conf_thresh, clip_boxes=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "combined_non_max_suppression_45": {
                "variable": {
                    "value": "(boxes_s, confs_s, labels_s, n_dets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxes_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "boxes_s * self.coord_scale_factor",
                            "BinOp"
                        ],
                        [
                            "lib_util.clip_boxes(boxes_s, input_size)",
                            "Call"
                        ],
                        [
                            "boxes_s.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "boxes_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "boxes_s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "boxes_s.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(boxes_s)",
                            "Call"
                        ],
                        [
                            "tf.image.combined_non_max_suppression(boxes_s, confs_s, self.max_boxes, self.max_boxes, self.nms_thresh, self.conf_thresh, clip_boxes=False)",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "confs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_s[:, 1:] if self.n_classes == prob_s.shape[1] else prob_s",
                            "IfExp"
                        ],
                        [
                            "confs_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "confs_s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "confs_s.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(confs_s)",
                            "Call"
                        ],
                        [
                            "tf.image.combined_non_max_suppression(boxes_s, confs_s, self.max_boxes, self.max_boxes, self.nms_thresh, self.conf_thresh, clip_boxes=False)",
                            "Call"
                        ]
                    ]
                },
                "max_output_size_per_class": {
                    "value": "self.max_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_total_size": {
                    "value": "self.max_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "self.nms_thresh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "score_threshold": {
                    "value": "self.conf_thresh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_boxes": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "nonzero_34": {
                "variable": {
                    "value": "keep_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_pi_s[0, 0] > self.pi_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_33": {
                "input": {
                    "value": "pi_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['pi']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/lib/dataset/__abc__.py": {
        "torch": {}
    },
    "src/lib/framework/basic.py": {
        "torch": {
            "set_grad_enabled_10": {
                "mode": {
                    "value": "grad_enable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "value.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_dict.items()",
                            "Call"
                        ],
                        [
                            "value_dict.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_dict.items()",
                            "Call"
                        ],
                        [
                            "value_dict.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_dict.items()",
                            "Call"
                        ],
                        [
                            "value_dict.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "gather_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones(1).long().cuda() for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/__abc__.py": {
        "torch": {
            "ModuleDict_22": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "net_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/lib/network/__module__.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.stage_c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.stage_c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "actv_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.stage_p5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.stage_p5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_28": {
                "variable": {
                    "value": "self.stage_p5_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.stage_p4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.stage_p4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_32": {
                "variable": {
                    "value": "self.stage_p4_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.stage_p3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.stage_p3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.stage_c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.stage_c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "actv_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.stage_p5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.stage_p5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.stage_p4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.stage_p4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.stage_p3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.stage_p3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_85": {
                "variable": {
                    "value": "_fmap_p5_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_fmap_p5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage_p5_1.forward(fmaps[2])",
                            "Call"
                        ],
                        [
                            "self.stage_p5_1.forward(fmaps[2])",
                            "Call"
                        ],
                        [
                            "self.stage_p5_1.forward(fmaps[3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fmaps[1].shape[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "fmaps",
                            "Method Argument"
                        ],
                        [
                            "fmaps",
                            "Method Argument"
                        ],
                        [
                            "fmaps",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.up_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_90": {
                "variable": {
                    "value": "_fmap_p4_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_fmap_p4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage_p4_1.forward(fmaps[1]) + _fmap_p5_up",
                            "BinOp"
                        ],
                        [
                            "self.stage_p4_1.forward(fmaps[1]) + _fmap_p5_up",
                            "BinOp"
                        ],
                        [
                            "self.stage_p4_1.forward(fmaps[2]) + _fmap_p5_up",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "fmaps[0].shape[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "fmaps",
                            "Method Argument"
                        ],
                        [
                            "fmaps",
                            "Method Argument"
                        ],
                        [
                            "fmaps",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.up_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.stage_c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.stage_p5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.stage_p5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_104": {
                "variable": {
                    "value": "self.stage_p5_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.stage_p4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.stage_p4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_108": {
                "variable": {
                    "value": "self.stage_p4_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.stage_p3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.stage_p3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_112": {
                "variable": {
                    "value": "self.stage_p3_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ],
                        [
                            "upsampling",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.stage_p2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.stage_p2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_147": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ],
                        [
                            "i in range(n_step)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_routing)",
                            "Call"
                        ],
                        [
                            "i in range(1, n_classes)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "mag_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_195": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mag_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(s ** 2, dim=dim, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_244": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, 3:5]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_246": {
                "variable": {
                    "value": "(o1, o2, o3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // 2, 2, w // 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c * 2 * 2, h // 2, w // 2)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.input_ch, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_250": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func.softplus(o3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_267": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // 2, 2, w // 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c * 2 * 2, h // 2, w // 2)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.input_ch, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if coef is None else coef",
                            "IfExp"
                        ],
                        [
                            "coef + torch.bmm(v, x)",
                            "BinOp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "torch.diagonal(_coef, dim1=-2, dim2=-1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diagonal_285": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lh / torch.sum(lh, dim=2, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_285": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // 2, 2, w // 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c * 2 * 2, h // 2, w // 2)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.input_ch, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if coef is None else coef",
                            "IfExp"
                        ],
                        [
                            "coef + torch.bmm(v, x)",
                            "BinOp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "torch.diagonal(_coef, dim1=-2, dim2=-1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_309": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // 2, 2, w // 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c * 2 * 2, h // 2, w // 2)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.input_ch, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if coef is None else coef",
                            "IfExp"
                        ],
                        [
                            "coef + torch.bmm(v, x)",
                            "BinOp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "torch.diagonal(_coef, dim1=-2, dim2=-1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_322": {
                "variable": {
                    "value": "(pool_score, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(pool_score, k=self.top_k, dim=2)",
                            "Call"
                        ],
                        [
                            "pool_score",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_331": {
                "variable": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(list(range(max_boxes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_352": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[box_iou(boxes_s, boxes_s) for boxes_s in box]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_392": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(thresholds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "variable": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(list(range(max_boxes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_417": {
                "variable": {
                    "value": "iou_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[iou_pair] * self.n_threshold",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_423": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjc_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_masks * score",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_435": {
                "variable": {
                    "value": "pool_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_masks * mask_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_454": {
                "variable": {
                    "value": "self.max_pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "*max_pools",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "ft_max_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_pool(ft_score) for max_pool in self.max_pools]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "ft_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ft_score] * self.n_max_pooling",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_462": {
                "variable": {
                    "value": "pool_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_masks * mask_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_471": {
                "variable": {
                    "value": "self.sigmas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(thresholds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_482": {
                "variable": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_507": {
                "variable": {
                    "value": "gauss_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gauss_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(gauss_decay, dim=0).transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(gauss_decay, dim=2, index=unsort_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_507": {
                "variable": {
                    "value": "gauss_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_511": {
                "variable": {
                    "value": "unsort_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unsort_indices] * self.n_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_512": {
                "variable": {
                    "value": "gauss_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gauss_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(gauss_decay, dim=0).transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(gauss_decay, dim=2, index=unsort_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "unsort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_indices.argsort(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([unsort_indices] * self.n_masks, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_518": {
                "variable": {
                    "value": "lmax_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gauss_decay.detach() * mask_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "nor_coef",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if coef is None else coef",
                            "IfExp"
                        ],
                        [
                            "coef + torch.bmm(v, x)",
                            "BinOp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "torch.diagonal(_coef, dim1=-2, dim2=-1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "lh / torch.sum(lh, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "coef.detach() if self.coef_detach else coef",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_215": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nor_coef.unsqueeze(dim=1) * x.unsqueeze(dim=2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_372": {
                "variable": {
                    "value": "pool_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "(max_idx == box_indices).long()",
                            "Call"
                        ],
                        [
                            "torch.stack(pool_mask, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_376": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjc_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_mask * score",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_414": {
                "variable": {
                    "value": "iou_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[box_iou(boxes_s, boxes_s) for boxes_s in box]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_452": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "iou_max_mat_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[iou_max_s] * n_boxes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_494": {
                "variable": {
                    "value": "iou_max_mat_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_max_mat_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([iou_max_s] * n_boxes, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(iou_max_mat_s, dim0=0, dim1=1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_499": {
                "variable": {
                    "value": "gauss_decay_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gauss_decay_s] * self.n_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_502": {
                "variable": {
                    "value": "gauss_decay_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gauss_decay_s / (self.sigmas + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_140": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ],
                        [
                            "i in range(n_step)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_routing)",
                            "Call"
                        ],
                        [
                            "i in range(1, n_classes)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_158": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // 2, 2, w // 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c * 2 * 2, h // 2, w // 2)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.input_ch, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_248": {
                "input": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, self.split_indices, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_248": {
                "input": {
                    "value": "torch.sigmoid(o1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_250": {
                "input": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, self.split_indices, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_264": {
                "input": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_306": {
                "input": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu, sig, pi, points, sum_comp=False, comp_pdf=lib_util.cauchy_pdf)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_364": {
                "variable": {
                    "value": "max_idx_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjc_score_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_mask * score_c",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "step_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(out_ch / in_ch) ** (i / n_step)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "step_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(out_ch / in_ch) ** ((i + 1) / n_step)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_170": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 ** ((i + 1) / n_step)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_209": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.squash(y).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // 2, 2, w // 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c * 2 * 2, h // 2, w // 2)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.input_ch, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_359": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "box.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box.shape[2]",
                            "Subscript"
                        ],
                        [
                            "box.shape[2]",
                            "Subscript"
                        ],
                        [
                            "boxes.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_492": {
                "input": {
                    "value": "iou_mat_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.calc_jaccard_torch(sort_boxes_s, sort_boxes_s)",
                            "Call"
                        ],
                        [
                            "iou_mat_s.triu(diagonal=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_503": {
                "input": {
                    "value": "gauss_decay_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * (iou_mat_s ** 2 - iou_max_mat_s ** 2)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([gauss_decay_s] * self.n_masks, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.exp(gauss_decay_s / (self.sigmas + 1e-12))",
                            "Call"
                        ],
                        [
                            "torch.min(gauss_decay_s, dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/__util__.py": {
        "torch": {
            "cat_189": {
                "tensors": {
                    "value": "def_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x_limit_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lv_x_limit_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "y_limit_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lv_y_limit_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "limit_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_limit_scale, y_limit_scale]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "limit_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[limit_scale] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "id_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "id_basis + zero_arr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "id_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(id_basis_vector_list).transpose((1, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "id_basis_map1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[id_basis.unsqueeze(2)] * id_basis.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "id_basis_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[id_basis_map1, id_basis_map2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_279": {
                "variable": {
                    "value": "id_basis_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "def_id_bit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "def_id_bit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(def_id_bit, dim=1)",
                            "Call"
                        ],
                        [
                            "def_id_bit * 2 * sigmoid_factor - sigmoid_factor",
                            "BinOp"
                        ],
                        [
                            "def_id_bit.view(1, 1, def_id_bit.shape[0], def_id_bit.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([def_id_bit] * batch_size, dim=0)] * n_classes, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "[def_id_bit] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "onehot_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(map_size[0], map_size[1], onehot_size * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_306": {
                "variable": {
                    "value": "onehot_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[onehot_map] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_287": {
                "variable": {
                    "value": "def_id_bit_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "id_basis_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([id_basis_map1, id_basis_map2], dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size in enumerate(output_sizes)",
                            "Call"
                        ],
                        [
                            "output_sizes",
                            "variable"
                        ],
                        [
                            "output_sizes",
                            "variable"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "[xy_map] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "xy_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.create_coord_map(fmap_size, coord_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "def_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_box_coord_map(output_size, num_def_coords, coord_range, with_wh=with_wh)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat(def_coords, dim=2)] * batch_size, dim=0)",
                            "Call"
                        ],
                        [
                            "def_coord[lv]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_239": {
                "*size": {
                    "value": "(1, 1, n_lv_mix_comp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_240": {
                "*size": {
                    "value": "(1, 1, n_lv_mix_comp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/ft_extractor/__abc__.py": {
        "torch": {
            "ModuleDict_11": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/ft_extractor/backbone/my_resnet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.part1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, input_chs[0], 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.part2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MyDownBottleNeck(input_chs[0], inter_chs[1], input_chs[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.part3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MyDownBottleNeck(input_chs[1], inter_chs[2], input_chs[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.part4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MyDownBottleNeck(input_chs[2], inter_chs[3], input_chs[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.part5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MyDownBottleNeck(input_chs[3], inter_chs[4], input_chs[4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.part6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MyDownBottleNeck(input_chs[4], inter_chs[5], input_chs[5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_49": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.part1.forward(x)",
                            "Call"
                        ],
                        [
                            "self.part2.forward(y)",
                            "Call"
                        ],
                        [
                            "self.part3.forward(y)",
                            "Call"
                        ],
                        [
                            "self.part4.forward(y)",
                            "Call"
                        ],
                        [
                            "self.part5.forward(y)",
                            "Call"
                        ],
                        [
                            "self.part6.forward(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.forward(y)",
                            "Call"
                        ],
                        [
                            "torch.flatten(y, 1)",
                            "Call"
                        ],
                        [
                            "self.fc.forward(y)",
                            "Call"
                        ],
                        [
                            "self.layers.forward(x)",
                            "Call"
                        ],
                        [
                            "self.actv.forward(y + x)",
                            "Call"
                        ],
                        [
                            "self.actv.forward(y1 + y2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_ch, inter_ch, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "variable": {
                    "value": "self.actv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.layers1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_ch, inter_ch, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.layers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_ch, output_ch, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "variable": {
                    "value": "self.actv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "y1.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "input_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "input_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ch",
                            "Method Argument"
                        ],
                        [
                            "input_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ch",
                            "Method Argument"
                        ],
                        [
                            "input_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "input_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ch",
                            "Method Argument"
                        ],
                        [
                            "input_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "input_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ch",
                            "Method Argument"
                        ],
                        [
                            "input_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_95": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "inter_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_ch",
                            "Method Argument"
                        ],
                        [
                            "inter_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "input_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ch",
                            "Method Argument"
                        ],
                        [
                            "input_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/ft_extractor/backbone/swin_transformer.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_94": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_104": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_106": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_109": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_368": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_508": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_514": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_532": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_565": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "variable"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_243": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "variable"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_260": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_505": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_93": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_533": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_533": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_505": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_511": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/ft_extractor/res_fpn.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.net[base]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_net.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_46": {
                "variable": {
                    "value": "gn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "self.group_norm_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "module.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/loss_func/__func__.py": {
        "torch": {
            "cat_42": {
                "variable": {
                    "value": "mog_nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mog_nll_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mog_nll_loss, dim=0)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mog_nll_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "bg_labels_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(torch.max(n_boxes) * n_samples, n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_57": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "mod_mm_nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mod_mm_nll_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mod_mm_nll_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "mog_nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mog_nll_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mog_nll_loss, dim=0)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mog_nll_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "cluster_nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cluster_nll_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(cluster_nll_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "pred_gt_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_gt_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_gt_ratio, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "mm_lhs_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gauss_lhs_s * cat_probs_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_67": {
                "variable": {
                    "value": "max_pi_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "pi_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi_s / torch.sum(pi_s)",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "zip(mu, sig, prob, cmps_pi, boxes, labels, sample_boxes, n_boxes)",
                            "Call"
                        ],
                        [
                            "pi_s[:, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi[i:i + 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_69": {
                "variable": {
                    "value": "keep_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_pi_s[0] > pi_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_79": {
                "variable": {
                    "value": "(max_ious, argmax_ious)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.calc_jaccard_torch(sample_boxes_s, boxes_s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_81": {
                "variable": {
                    "value": "sample_labels_s",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "max_ious.unsqueeze(dim=1) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_labels_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bg_labels_s[:1]",
                            "Subscript"
                        ],
                        [
                            "labels_s[argmax_ious]",
                            "Subscript"
                        ],
                        [
                            "torch.where(max_ious.unsqueeze(dim=1) > 0.5, sample_labels_s, bg_labels_s[:sample_boxes_s.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bg_labels_s[:sample_boxes_s.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "mixture_lhs_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "comp_lhs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.mm_pdf(mu_s, sig_s, pi_s, boxes_s, comp_pdf=coord_pdf, sum_comp=False)[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_22": {
                "variable": {
                    "value": "max_pi_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "pi_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi_s / torch.sum(pi_s)",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "zip(mu, sig, prob, cmps_pi, boxes, labels, sample_boxes, n_boxes)",
                            "Call"
                        ],
                        [
                            "pi_s[:, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi[i:i + 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_24": {
                "variable": {
                    "value": "keep_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_pi_s[0, 0] > pi_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "keep_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_pi_s[0, 0] > 0.001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "mm_lhs_s + lib_util.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_33": {
                "input": {
                    "value": "mixture_lhs_s + lib_util.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_108": {
                "input": {
                    "value": "mixture_lhs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.mm_pdf(mu_s, sig_s, pi_s, boxes_s, comp_pdf=coord_pdf, sum_comp=True)[0, :, 0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.mm_pdf(mu_s, sig_s, pi_s, boxes_s, sum_comp=False)[0, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(mixture_lhs_s, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(comp_lhs_s, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_109": {
                "input": {
                    "value": "mixture_lhs_s + lib_util.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_130": {
                "input": {
                    "value": "comp_lhs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.mm_pdf(mu_s, sig_s, pi_s, boxes_s, comp_pdf=coord_pdf, sum_comp=False)[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_132": {
                "input": {
                    "value": "max_lhs_s / (mixture_lhs_s + lib_util.epsilon) + lib_util.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "pi_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "pi_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi_s / torch.sum(pi_s)",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "zip(mu, sig, prob, cmps_pi, boxes, labels, sample_boxes, n_boxes)",
                            "Call"
                        ],
                        [
                            "pi_s[:, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi[i:i + 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "pi_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "pi_s[:, :, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi_s / torch.sum(pi_s)",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "zip(mu, sig, prob, cmps_pi, boxes, labels, sample_boxes, n_boxes)",
                            "Call"
                        ],
                        [
                            "pi_s[:, keep_idxes]",
                            "Subscript"
                        ],
                        [
                            "pi[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "n_boxes[i] * pi_s",
                            "BinOp"
                        ],
                        [
                            "n_boxes[i] * pi[i:i + 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_59": {
                "input": {
                    "value": "n_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_boxes",
                            "Method Argument"
                        ],
                        [
                            "n_boxes",
                            "Method Argument"
                        ],
                        [
                            "n_boxes",
                            "Method Argument"
                        ],
                        [
                            "n_boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_55": {
                "input": {
                    "value": "n_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_boxes",
                            "Method Argument"
                        ],
                        [
                            "n_boxes",
                            "Method Argument"
                        ],
                        [
                            "n_boxes",
                            "Method Argument"
                        ],
                        [
                            "n_boxes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/lib/network/loss_func/__util__.py": {
        "torch": {
            "ones_12": {
                "variable": {
                    "value": "target_sim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(box_nums.shape[0], box_nums.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/network/loss_func/mdod.py": {
        "torch": {
            "sum_35": {
                "input": {
                    "value": "n_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['n_boxes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_44": {
                "input": {
                    "value": "max_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_func.calc_mog_nll(mu, sig, pi, boxes, n_boxes, self.coord_pdf, self.mog_pi_thresh, self.value_return)",
                            "Call"
                        ],
                        [
                            "max_nll[~torch.isnan(max_nll)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_52": {
                "input": {
                    "value": "mod_nll_loss_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_func.calc_mod_mm_nll(mu.detach(), sig.detach(), pi.detach(), prob, boxes, labels, n_boxes, self.mod_n_samples, self.mod_max_samples, self.mod_pi_thresh, self.n_classes, self.coord_pdf, self.sampling_noise)",
                            "Call"
                        ],
                        [
                            "mod_nll_loss_return[~torch.isnan(mod_nll_loss_return)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/lib/network/mdod.py": {
        "torch": {
            "Sequential_40": {
                "variable": {
                    "value": "self.net[detector]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_fmap_ch, self.num_filters, 3, 1, 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "self.center_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.center_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "self.output_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.output_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "self.limit_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.limit_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.split(out_tensor, self.split_idxes, dim=1)",
                            "Call"
                        ],
                        [
                            "self.__get_output_tensors__(fmaps, net_data_dict, batch_size)",
                            "Call"
                        ],
                        [
                            "out_tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "out_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net['detector'].forward(fmap)",
                            "Call"
                        ],
                        [
                            "torch.cat(out_tensors, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_idxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_100": {
                "variable": {
                    "value": "(o1_xy, o1_wh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o1",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_113": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func.softplus(o2) * output_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "center_offset_i",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lib_util.create_coord_map(output_sizes[i], self.coord_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "center_offset_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center_offset_i] * self.max_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "output_scale_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.max_batch_size, 4, output_sizes[i][0], output_sizes[i][1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "limit_scale_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "center_offset_i.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "self.num_fmap_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[o1_xy, o1_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_101": {
                "input": {
                    "value": "o1_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(o1, [2, 2], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(o1_xy) * limit_scale + center_offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_113": {
                "input": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[o1_wh, o1_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lib/tester/__util__.py": {
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib_util.create_coord_map(size, coord_size)",
                            "Call"
                        ],
                        [
                            "points.reshape((1, 2, -1)).transpose((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points).float().cuda(mu1.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "keep_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_s > pi_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_109": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_141": {
                "input": {
                    "value": "mog_confs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.transpose(1, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "lib_util.sort_boxes_s(boxes_s, mog_confs_s)",
                            "Call"
                        ],
                        [
                            "mog_confs_s[:max_gauss]",
                            "Subscript"
                        ],
                        [
                            "mog_confs_s[keep_idxes]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/lib/util.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "integer.shape + (onehot_size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_74": {
                "variable": {
                    "value": "boxes[:, :, [0, 2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, [0, 2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "boxes[:, :, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_90": {
                "variable": {
                    "value": "(sorted_confs_s, sorted_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "confs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "confs_s",
                            "Method Argument"
                        ],
                        [
                            "confs_s",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "prod_221": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * dist",
                            "BinOp"
                        ],
                        [
                            "torch.exp(result) / (sig * math.sqrt(2.0 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "1 / (math.pi * sc * (dist + 1))",
                            "BinOp"
                        ],
                        [
                            "comp_pdf(points, mu, sig)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "pi * result",
                            "BinOp"
                        ],
                        [
                            "torch.sum(result, dim=3)",
                            "Call"
                        ],
                        [
                            "comp_pdf(points_s, mu_s, sig_s)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(pi * result)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(result, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "prod_242": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * dist",
                            "BinOp"
                        ],
                        [
                            "torch.exp(result) / (sig * math.sqrt(2.0 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "1 / (math.pi * sc * (dist + 1))",
                            "BinOp"
                        ],
                        [
                            "comp_pdf(points, mu, sig)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "pi * result",
                            "BinOp"
                        ],
                        [
                            "torch.sum(result, dim=3)",
                            "Call"
                        ],
                        [
                            "comp_pdf(points_s, mu_s, sig_s)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(pi * result)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(result, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "prod_258": {
                "variable": {
                    "value": "cat_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clsprobs ** onehot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "prod_267": {
                "variable": {
                    "value": "cat_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clsprobs ** onehot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_277": {
                "variable": {
                    "value": "ber_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ber_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels * probs + (1 - labels) * (1 - probs)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(ber_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_300": {
                "variable": {
                    "value": "gen_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gen_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.concatenate(gen_coords, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gen_coords).float().cuda()",
                            "Call"
                        ],
                        [
                            "gen_coords.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_327": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "pi_s[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "boxes_s[:, [0, 2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_s[:, [0, 2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "variable": {
                    "value": "boxes_s[:, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_s[:, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "sorted_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(confs_s, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(sorted_idxs, dim=1)",
                            "Call"
                        ],
                        [
                            "np.argsort(confs_s, axis=0)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.squeeze(sorted_idxs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_135": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "__boxes_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_137": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "__boxes_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_139": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_228": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * dist",
                            "BinOp"
                        ],
                        [
                            "torch.exp(result) / (sig * math.sqrt(2.0 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "1 / (math.pi * sc * (dist + 1))",
                            "BinOp"
                        ],
                        [
                            "comp_pdf(points, mu, sig)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "pi * result",
                            "BinOp"
                        ],
                        [
                            "torch.sum(result, dim=3)",
                            "Call"
                        ],
                        [
                            "comp_pdf(points_s, mu_s, sig_s)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(pi * result)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(result, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_248": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * dist",
                            "BinOp"
                        ],
                        [
                            "torch.exp(result) / (sig * math.sqrt(2.0 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "1 / (math.pi * sc * (dist + 1))",
                            "BinOp"
                        ],
                        [
                            "comp_pdf(points, mu, sig)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "pi * result",
                            "BinOp"
                        ],
                        [
                            "torch.sum(result, dim=3)",
                            "Call"
                        ],
                        [
                            "comp_pdf(points_s, mu_s, sig_s)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(pi * result)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(result, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), dim=dim, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_196": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * dist",
                            "BinOp"
                        ],
                        [
                            "torch.exp(result) / (sig * math.sqrt(2.0 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "1 / (math.pi * sc * (dist + 1))",
                            "BinOp"
                        ],
                        [
                            "comp_pdf(points, mu, sig)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "pi * result",
                            "BinOp"
                        ],
                        [
                            "torch.sum(result, dim=3)",
                            "Call"
                        ],
                        [
                            "comp_pdf(points_s, mu_s, sig_s)",
                            "Call"
                        ],
                        [
                            "torch.prod(result, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(pi * result)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(result, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_70": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(onehot.shape) - 1",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/option.py": {
        "torch": {
            "DataLoader_127": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(dataset_key)(global_args, dataset_args)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(batch_size / world_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader_info['shuffle']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader_info['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, shuffle=shuffle, num_replicas=world_size, rank=rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_123": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(dataset_key)(global_args, dataset_args)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader_info['shuffle']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world_size",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/run.py": {
        "torch": {
            "save_237": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(load_dir, 'optimizer.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'optimizer.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_41": {
                "type": {
                    "value": "device_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.run_args['devices'][rank]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_196": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_dict.items()",
                            "Call"
                        ],
                        [
                            "loss_dict.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_44": {
                "module": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "option.create_network(args.global_args, args.network_info)",
                            "Call"
                        ],
                        [
                            "nn.SyncBatchNorm.convert_sync_batchnorm(network) if args.run_args['sync_bnorm'] else network",
                            "IfExp"
                        ],
                        [
                            "network",
                            "Method Argument"
                        ],
                        [
                            "network",
                            "Method Argument"
                        ],
                        [
                            "network",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[device_num]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradScaler_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__206": {
                "parameters": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.run_args['max_grad']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.run_args['max_grad']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_169": {
                "f": {
                    "value": "optimizer_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(load_dir, 'optimizer.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'optimizer.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}