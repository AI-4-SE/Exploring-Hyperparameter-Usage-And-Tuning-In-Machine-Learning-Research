{
    "ade/common/data_utils/toy_data_gen.py": {
        "sklearn": {
            "make_swiss_roll_14": {
                "n_samples": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "make_circles_20": {
                "n_samples": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.08",
                    "possible_values": []
                }
            },
            "make_moons_26": {
                "n_samples": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "ade/common/custom_adam.py": {
        "tensorflow": {
            "CustomizedAdamOptimizer_33": {
                "base_class_0": {
                    "value": "tensorflow.keras.optimizers.Optimizer",
                    "possible_values": []
                },
                "self._lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._beta1": {
                    "value": "beta1",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._beta2": {
                    "value": "beta2",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_141": {
                "variable": {
                    "value": "self._lr_t",
                    "possible_values": []
                },
                "value": {
                    "value": "self._lr",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "convert_to_tensor_142": {
                "variable": {
                    "value": "self._beta1_t",
                    "possible_values": []
                },
                "value": {
                    "value": "self._beta1",
                    "possible_values": []
                },
                "name": {
                    "value": "beta1",
                    "possible_values": []
                }
            },
            "convert_to_tensor_143": {
                "variable": {
                    "value": "self._beta2_t",
                    "possible_values": []
                },
                "value": {
                    "value": "self._beta2",
                    "possible_values": []
                },
                "name": {
                    "value": "beta2",
                    "possible_values": []
                }
            },
            "convert_to_tensor_144": {
                "variable": {
                    "value": "self._epsilon_t",
                    "possible_values": []
                },
                "value": {
                    "value": "self._epsilon",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "possible_values": []
                }
            },
            "clip_by_value_150": {
                "variable": {
                    "value": "grad",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "possible_values": [
                        [
                            "tf.clip_by_value(grad, -clip_bounds, clip_bounds)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-clip_bounds",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_bounds",
                    "possible_values": [
                        [
                            "3 * tf.sqrt(v / (1 - self._beta2_power)) + 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_177": {
                "variable": {
                    "value": "beta1_power",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta1_power",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_178": {
                "variable": {
                    "value": "beta2_power",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta2_power",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_179": {
                "variable": {
                    "value": "lr_t",
                    "possible_values": []
                },
                "x": {
                    "value": "self._lr_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_180": {
                "variable": {
                    "value": "beta1_t",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta1_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "beta2_t",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta2_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_182": {
                "variable": {
                    "value": "epsilon_t",
                    "possible_values": []
                },
                "x": {
                    "value": "self._epsilon_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "assign_187": {
                "variable": {
                    "value": "m_t",
                    "possible_values": []
                },
                "ref": {
                    "value": "m",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "m * beta1_t",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "assign_194": {
                "variable": {
                    "value": "v_t",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v * beta2_t",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "sqrt_197": {
                "variable": {
                    "value": "v_sqrt",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t",
                    "possible_values": []
                }
            },
            "assign_sub_198": {
                "variable": {
                    "value": "var_update",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "possible_values": []
                },
                "value": {
                    "value": "lr * m_t / (v_sqrt + epsilon_t)",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "group_201": {
                "*inputs": {
                    "value": "*[var_update, m_t, v_t]",
                    "possible_values": []
                }
            },
            "group_230": {
                "*inputs": {
                    "value": "*update_ops + [update_beta1, update_beta2]",
                    "possible_values": []
                },
                "name": {
                    "value": "name_scope",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "self._beta1_power",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_168": {
                "x": {
                    "value": "self._beta2_power",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_169": {
                "x": {
                    "value": "self._lr_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "self._beta1_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "self._beta2_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "self._epsilon_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "control_dependencies_189": {
                "control_inputs": {
                    "value": "[m_t]",
                    "possible_values": []
                }
            },
            "control_dependencies_195": {
                "control_inputs": {
                    "value": "[v_t]",
                    "possible_values": []
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "[resource_variable_ops.resource_scatter_add(x.handle, i, v)]",
                    "possible_values": []
                }
            },
            "control_dependencies_222": {
                "control_inputs": {
                    "value": "update_ops",
                    "possible_values": []
                }
            },
            "colocate_with_128": {
                "op": {
                    "value": "first_var",
                    "possible_values": [
                        [
                            "min(var_list, key=lambda x: x.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_149": {
                "x": {
                    "value": "v / (1 - self._beta2_power)",
                    "possible_values": []
                }
            },
            "cast_154": {
                "x": {
                    "value": "self._beta1_power",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_155": {
                "x": {
                    "value": "self._beta2_power",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_156": {
                "x": {
                    "value": "self._lr_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_157": {
                "x": {
                    "value": "self._beta1_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "self._beta2_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "cast_159": {
                "x": {
                    "value": "self._epsilon_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "1 - beta2_power",
                    "possible_values": []
                }
            },
            "scatter_add_207": {
                "ref": {
                    "value": "x",
                    "possible_values": []
                },
                "indices": {
                    "value": "i",
                    "possible_values": []
                },
                "updates": {
                    "value": "v",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "colocate_with_223": {
                "op": {
                    "value": "self._beta1_power",
                    "possible_values": []
                }
            }
        }
    },
    "ade/common/distributions.py": {
        "tensorflow": {
            "constant_14": {
                "variable": {
                    "value": "self.tf_mu",
                    "possible_values": []
                },
                "value": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "np.array(mu, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, len(mu)]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "self.tf_sigma",
                    "possible_values": []
                },
                "value": {
                    "value": "sigma",
                    "possible_values": [
                        [
                            "np.array(sigma, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, len(sigma)]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "input_tensor": {
                    "value": "t",
                    "possible_values": [
                        [
                            "-(x - mu) ** 2 / 2.0",
                            "BinOp"
                        ],
                        [
                            "t / (sigma + 1e-06) ** 2",
                            "BinOp"
                        ],
                        [
                            "t - 0.5 * tf.log(2 * np.pi * sigma * sigma + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "t - 0.5 * np.log(2 * np.pi)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "t",
                    "possible_values": [
                        [
                            "-(x - mu) ** 2 / 2.0",
                            "BinOp"
                        ],
                        [
                            "t / (sigma + 1e-06) ** 2",
                            "BinOp"
                        ],
                        [
                            "t - 0.5 * tf.log(2 * np.pi * sigma * sigma + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "t - 0.5 * np.log(2 * np.pi)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_37": {
                "x": {
                    "value": "2 * np.pi * sigma * sigma + 1e-06",
                    "possible_values": []
                }
            }
        }
    },
    "ade/common/f_family.py": {
        "tensorflow": {
            "get_variable_18": {
                "variable": {
                    "value": "self.mu",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_normal() if init_mu is None else tf.constant_initializer(init_mu)",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "self.sigma",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0 if init_sigma is None else init_sigma)",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x - self.mu) ** 2 / 2.0 / variance",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x - self.mu) ** 2 / 2.0 / variance",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "1.0 if init_sigma is None else init_sigma",
                    "possible_values": []
                }
            },
            "constant_initializer_19": {
                "value": {
                    "value": "init_mu",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ade/common/flow_family.py": {
        "tensorflow": {
            "normal_32": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(mu)",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "exp_33": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "x": {
                    "value": "log_sigma",
                    "possible_values": [
                        [
                            "tf.matmul(hidden, self.w_logsig) + self.b_logsig",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "psi",
                    "possible_values": []
                },
                "a": {
                    "value": "1 - a ** 2",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.w)",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.w)",
                    "possible_values": []
                },
                "b": {
                    "value": "self.u",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "self.w_mu",
                    "possible_values": []
                },
                "name": {
                    "value": "w_mu",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, output_dim]",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self.b_mu",
                    "possible_values": []
                },
                "name": {
                    "value": "b_mu",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, output_dim]",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.w_logsig",
                    "possible_values": []
                },
                "name": {
                    "value": "w_logsig",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, output_dim]",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "self.b_logsig",
                    "possible_values": []
                },
                "name": {
                    "value": "b_logsig",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, output_dim]",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "ll",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t",
                    "possible_values": [
                        [
                            "-eps ** 2 / 2.0 - 0.5 * tf.log(2 * np.pi) - log_sigma",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "ll",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t",
                    "possible_values": [
                        [
                            "-eps ** 2 / 2.0 - 0.5 * tf.log(2 * np.pi) - log_sigma",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "self.u",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "self.w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "self.b",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "self.u",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.u",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim, 1)",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "self.w",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.w",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim, 1)",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "a": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w_mu",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w_logsig",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "a": {
                    "value": "self.w",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "a": {
                    "value": "self.w",
                    "possible_values": []
                }
            },
            "softplus_65": {
                "features": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(self.w), self.u)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_68": {
                "input": {
                    "value": "tf.log(1 + tf.matmul(psi, u_h))",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "a",
                    "possible_values": [
                        [
                            "self.h(tf.matmul(z, self.w) + self.b)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(u_h)",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "tf.matmul(hidden, self.w_mu) + self.b_mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "a": {
                    "value": "z",
                    "possible_values": [
                        [
                            "mu + sigma * eps",
                            "BinOp"
                        ],
                        [
                            "z + tf.matmul(a, tf.transpose(u_h))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "a": {
                    "value": "tf.transpose(self.w)",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w",
                    "possible_values": []
                }
            },
            "log_68": {
                "x": {
                    "value": "1 + tf.matmul(psi, u_h)",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "a": {
                    "value": "u_h",
                    "possible_values": [
                        [
                            "self.u + (m - x) * self.w / tf.matmul(tf.transpose(self.w), self.w)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_36": {
                "x": {
                    "value": "2 * np.pi",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "self.w",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "a": {
                    "value": "psi",
                    "possible_values": [
                        [
                            "tf.matmul(1 - a ** 2, tf.transpose(self.w))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "u_h",
                    "possible_values": [
                        [
                            "self.u + (m - x) * self.w / tf.matmul(tf.transpose(self.w), self.w)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ade/common/mcmc_net.py": {
        "tensorflow": {
            "reshape_49": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(u, q)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "init_p",
                            "Name"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0)",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0)",
                            "Call"
                        ],
                        [
                            "self._euler_p(U(q), q, p, eps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q)) * self.sgld_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.random.normal(shape=tf.shape(q)) * self.sgld_noise_std",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(q)",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(u, q)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "init_p",
                            "Name"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0)",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0)",
                            "Call"
                        ],
                        [
                            "self._euler_p(U(q), q, p, eps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q)) * self.sgld_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.random.normal(shape=tf.shape(q)) * self.sgld_noise_std",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(q)",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(u, q)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "init_p",
                            "Name"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0)",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0)",
                            "Call"
                        ],
                        [
                            "self._euler_p(U(q), q, p, eps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q)) * self.sgld_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.random.normal(shape=tf.shape(q)) * self.sgld_noise_std",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(q)",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(u, q)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "possible_values": []
                }
            },
            "clip_by_norm_46": {
                "t": {
                    "value": "vec",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.hmc_clip",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "stop_gradient_51": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "input": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dq, -self.sgld_clip_value, self.sgld_clip_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_142": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "input": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dq, -self.sgld_clip_value, self.sgld_clip_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_167": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "input": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dq, -self.sgld_clip_value, self.sgld_clip_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_204": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "input": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dq, -self.sgld_clip_value, self.sgld_clip_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_49": {
                "ys": {
                    "value": "u",
                    "possible_values": [
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q_current)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_99": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "t": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.x_min",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.x_max",
                    "possible_values": []
                }
            },
            "stop_gradient_104": {
                "variable": {
                    "value": "ratio",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.squeeze(tf.exp(H_current - H_new))",
                    "possible_values": []
                }
            },
            "where_110": {
                "variable": {
                    "value": "q_current",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_accept",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=tf.shape(ratio)) < ratio",
                            "Compare"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(ratio)) < ratio",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_current",
                    "possible_values": [
                        [
                            "q",
                            "Name"
                        ],
                        [
                            "q",
                            "Name"
                        ],
                        [
                            "tf.where(is_accept, q, q_current)",
                            "Call"
                        ],
                        [
                            "q",
                            "Name"
                        ],
                        [
                            "self._euler_q(u, q, eps) + p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "accept_rate",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(is_accept)",
                    "possible_values": []
                }
            },
            "gradients_140": {
                "ys": {
                    "value": "u",
                    "possible_values": [
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q_current)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_143": {
                "values": {
                    "value": "[dq, q]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_165": {
                "ys": {
                    "value": "u",
                    "possible_values": [
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q_current)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_168": {
                "values": {
                    "value": "[dq, q]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_202": {
                "ys": {
                    "value": "u",
                    "possible_values": [
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q)",
                            "Call"
                        ],
                        [
                            "U(q_current)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_208": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "t": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dq, -self.sgld_clip_value, self.sgld_clip_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.sgld_clip_value",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.sgld_clip_value",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "p ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cond_115": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "pred": {
                    "value": "accept_rate < 0.6",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : eps / 1.1",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "possible_values": []
                }
            },
            "cond_116": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "pred": {
                    "value": "accept_rate > 0.7",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : eps * 1.1",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "possible_values": []
                }
            },
            "clip_by_norm_210": {
                "variable": {
                    "value": "dp",
                    "possible_values": []
                },
                "t": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gradients(u, q), [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dq, -self.sgld_clip_value, self.sgld_clip_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.sgld_clip_value",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "name": {
                    "value": "'hmc_eps%d' % i",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, dim)",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(args.hmc_step_size)",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "tf.exp(H_current - H_new)",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "tensor": {
                    "value": "tf.cast(is_accept, tf.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(cur_pnorm)",
                    "possible_values": []
                }
            },
            "to_float_112": {
                "x": {
                    "value": "is_accept",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=tf.shape(ratio)) < ratio",
                            "Compare"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(ratio)) < ratio",
                            "Compare"
                        ]
                    ]
                }
            },
            "clip_by_norm_169": {
                "t": {
                    "value": "t",
                    "possible_values": [
                        [
                            "self.gv(tf.concat([dq, q], axis=1))",
                            "Call"
                        ],
                        [
                            "self.gv(tf.concat([dq, q], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "name": {
                    "value": "'hmc_eps%d' % i",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, dim)",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(args.hmc_step_size)",
                    "possible_values": []
                }
            },
            "normal_234": {
                "shape": {
                    "value": "tf.shape(q)",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "p ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "p ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_104": {
                "x": {
                    "value": "H_current - H_new",
                    "possible_values": []
                }
            },
            "uniform_108": {
                "shape": {
                    "value": "tf.shape(ratio)",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "is_accept",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=tf.shape(ratio)) < ratio",
                            "Compare"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(ratio)) < ratio",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "clip_by_norm_174": {
                "t": {
                    "value": "self.gx(p)",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "constant_initializer_41": {
                "value": {
                    "value": "args.hmc_step_size",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "cur_pnorm",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(p ** 2, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "cur_pnorm * tf.reshape(tf.cast(is_accept, tf.float32), shape=tf.shape(cur_pnorm))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_199": {
                "value": {
                    "value": "args.hmc_step_size",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_234": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "q_current",
                            "Name"
                        ],
                        [
                            "self._euler_q(q, p, eps, M)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_106": {
                "input": {
                    "value": "ratio",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.squeeze(tf.exp(H_current - H_new)))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_108": {
                "input": {
                    "value": "ratio",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.squeeze(tf.exp(H_current - H_new)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ade/common/test/test_hmc.py": {
        "tensorflow": {
            "placeholder_30": {
                "variable": {
                    "value": "ph_z0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1000, cmd_args.gauss_dim)",
                    "possible_values": []
                }
            },
            "set_random_seed_19": {
                "seed": {
                    "value": "cmd_args.seed",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "energy_func",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ade/common/tf_utils.py": {
        "tensorflow": {
            "reshape_82": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w%d' % t, shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "vars[t * 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "self.spectral_norm(w, l, self.sp_iters)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "name": {
                    "value": "'u-%d' % l",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "stop_gradient_99": {
                "variable": {
                    "value": "u_hat",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_100": {
                "variable": {
                    "value": "v_hat",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_102": {
                "a": {
                    "value": "v_hat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w%d' % t, shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "vars[t * 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "self.spectral_norm(w, l, self.sp_iters)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "v_",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "possible_values": []
                }
            },
            "l2_normalize_94": {
                "variable": {
                    "value": "v_hat",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "u_",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w%d' % t, shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "vars[t * 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "self.spectral_norm(w, l, self.sp_iters)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_97": {
                "variable": {
                    "value": "u_hat",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "w_norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "possible_values": [
                        [
                            "w / (sigma + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_102": {
                "a": {
                    "value": "u_hat",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_104": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "'w%d' % t",
                    "possible_values": []
                },
                "shape": {
                    "value": "(in_dim, out_dim)",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "name": {
                    "value": "'b%d' % t",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, out_dim)",
                    "possible_values": []
                }
            },
            "random_normal_initializer_84": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "a": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w%d' % t, shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "vars[t * 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "self.spectral_norm(w, l, self.sp_iters)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_115": {
                "a": {
                    "value": "h",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.matmul(h, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.act_hidden(h)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w%d' % t, shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "vars[t * 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "self.spectral_norm(w, l, self.sp_iters)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ade/experiments/mvn_unimodal/main_ade.py": {
        "tensorflow": {
            "set_random_seed_28": {
                "seed": {
                    "value": "cmd_args.seed",
                    "possible_values": []
                }
            },
            "set_random_seed_30": {
                "seed": {
                    "value": "cmd_args.seed",
                    "possible_values": []
                }
            }
        }
    },
    "ade/experiments/toy_family/main_ade_toy.py": {
        "tensorflow": {
            "placeholder_77": {
                "variable": {
                    "value": "ph_z0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, db.dim)",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "ph_x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, db.dim)",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x_energy",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-energy_func(ph_x)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "x_energy_ema",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-ema_energy_func(ph_x)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "pdf_dict[key]",
                    "possible_values": []
                },
                "logits": {
                    "value": "key * x_energy",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "pdf_ema_dict[key]",
                    "possible_values": []
                },
                "logits": {
                    "value": "key * x_energy_ema",
                    "possible_values": []
                }
            },
            "set_random_seed_45": {
                "seed": {
                    "value": "cmd_args.seed",
                    "possible_values": []
                }
            },
            "set_random_seed_47": {
                "seed": {
                    "value": "cmd_args.seed",
                    "possible_values": []
                }
            }
        }
    },
    "ade/experiments/train_utils.py": {
        "tensorflow": {
            "reduce_mean_44": {
                "variable": {
                    "value": "f_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-fx + f_fake_x",
                    "possible_values": []
                }
            },
            "trainable_variables_68": {
                "variable": {
                    "value": "vars",
                    "possible_values": []
                },
                "scope": {
                    "value": "energy_func",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "ph_real_data",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, db.dim)",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "ph_z0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, db.dim)",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_143": {
                "variable": {
                    "value": "ema",
                    "possible_values": []
                },
                "decay": {
                    "value": "cmd_args.ema_decay",
                    "possible_values": []
                }
            },
            "ConfigProto_158": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "variable": {
                    "value": "ddx",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(ddx), axis=1)",
                    "possible_values": []
                }
            },
            "trainable_variables_145": {
                "variable": {
                    "value": "vars",
                    "possible_values": []
                },
                "scope": {
                    "value": "energy_func",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "input_tensor": {
                    "value": "ll",
                    "possible_values": []
                }
            },
            "uniform_53": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(x)[0], 1)",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "energy_func",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "energy_func",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "control_dependencies_144": {
                "control_inputs": {
                    "value": "[train_disc]",
                    "possible_values": []
                }
            },
            "Session_166": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_27": {
                "input_tensor": {
                    "value": "ll",
                    "possible_values": []
                }
            },
            "trainable_variables_29": {
                "scope": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "where_30": {
                "condition": {
                    "value": "tf.is_nan(grad)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(grad)",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "stop_gradient_43": {
                "input": {
                    "value": "x_fake",
                    "possible_values": []
                }
            },
            "gradients_56": {
                "ys": {
                    "value": "d_hat",
                    "possible_values": [
                        [
                            "energy_func(x_hat)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_hat",
                    "possible_values": [
                        [
                            "alpha * x + (1 - alpha) * x_fake",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "tf.square(ddx)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "tf.square(ddx - 1.0)",
                    "possible_values": []
                }
            },
            "trainable_variables_60": {
                "scope": {
                    "value": "energy_func",
                    "possible_values": []
                }
            },
            "where_61": {
                "condition": {
                    "value": "tf.is_nan(grad)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(grad)",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "global_variables_initializer_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_nan_30": {
                "x": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "zeros_like_30": {
                "input": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "ddx",
                    "possible_values": [
                        [
                            "tf.gradients(d_hat, x_hat)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(ddx), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(ddx - 1.0)) * args.gp_lambda",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_58": {
                "x": {
                    "value": "ddx - 1.0",
                    "possible_values": []
                }
            },
            "is_nan_61": {
                "x": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "input": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "ade_cifar/exp_ade/hmc.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "self.placeholder",
                    "possible_values": []
                },
                "name": {
                    "value": "hmc_eps",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(u, q)",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random.normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "p * std_p",
                            "BinOp"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0, self.md_list[step])",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0, self.md_list[step])",
                            "Call"
                        ],
                        [
                            "self._euler_p(U(q, reuse=reuse_flag), q, p, eps, self.md_list[step])",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, (-1, np.prod(self.dim)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(q)",
                    "possible_values": []
                }
            },
            "stop_gradient_39": {
                "variable": {
                    "value": "dq",
                    "possible_values": []
                },
                "input": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), self.shape)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_55": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.reshape(p, tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "tf.random.normal(shape=tf.shape(q))",
                            "Call"
                        ],
                        [
                            "p * std_p",
                            "BinOp"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0, self.md_list[step])",
                            "Call"
                        ],
                        [
                            "self._euler_p(u, q, p, eps / 2.0, self.md_list[step])",
                            "Call"
                        ],
                        [
                            "self._euler_p(U(q, reuse=reuse_flag), q, p, eps, self.md_list[step])",
                            "Call"
                        ],
                        [
                            "tf.reshape(p, (-1, np.prod(self.dim)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, np.prod(self.dim))",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "hmc",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "gradients_37": {
                "ys": {
                    "value": "u",
                    "possible_values": [
                        [
                            "U(q, reuse=reuse_flag)",
                            "Call"
                        ],
                        [
                            "U(q, reuse=reuse_flag)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self._euler_q(q, p, eps, M, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_44": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self._euler_q(q, p, eps, M, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_76": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(q)",
                    "possible_values": []
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "t": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self._euler_q(q, p, eps, M, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.log(self.md_list[step] + 1e-06)",
                    "possible_values": []
                }
            },
            "constant_29": {
                "value": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "clip_by_value_40": {
                "t": {
                    "value": "dq",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gradients(u, q), self.shape)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dq)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.01",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "log_94": {
                "x": {
                    "value": "self.md_list[step] + 1e-06",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "name": {
                    "value": "'hmc_eps_%d' % i",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) + dim",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(10.0)",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "p ** 2",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "p ** 2",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[]",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self._euler_q(q, p, eps, M, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self._euler_q(q, p, eps, M, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(q, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_27": {
                "value": {
                    "value": "10.0",
                    "possible_values": []
                }
            }
        }
    },
    "ade_cifar/exp_ade/libs/ops.py": {
        "tensorflow": {
            "get_variable_24": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "biases",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "biases",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "possible_values": []
                }
            },
            "maximum_74": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_normed_weight(w, update_collection=update_collection)",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_57": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_normed_weight(w, update_collection=update_collection)",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_61": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "bias",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "mul",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "possible_values": []
                },
                "b": {
                    "value": "spectral_normed_weight(weight, update_collection=update_collection)",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "mul",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [shape[1], output_size], tf.float32, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_8": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "possible_values": []
                }
            },
            "bias_add_33": {
                "value": {
                    "value": "conv",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, spectral_normed_weight(w, update_collection=update_collection), strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_shape[-1]], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_66": {
                "value": {
                    "value": "deconv",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, spectral_normed_weight(w, update_collection=update_collection), output_shape=output_shape, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_shape[-1]], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_89": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(1.0 / shape[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(1.0 / shape[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_55": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(1.0 / shape[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "constant_initializer_92": {
                "value": {
                    "value": "bias_start",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ade_cifar/exp_ade/libs/sn.py": {
        "tensorflow": {
            "reshape_15": {
                "variable": {
                    "value": "W_reshaped",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, W_shape[-1]]",
                    "possible_values": []
                }
            },
            "while_loop_22": {
                "variable": {
                    "value": "(_, u_final, v_final)",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2: i < num_iters",
                    "possible_values": []
                },
                "body": {
                    "value": "power_iteration",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), u, tf.zeros(dtype=tf.float32, shape=[1, W_reshaped.shape.as_list()[0]]))",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_shape[-1]]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "W_bar",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "W_bar",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_19": {
                "a": {
                    "value": "u_i",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(W_reshaped)",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "a": {
                    "value": "v_ip1",
                    "possible_values": [
                        [
                            "_l2normalize(tf.matmul(u_i, tf.transpose(W_reshaped)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_31": {
                "a": {
                    "value": "v_final",
                    "possible_values": []
                },
                "b": {
                    "value": "W_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_34": {
                "control_inputs": {
                    "value": "[u.assign(u_final)]",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "v_final",
                    "possible_values": []
                },
                "b": {
                    "value": "W_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_44": {
                "name": {
                    "value": "update_collection",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "u.assign(u_final)",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "input_tensor": {
                    "value": "v ** 2",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "a": {
                    "value": "W_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_25": {
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_reshaped.shape.as_list()[0]]",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "a": {
                    "value": "u_final",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "u_final",
                    "possible_values": []
                }
            }
        }
    },
    "ade_cifar/exp_ade/test.py": {
        "tensorflow": {
            "Variable_40": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "is_training",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, generator.generate_noise().shape[1]]",
                    "possible_values": []
                }
            },
            "ConfigProto_50": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_52": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "FLAGS.__flags",
                            "Attribute"
                        ],
                        [
                            "{k: FLAGS[k]._value for k in FLAGS}",
                            "DictComp"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_55": {
                "variable": {
                    "value": "best_saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "is_img",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "is_feat",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.contrib.gan.eval.run_inception(tf.image.resize_bilinear(is_img, [299, 299]))",
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "resize_bilinear_59": {
                "images": {
                    "value": "is_img",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[299, 299]",
                    "possible_values": []
                }
            }
        }
    },
    "ade_cifar/exp_ade/train.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "is_training",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, generator.generate_noise().shape[1]]",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "logprob_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logprob",
                    "possible_values": [
                        [
                            "logprob + delta_lp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "hmc_p_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(hmc_p ** 2, reduction_indices=[1, 2, 3])",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_hat.shape",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "d_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_fake - d_real",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "g_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-d_fake",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "logprob_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logprob",
                    "possible_values": [
                        [
                            "logprob + delta_lp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_64": {
                "variable": {
                    "value": "d_loss_summary_op",
                    "possible_values": []
                },
                "name": {
                    "value": "d_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss",
                    "possible_values": [
                        [
                            "tf.reduce_mean(d_fake - d_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_65": {
                "variable": {
                    "value": "g_loss_summary_op",
                    "possible_values": []
                },
                "name": {
                    "value": "g_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss",
                    "possible_values": [
                        [
                            "tf.reduce_mean(-d_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_66": {
                "variable": {
                    "value": "merged_summary_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_67": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "results/snapshots",
                    "possible_values": []
                }
            },
            "get_collection_69": {
                "variable": {
                    "value": "d_vars",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "critic",
                    "possible_values": []
                }
            },
            "get_collection_70": {
                "variable": {
                    "value": "g_vars",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "get_collection_71": {
                "variable": {
                    "value": "hmc_vars",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "hmc",
                    "possible_values": []
                }
            },
            "AdamOptimizer_73": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.adam_alpha",
                    "possible_values": []
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "hmc_optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.adam_alpha",
                    "possible_values": []
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_87": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "FLAGS.__flags",
                            "Attribute"
                        ],
                        [
                            "{k: FLAGS[k]._value for k in FLAGS}",
                            "DictComp"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_90": {
                "variable": {
                    "value": "best_saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "is_img",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "is_feat",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.contrib.gan.eval.run_inception(tf.image.resize_bilinear(is_img, [299, 299]))",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "hmc_p ** 2",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "possible_values": []
                }
            },
            "global_variables_initializer_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "latest_checkpoint_102": {
                "checkpoint_dir": {
                    "value": "results/snapshots",
                    "possible_values": []
                }
            },
            "resize_bilinear_100": {
                "images": {
                    "value": "is_img",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[299, 299]",
                    "possible_values": []
                }
            },
            "latest_checkpoint_103": {
                "checkpoint_dir": {
                    "value": "results/snapshots",
                    "possible_values": []
                }
            }
        }
    },
    "ade_cifar/exp_ade/utils.py": {
        "tensorflow": {
            "Session_8": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}