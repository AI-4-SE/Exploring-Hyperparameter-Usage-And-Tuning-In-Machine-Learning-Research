{
    "nams.py": {
        "torch": {
            "zeros_211": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(len(a))",
                            "Call"
                        ],
                        [
                            "float(len(a))",
                            "Call"
                        ],
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ]
                    ]
                }
            },
            "exp_226": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_230": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(p, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_232": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(loss, 1 - p)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "(pos_loss + neg_loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor((loss,))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loss + w * max(0, self.distances[i, j] - self.distances[i, k] + self.m)",
                            "BinOp"
                        ],
                        [
                            "MyTripletLossFunc(DBL=self.DBL, m=self.m, triplet_type=self.triplet_type)(features, labels)",
                            "Call"
                        ],
                        [
                            "MyContrastiveLossFunc()(features, labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.CrossEntropyLoss()(sims, labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.CrossEntropyLoss()(x, labels)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_233": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(loss, 1 - p)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "(pos_loss + neg_loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor((loss,))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loss + w * max(0, self.distances[i, j] - self.distances[i, k] + self.m)",
                            "BinOp"
                        ],
                        [
                            "MyTripletLossFunc(DBL=self.DBL, m=self.m, triplet_type=self.triplet_type)(features, labels)",
                            "Call"
                        ],
                        [
                            "MyContrastiveLossFunc()(features, labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.CrossEntropyLoss()(sims, labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.CrossEntropyLoss()(x, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_316": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(b == j)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(N, D)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_319": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_326": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, y_t)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_491": {
                "variable": {
                    "value": "self.proxies",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_proxies, feature_size) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_502": {
                "variable": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm_s * x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.norm_s * x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.norm_s * x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(proxies)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_422": {
                "variable": {
                    "value": "grad_features[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grad_features_np[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_432": {
                "variable": {
                    "value": "self.norm_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor((self.norm_s,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_446": {
                "variable": {
                    "value": "self.norm_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor((self.norm_s,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_470": {
                "ndarray": {
                    "value": "self.distances",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_494": {
                "variable": {
                    "value": "self.norm_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor((self.norm_s,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_227": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_230": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data / torch.sum(data, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.mul(p, x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_231": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data / torch.sum(data, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.mul(p, x), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_322": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(y, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_436": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_449": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_486": {
                "ndarray": {
                    "value": "grad_features2_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_features2.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_499": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_502": {
                "input": {
                    "value": "proxies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proxies",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_503": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_515": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "0.0 + np.sum(a == i)",
                            "BinOp"
                        ],
                        [
                            "one_hot_embedding(target, 110)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(x.double().cuda())",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=1, keepdim=True).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_491": {
                "*size": {
                    "value": "num_proxies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "110",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    }
}