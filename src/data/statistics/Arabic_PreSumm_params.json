{
    "src/distributed.py": {
        "torch": {}
    },
    "src/models/adam.py": {
        "torch": {
            "zeros_like_74": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/data_loader.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(pre_src, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(pre_tgt, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(pre_segs, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "clss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(pre_clss, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "src_sent_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(pre_src_sent_labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/decoder.py": {
        "torch": {
            "LayerNorm_37": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_38": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_62": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_152": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "all_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_input, input_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(saved_inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/encoder.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_25": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_26": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_28": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_29": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_57": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.transformer_inter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(d_model, heads, d_ff, dropout) for _ in range(num_inter_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_83": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/loss.py": {
        "torch": {
            "full_174": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "kl_div_188": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NLLLoss_205": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "backward_290": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_236": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_287": {
                "tensor": {
                    "value": "state[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/model_builder.py": {
        "torch": {
            "LogSoftmax_106": {
                "variable": {
                    "value": "gen_func",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dec_hidden_size, vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_203": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_151": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_198": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_233": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "top_vec.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_22": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_83": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/neural.py": {
        "torch": {
            "arange_22": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lt_22": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_type == 'mlp'",
                            "Compare"
                        ]
                    ]
                }
            },
            "softmax_192": {
                "variable": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align.view(batch * target_l, source_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_195": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(align.view(batch * target_l, source_l), -1)",
                            "Call"
                        ],
                        [
                            "align_vectors.view(batch, target_l, source_l)",
                            "Call"
                        ],
                        [
                            "align_vectors.squeeze(1)",
                            "Call"
                        ],
                        [
                            "align_vectors.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "concat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_229": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_231": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_232": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_296": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_297": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_410": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_148": {
                "variable": {
                    "value": "wquh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wq + uh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_201": {
                "variable": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_out(concat_c).view(batch, target_l, dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(attn_h)",
                            "Call"
                        ],
                        [
                            "attn_h.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_h.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn[:, :-1], attn_masked.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_432": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_29": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.linear_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_136": {
                "input": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_t_.view(tgt_batch, tgt_len, tgt_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_428": {
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_369": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'].to(device), key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'].to(device), value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_422": {
                "input": {
                    "value": "attn_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn[:, -1] * predefined_graph_1",
                            "BinOp"
                        ],
                        [
                            "attn_masked / (torch.sum(attn_masked, 2).unsqueeze(2) + 1e-09)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_422": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/optimizers.py": {
        "torch": {
            "SGD_157": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_159": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__208": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_165": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_49": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/predictor.py": {
        "torch": {
            "arange_243": {
                "variable": {
                    "value": "batch_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_245": {
                "variable": {
                    "value": "beam_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_251": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_330": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/reporter.py": {
        "torch": {}
    },
    "src/models/reporter_ext.py": {
        "torch": {}
    },
    "src/models/trainer.py": {
        "torch": {
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_343": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optims': self.optims}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/trainer_ext.py": {
        "torch": {
            "BCELoss_97": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_368": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optim': self.optim}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/prepro/data_builder.py": {
        "torch": {
            "save_352": {
                "obj": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[args.dataset]",
                            "List"
                        ],
                        [
                            "['train', 'valid', 'test']",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[args.dataset]",
                            "List"
                        ],
                        [
                            "['train', 'test', 'valid']",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_abstractive.py": {
        "torch": {
            "load_175": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_236": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_282": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_303": {
                "variable": {
                    "value": "bert_from_extractive",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_extractive",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_307": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_287": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ]
                    ]
                }
            },
            "manual_seed_288": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_extractive.py": {
        "torch": {
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_183": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "Name"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_212": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_device_217": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ]
                    ]
                }
            },
            "manual_seed_218": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/translate/beam.py": {
        "torch": {
            "stack_179": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/translate/penalties.py": {
        "torch": {}
    }
}