{
    "adv_eval.py": {
        "sklearn": {},
        "torch": {
            "load_60": {
                "f": {
                    "value": "saves/ + exp_name + /best_point_model.th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "os.path.join(gan_dir, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gan_pytorch.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "Linear_76": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ReLULayer(noise_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ReLULayer(input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "G_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "Adam_202": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_398": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "generator.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_238": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "opt_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ZDIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_config['zdim']",
                            "Subscript"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "ZDIM or 32",
                            "BoolOp"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_274": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "opt_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ZDIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_config['zdim']",
                            "Subscript"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "ZDIM or 32",
                            "BoolOp"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_296": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "opt_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ZDIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_config['zdim']",
                            "Subscript"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "ZDIM or 32",
                            "BoolOp"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ],
                        [
                            "self.ZDIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_98": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.noise_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_150": {
                "input": {
                    "value": "D_fake_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(generated_data)",
                            "Call"
                        ],
                        [
                            "D(generated_data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tfv_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.ones(BATCH_SIZE), requires_grad=False).type(torch.cuda.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "idata",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "opt_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_144": {
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "opt_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "self.BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_149": {
                "input": {
                    "value": "(D_fake_output - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_151": {
                "input": {
                    "value": "D_fake_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(generated_data)",
                            "Call"
                        ],
                        [
                            "D(generated_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_152": {
                "input": {
                    "value": "D_fake_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(generated_data)",
                            "Call"
                        ],
                        [
                            "D(generated_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_158": {
                "input": {
                    "value": "D_real_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_159": {
                "input": {
                    "value": "D_real_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_156": {
                "input": {
                    "value": "D_fake_output ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_157": {
                "input": {
                    "value": "D_fake_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(generated_data)",
                            "Call"
                        ],
                        [
                            "D(generated_data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tfv_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(BATCH_SIZE), requires_grad=False).type(torch.cuda.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_310": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(0)] + [1] * (x.dim() - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_316": {
                "outputs": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(z)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.cuda(Variable(torch.randn(batch_size, self.noise_size)))",
                            "Call"
                        ],
                        [
                            "torch.randn(BATCH_SIZE, ZDIM)",
                            "Call"
                        ],
                        [
                            "Variable(z.cuda())",
                            "Call"
                        ],
                        [
                            "torch.randn(BATCH_SIZE, ZDIM)",
                            "Call"
                        ],
                        [
                            "Variable(z.cuda())",
                            "Call"
                        ],
                        [
                            "torch.randn(BATCH_SIZE, ZDIM)",
                            "Call"
                        ],
                        [
                            "Variable(z.cuda())",
                            "Call"
                        ],
                        [
                            "x + alpha * (y - x)",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(o.size()).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_316": {
                "*size": {
                    "value": "o.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "average_precision_score_306": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(safe.shape[0] + risky.shape[0], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros(safe.shape[0] + risky.shape[0], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.vstack((safe, risky)))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.vstack((safe, risky)))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_307": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(safe.shape[0] + risky.shape[0], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros(safe.shape[0] + risky.shape[0], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.vstack((safe, risky)))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.vstack((safe, risky)))",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_313": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(safe.shape[0] + risky.shape[0], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros(safe.shape[0] + risky.shape[0], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.vstack((safe, risky)))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.vstack((safe, risky)))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "softmax_23": {
                "variable": {
                    "value": "sm_oos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.forward(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "mean_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(output_probs_list, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_510": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_511": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_512": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "BabyMnist(train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "output_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.cpu()",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "outputs_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs_samples, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "outputs_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs_samples, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_237": {
                "variable": {
                    "value": "outputs_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.cpu()",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_122": {
                "tensors": {
                    "value": "output_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "test_inputs_anomaly_detection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_inputs_anomaly_detection, 0)[:n_anom]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "outputs_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs_samples, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_558": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_396": {
                "variable": {
                    "value": "cifar5_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "BabyMnist(train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cifar5_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "ood_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ood_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_361": {
                "variable": {
                    "value": "cifar10_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar10_testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cifar10_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "ood_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ood_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gan.py": {
        "tensorflow": {
            "relu_51": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([n_samples, ZDIM])",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', ZDIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.4', DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "ReLULayer('Discriminator.1', OUTPUT_DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Discriminator.2', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Discriminator.3', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.4', DIM, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "real_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_217": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([n_samples, ZDIM])",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', ZDIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.4', DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "ReLULayer('Discriminator.1', OUTPUT_DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Discriminator.2', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Discriminator.3', DIM, DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.4', DIM, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_146": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_147": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_158": {
                "variable": {
                    "value": "clip_disc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*clip_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sqrt_174": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_178": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_179": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "input_tensor": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_144": {
                "input_tensor": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "gen_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "disc_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_187": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_189": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "initialize_all_variables_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_153": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disc_params",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_value(var, clip_bounds[0], clip_bounds[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "input_tensor": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_163": {
                "input_tensor": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_173": {
                "ys": {
                    "value": "Discriminator(interpolates)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[interpolates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real, labels=tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_155": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disc_params",
                            "variable"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_174": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(Discriminator(interpolates), [interpolates])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_182": {
                "logits": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_183": {
                "logits": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_184": {
                "logits": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_182": {
                "input": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_183": {
                "input": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_184": {
                "input": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "tensorboard_monitor/configuration.py": {
        "tensorflow": {
            "InteractiveSession_6": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_16": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_folder, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_17": {
                "variable": {
                    "value": "point_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_folder, 'validation_point')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_18": {
                "variable": {
                    "value": "posterior_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_folder, 'validation_posterior')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_19": {
                "variable": {
                    "value": "mcdropout_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_folder, 'validation_mcdropout')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorboard_monitor/monitor.py": {
        "tensorflow": {}
    },
    "tflib/__init__.py": {
        "tensorflow": {
            "Variable_25": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/ops/linear.py": {
        "tensorflow": {
            "name_scope_37": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.param(name + '.W', weight_values)",
                            "Call"
                        ],
                        [
                            "weight * (target_norms / norms)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "reshaped_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, input_dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.param(name + '.W', weight_values)",
                            "Call"
                        ],
                        [
                            "weight * (target_norms / norms)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, tf.pack(tf.unpack(tf.shape(inputs))[:-1] + [output_dim]))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, lib.param(name + '.b', np.zeros((output_dim,), dtype='float32')))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack(tf.unpack(tf.shape(inputs))[:-1] + [output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_140": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, tf.pack(tf.unpack(tf.shape(inputs))[:-1] + [output_dim]))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, lib.param(name + '.b', np.zeros((output_dim,), dtype='float32')))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "lib.param(name + '.b', np.zeros((output_dim,), dtype='float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(weight), reduction_indices=[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "weightnorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.square(weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_125": {
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.param(name + '.W', weight_values)",
                            "Call"
                        ],
                        [
                            "weight * (target_norms / norms)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_137": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train_toy2d.py": {
        "tensorflow": {
            "placeholder_114": {
                "variable": {
                    "value": "ph_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "ph_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_118": {
                "variable": {
                    "value": "tf_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='accuracy')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_119": {
                "variable": {
                    "value": "tf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_127": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_129": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_folder, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_130": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_folder, 'val')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_246": {
                "obj": {
                    "value": "opt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./saves/%s/opt_%i.t7' % (exp_name, idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "active_learning.py": {
        "torch": {
            "DataLoader_237": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_299": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(trainset.train_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_300": {
                "variable": {
                    "value": "poolloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poolset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "pool_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_332": {
                "variable": {
                    "value": "training_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "prob_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "model.forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_376": {
                "variable": {
                    "value": "point_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(test_inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_labels.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_388": {
                "variable": {
                    "value": "posterior_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(posterior_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_388": {
                "input": {
                    "value": "posterior_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.posterior_expectation(model, test_inputs, sample_size=opt_config['test_sample_batch_size'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gan_utils.py": {
        "torch": {
            "cross_entropy_132": {
                "variable": {
                    "value": "point_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_outputs.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "prob_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(test_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_config['test_input_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(open(f_opt_config, 'rb'))",
                            "Call"
                        ],
                        [
                            "self.opt_config",
                            "Attribute"
                        ],
                        [
                            "self.opt_config",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_309": {
                "variable": {
                    "value": "posterior_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(posterior_outputs.cpu())",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_392": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_config['test_input_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(open(f_opt_config, 'rb'))",
                            "Call"
                        ],
                        [
                            "self.opt_config",
                            "Attribute"
                        ],
                        [
                            "self.opt_config",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_437": {
                "variable": {
                    "value": "posterior_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posterior_outputs.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_146": {
                "variable": {
                    "value": "posterior_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(posterior_outputs.cpu())",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "prob_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posterior_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.posterior_expectation(model, test_inputs)",
                            "Call"
                        ],
                        [
                            "utils.posterior_expectation(model, test_inputs)",
                            "Call"
                        ],
                        [
                            "utils.posterior_expectation(model, test_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "ood_test_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ood_test_inputs, 0)[:n_anom]",
                            "Subscript"
                        ],
                        [
                            "Variable(ood_test_inputs, volatile=True)",
                            "Call"
                        ],
                        [
                            "get_anomaly_detection_test_inputs(testloader, opt_config)",
                            "Call"
                        ],
                        [
                            "ood_test_inputs.cuda()",
                            "Call"
                        ],
                        [
                            "self.ood_test_inputs",
                            "Attribute"
                        ],
                        [
                            "get_anomaly_detection_test_inputs(testloader, opt_config)",
                            "Call"
                        ],
                        [
                            "ood_test_inputs.cuda()",
                            "Call"
                        ],
                        [
                            "self.ood_test_inputs",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_309": {
                "input": {
                    "value": "posterior_outputs.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_146": {
                "input": {
                    "value": "posterior_outputs.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/cnn.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(input_dim[0], Hn, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.fc_dim, Hn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "input_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_85": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "input_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "hid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "hid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "hid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_101": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_104": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_107": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "hid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(192 * Hn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_121": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/fc.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(input_dim, Hn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(input_dim, Hn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "Hn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[a2, h1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "opt/loss.py": {
        "torch": {
            "LogSoftmax_14": {
                "variable": {
                    "value": "self.lsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_15": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_16": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_17": {
                "variable": {
                    "value": "self.CEL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opt/nsgd.py": {
        "torch": {}
    },
    "pgd.py": {
        "torch": {
            "grad_38": {
                "variable": {
                    "value": "x_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(preds, labels, *args)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + uni_noise",
                            "BinOp"
                        ],
                        [
                            "Variable(images)",
                            "Call"
                        ],
                        [
                            "images + self.lr * torch.sign(x_grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images, images_nat - self.epsilon, images_nat + self.epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + uni_noise",
                            "BinOp"
                        ],
                        [
                            "Variable(images)",
                            "Call"
                        ],
                        [
                            "images + self.lr * torch.sign(x_grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images, images_nat - self.epsilon, images_nat + self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "images_nat - self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "images_nat + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_40": {
                "input": {
                    "value": "x_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(loss, images)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_29": {
                "*size": {
                    "value": "images.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_new.py": {
        "torch": {
            "DataLoader_242": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_config['batcher_kwargs']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_config['batcher_kwargs']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_244": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BabyMnist(train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_config['batcher_kwargs']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_784": {
                "variable": {
                    "value": "best_model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('saves', exp_name, 'best_point_model.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_176": {
                "variable": {
                    "value": "mc_posterior_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(mean_probs.cpu())",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_271": {
                "variable": {
                    "value": "point_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(test_inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_771": {
                "variable": {
                    "value": "best_model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('saves', exp_name, 'best_mc_model.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_823": {
                "variable": {
                    "value": "best_model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('saves', exp_name, 'best_point_model.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./saves/%s/model_%i.t7' % (exp_name, iteration)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./saves/%s/opt_%i.t7' % (exp_name, iteration)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_283": {
                "variable": {
                    "value": "posterior_loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(posterior_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_911": {
                "variable": {
                    "value": "best_model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('saves', exp_name, 'best_mc_model.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "'./saves/%s/opt_%s.t7' % (old_exp_name, arguments['<idx>'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_176": {
                "input": {
                    "value": "mean_probs.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_454": {
                "variable": {
                    "value": "training_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models[0].forward(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_459": {
                "variable": {
                    "value": "prob_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models[0].forward(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_283": {
                "input": {
                    "value": "posterior_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.posterior_expectation(model, test_inputs, keep_samples=False, use_mini_batch=opt_config['batch_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_471": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "models[idx].forward(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_533": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('saves', exp_name, 'best_mc_model.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_537": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('saves', exp_name, 'best_point_model.th')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}