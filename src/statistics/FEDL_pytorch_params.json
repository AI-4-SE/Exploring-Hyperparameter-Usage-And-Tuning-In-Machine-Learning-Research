{
    "data/Linear_synthetic/optimal_solution_finding.py": {
        "sklearn": {
            "mean_squared_error_110": {
                "y_true": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.array(train_y[i])",
                            "Call"
                        ],
                        [
                            "np.array(train_y[i])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": [
                        [
                            "Xbar.dot(w)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/Mnist/generate_iid_20users.py": {
        "sklearn": {}
    },
    "data/Mnist/generate_niid_100users_updated.py": {
        "sklearn": {}
    },
    "data/Mnist/generate_niid_20users.py": {
        "sklearn": {
            "fetch_openml_23": {
                "variable": {
                    "value": "mnist",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "possible_values": []
                },
                "data_home": {
                    "value": "./data",
                    "possible_values": []
                }
            }
        }
    },
    "data/Mnist/generate_niid_mnist_100users.py": {
        "sklearn": {}
    },
    "flearn/optimizers/fedoptimizer.py": {
        "torch": {}
    },
    "flearn/servers/serveravg.py": {
        "torch": {
            "zeros_like_34": {
                "input": {
                    "value": "param.data",
                    "possible_values": []
                }
            }
        }
    },
    "flearn/servers/serverbase.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "os.path.join('models', self.dataset)",
                            "Call"
                        ],
                        [
                            "os.path.join('models', self.dataset, 'server' + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_33": {
                "variable": {
                    "value": "param.grad",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "param.data",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.model",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'server' + '.pt')",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "param.grad.data",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad.data",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "variable": {
                    "value": "server_param.grad",
                    "possible_values": []
                },
                "input": {
                    "value": "user_param.grad",
                    "possible_values": []
                }
            }
        }
    },
    "flearn/servers/serverfedl.py": {
        "torch": {}
    },
    "flearn/trainmodel/models.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout1",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "Dropout_11": {
                "variable": {
                    "value": "self.dropout2",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "18432",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "flatten_24": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_28": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_37": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_39": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_48": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_dim",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid_dim",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_61": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_dim",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid_dim",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_86": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "log_softmax_89": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "nn.MaxPool2d(2, 1)(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flearn/users/useravg.py": {
        "torch": {
            "SGD_22": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "possible_values": []
                }
            },
            "MSELoss_18": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "NLLLoss_20": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flearn/users/userbase.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "self.trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "self.testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "self.testloaderfull",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_samples",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "self.trainloaderfull",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_samples",
                    "possible_values": []
                }
            },
            "load_145": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'server' + '.pt')",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "self.model",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'user_' + self.id + '.pt')",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "torch.argmax(output, dim=1) == y",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "torch.argmax(output, dim=1) == y",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "variable": {
                    "value": "old_param.grad",
                    "possible_values": []
                },
                "input": {
                    "value": "new_param.grad",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "local_param.grad",
                    "possible_values": []
                },
                "input": {
                    "value": "new_param.grad",
                    "possible_values": []
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "clone_param.grad",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "argmax_110": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "flearn/users/userfedl.py": {
        "torch": {
            "MSELoss_19": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "NLLLoss_21": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "plot_femnist.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "plot_linear.py": {
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "plot_mnist.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_utils.py": {
        "torch": {
            "Tensor_122": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                }
            },
            "Tensor_123": {
                "variable": {
                    "value": "y_train",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "X_test",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "y_test",
                    "possible_values": []
                }
            },
            "Tensor_127": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                }
            },
            "Tensor_128": {
                "variable": {
                    "value": "y_train",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "y_train",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Tensor_129": {
                "variable": {
                    "value": "X_test",
                    "possible_values": []
                }
            },
            "Tensor_130": {
                "variable": {
                    "value": "y_test",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "y_test",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                }
            },
            "Tensor_136": {
                "variable": {
                    "value": "y_train",
                    "possible_values": []
                }
            },
            "Tensor_137": {
                "variable": {
                    "value": "X_test",
                    "possible_values": []
                }
            },
            "Tensor_138": {
                "variable": {
                    "value": "y_test",
                    "possible_values": []
                }
            }
        }
    }
}