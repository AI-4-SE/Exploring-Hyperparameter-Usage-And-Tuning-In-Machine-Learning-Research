{
    "figures/comparison_figures.py": {
        "sklearn": {
            "train_test_split_371": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "cX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_471": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths > 8.99",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "classifications",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yp_test",
                            "variable"
                        ],
                        [
                            "norm.cdf((yp_test - 9.0) / sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_491": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "nominal_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal > 8.99",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "shadow_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm.cdf((shadow - 9.0) / sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_496": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths > 8.99",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "classifications",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yp_test",
                            "variable"
                        ],
                        [
                            "norm.cdf((yp_test - 9.0) / sigma)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "figures/main_figures.py": {
        "sklearn": {
            "roc_curve_568": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(truths >= 9).reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.average(np.tile(sample_preds, (2, 1, 1)) > 9, 1).transpose(1, 0).reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_595": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_roc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths > 8.99",
                            "Compare"
                        ],
                        [
                            "einops.rearrange(y_roc, 'sample run -> (sample run)')",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.average(sample_preds >= 9, axis=0)",
                            "Call"
                        ],
                        [
                            "einops.repeat(y_score, 'sample -> (sample run)', run=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_599": {
                "variable": {
                    "value": "weight_roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_roc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths > 8.99",
                            "Compare"
                        ],
                        [
                            "einops.rearrange(y_roc, 'sample run -> (sample run)')",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.average(sample_preds >= 9, axis=0)",
                            "Call"
                        ],
                        [
                            "einops.repeat(y_score, 'sample -> (sample run)', run=2)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "y_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "einops.repeat(snr, 'sample -> (sample run)', run=2)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "figures/spock/modelfitting.py": {
        "sklearn": {
            "roc_curve_42": {
                "variable": {
                    "value": "(fpr, tpr, ROCthresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.iloc[Nrows:]",
                            "Subscript"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "preds[unstable]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_43": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.iloc[Nrows:]",
                            "Subscript"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "preds[unstable]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "precision_recall_curve_49": {
                "variable": {
                    "value": "(precision, recall, PRthresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.iloc[Nrows:]",
                            "Subscript"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "model.predict_proba(testX)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "preds[unstable]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_50": {
                "variable": {
                    "value": "pr_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(testy, preds)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(testy, preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_65": {
                "variable": {
                    "value": "aucval",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tnr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(N)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "npv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_60": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.iloc[Nrows:]",
                            "Subscript"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ],
                        [
                            "train_test_split(trainingdatafolder, features, filter=filter, filtertimes=filtertimes)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds >= thresh",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "figures/spock/regression.py": {
        "sklearn": {
            "StandardScaler_48": {
                "variable": {
                    "value": "ssX",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_145": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(X, axis=2)",
                            "Call"
                        ],
                        [
                            "data_setup_kernel(mass_array, cur_tseries)",
                            "Call"
                        ],
                        [
                            "self.ssX.transform(X.reshape(-1, X.shape[-1])).reshape(X.shape)",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float()",
                            "Call"
                        ],
                        [
                            "X.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_149": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.sample_full_swag(X)[None] for _ in range(samples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "helper_functions.py": {
        "sklearn": {
            "KFold_214": {
                "variable": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_21": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fmod_466": {
                "variable": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[:, 2:18:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_471": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, 3:18:6]",
                            "Subscript"
                        ],
                        [
                            "torch.fmod(omega, 2 * np.pi)",
                            "Call"
                        ],
                        [
                            "omega.reshape(-1)",
                            "Call"
                        ],
                        [
                            "apply_augmentation_torch(u_theta, u_phi, pomega_difference, pomega, omega, inc)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_474": {
                "variable": {
                    "value": "pomega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pomega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, 4:18:6]",
                            "Subscript"
                        ],
                        [
                            "pomega - omega",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(pomega, 2 * np.pi)",
                            "Call"
                        ],
                        [
                            "pomega.reshape(-1)",
                            "Call"
                        ],
                        [
                            "apply_augmentation_torch(u_theta, u_phi, pomega_difference, pomega, omega, inc)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_482": {
                "variable": {
                    "value": "X[:, 2:18:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inc.reshape(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_483": {
                "variable": {
                    "value": "X[:, 3:18:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "omega.reshape(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_484": {
                "variable": {
                    "value": "X[:, 4:18:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pomega.reshape(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorDataset_307": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X[:train_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(data_directories)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X[:train_len], X_easy[:train_len], y[:train_len])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X, X_easy)",
                            "Call"
                        ],
                        [
                            "'resonant'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_310": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X[train_len:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X[train_len:], X_easy[train_len:], y[train_len:])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_417": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_418": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(data_directories)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X[:train_len], X_easy[:train_len], y[:train_len])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X, X_easy)",
                            "Call"
                        ],
                        [
                            "'resonant'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_314": {
                "variable": {
                    "value": "criterion_classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_330": {
                "variable": {
                    "value": "solver_classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "lr * 0.8",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.l2_reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_301": {
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(X, axis=2)",
                            "Call"
                        ],
                        [
                            "globalX",
                            "variable"
                        ],
                        [
                            "X[:saveN]",
                            "Subscript"
                        ],
                        [
                            "X.reshape(N * 1729, 21)",
                            "Call"
                        ],
                        [
                            "X.reshape(N, 1729, 21)",
                            "Call"
                        ],
                        [
                            "self.preprocess(X)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "self.preprocess(X)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_302": {
                "ndarray": {
                    "value": "X_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "globalX_easy",
                            "variable"
                        ],
                        [
                            "X_easy[:saveN]",
                            "Subscript"
                        ],
                        [
                            "transform.fit_transform(X_easy)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X_easy).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X_easy).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "X_easy",
                            "Method Argument"
                        ],
                        [
                            "X_easy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_303": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.log10(labels[['instability_time', 'shadow_instability_time']])).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "y[tmp_good_rows]",
                            "Subscript"
                        ],
                        [
                            "globaly",
                            "variable"
                        ],
                        [
                            "y[:saveN]",
                            "Subscript"
                        ],
                        [
                            "np.average(y, axis=1).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(y).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_414": {
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(X, axis=2)",
                            "Call"
                        ],
                        [
                            "globalX",
                            "variable"
                        ],
                        [
                            "X[:saveN]",
                            "Subscript"
                        ],
                        [
                            "X.reshape(N * 1729, 21)",
                            "Call"
                        ],
                        [
                            "X.reshape(N, 1729, 21)",
                            "Call"
                        ],
                        [
                            "self.preprocess(X)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "self.preprocess(X)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_415": {
                "ndarray": {
                    "value": "X_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "globalX_easy",
                            "variable"
                        ],
                        [
                            "X_easy[:saveN]",
                            "Subscript"
                        ],
                        [
                            "transform.fit_transform(X_easy)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X_easy).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(X_easy).type(torch.FloatTensor))",
                            "Call"
                        ],
                        [
                            "X_easy",
                            "Method Argument"
                        ],
                        [
                            "X_easy",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spock_reg_model.py": {
        "sklearn": {
            "StandardScaler_933": {
                "variable": {
                    "value": "ssX",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_221": {
                "variable": {
                    "value": "(remy, finaly, remX, finalX, rem_random, final_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "fully",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "fullX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "random_data",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_222": {
                "variable": {
                    "value": "(trainy, testy, trainX, testX, train_random, test_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "remy",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "remX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "rem_random",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_224": {
                "variable": {
                    "value": "(remy, finaly, remX, finalX)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "fully",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "fullX",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_225": {
                "variable": {
                    "value": "(trainy, testy, trainX, testX)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "remy",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "remX",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PowerTransformer_244": {
                "variable": {
                    "value": "ssX",
                    "type": "variable",
                    "possible_values": []
                },
                "method": {
                    "value": "yeo-johnson",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StandardScaler_246": {
                "variable": {
                    "value": "ssX",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_275": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X[:train_len, :, idxes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X[:train_len, :, idxes], y[:train_len])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X[train_len:, :, idxes], y[train_len:])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X[train_len:][r[train_len:]][:, :, idxes], y[train_len:][r[train_len:]])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_325": {
                "variable": {
                    "value": "value_giving_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_326": {
                "variable": {
                    "value": "x_under",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "base_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x < -1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "value_giving_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, device=x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_327": {
                "variable": {
                    "value": "x_over",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "~base_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "value_giving_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, device=x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_923": {
                "variable": {
                    "value": "save_items",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorDataset_281": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X[train_len:, :, idxes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_286": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X[train_len:][r[train_len:]][:, :, idxes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "*args": {
                    "value": "*result",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.input_noise_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_features) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_362": {
                "variable": {
                    "value": "self.summary_noise_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hparams['latent'] * 2 + int(self.fix_megno) * 2) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_418": {
                "variable": {
                    "value": "sample_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_422": {
                "variable": {
                    "value": "std_in_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_var / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_423": {
                "variable": {
                    "value": "std_in_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * sample_var ** 2 / (n - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_430": {
                "variable": {
                    "value": "std_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(var_sample) + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "clatent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mu_sample, std_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_481": {
                "variable": {
                    "value": "megno_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, [self.megno_location]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_482": {
                "variable": {
                    "value": "megno_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, [self.megno_location]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_563": {
                "variable": {
                    "value": "safe_regression_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "~torch.isfinite(regression_loss)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "-torch.ones_like(regression_loss) * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(y - mu) ** 2 / (2 * var)",
                            "BinOp"
                        ],
                        [
                            "regression_loss + -safe_log_erf((mu - 4) / torch.sqrt(2 * var))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_567": {
                "variable": {
                    "value": "safe_classifier_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "~torch.isfinite(classifier_loss)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "-torch.ones_like(classifier_loss) * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "classifier_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_log_erf((mu - 9) / torch.sqrt(2 * var))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_624": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_624": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_631": {
                "variable": {
                    "value": "opt1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hparams['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_710": {
                "variable": {
                    "value": "opt1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.swa_params['swa_lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hparams['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiStepLR_711": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(self.parameters(), lr=self.lr, momentum=self.hparams['momentum'], weight_decay=self.hparams['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=self.swa_params['swa_lr'], momentum=self.hparams['momentum'], weight_decay=self.hparams['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[self.swa_params['swa_start']]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.swa_params['swa_recording_lr_factor']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_802": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_802": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_803": {
                "variable": {
                    "value": "swa_avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['swa_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_803": {
                "variable": {
                    "value": "swa_avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_920": {
                "obj": {
                    "value": "save_items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'hparams': swag_model.hparams, 'swa_params': swag_model.swa_params, 'w_avg': swag_model.w_avg.cpu(), 'w2_avg': swag_model.w2_avg.cpu(), 'pre_D': swag_model.pre_D.cpu()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_266": {
                "ndarray": {
                    "value": "np.concatenate((ttrainX, ttestX))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "ndarray": {
                    "value": "np.concatenate((ttrainy, ttesty))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "ndarray": {
                    "value": "tremX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ssX.transform(remX.reshape(-1, n_features)).reshape(-1, n_t, n_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "tremy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remy",
                            "variable"
                        ]
                    ]
                }
            },
            "log_333": {
                "input": {
                    "value": "1.0 + torch.erf(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_454": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_461": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_468": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_475": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_484": {
                "tensors": {
                    "value": "[megno_avg, megno_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "summary_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[summary_stats, megno_avg_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_528": {
                "tensors": {
                    "value": "(mu, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_830": {
                "variable": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_831": {
                "variable": {
                    "value": "z_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(K, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_832": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(avg_w2 - avg_w ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_863": {
                "variable": {
                    "value": "summary_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[summary_stats, megno_avg_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_876": {
                "tensors": {
                    "value": "(mu, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_901": {
                "variable": {
                    "value": "summary_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[summary_stats, megno_avg_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_908": {
                "tensors": {
                    "value": "(mu, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "ndarray": {
                    "value": "np.concatenate((ttrain_random, ttest_random))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_320": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "std_419": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_445": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_445": {
                "input": {
                    "value": "self.input_noise_logvar[None, None, :] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_449": {
                "input": {
                    "value": "summary_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_summary_stats(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([summary_stats, megno_avg_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.add_summary_noise(summary_stats)",
                            "Call"
                        ],
                        [
                            "self.compute_summary_stats(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([summary_stats, megno_avg_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.compute_summary_stats(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([summary_stats, megno_avg_std], dim=1)",
                            "Call"
                        ],
                        [
                            "summary_stats",
                            "Method Argument"
                        ],
                        [
                            "summary_stats",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_449": {
                "input": {
                    "value": "self.summary_noise_logvar[None, :] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_555": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_clamp(testy[:, [1]], self.lowest, 6.0)",
                            "Call"
                        ],
                        [
                            "self.predict_instability(summary_stats)",
                            "Call"
                        ],
                        [
                            "out[:, 1]",
                            "Subscript"
                        ],
                        [
                            "testy[:, [1]]",
                            "Subscript"
                        ],
                        [
                            "self.predict_instability(summary_stats)",
                            "Call"
                        ],
                        [
                            "self.predict_instability(summary_stats)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_744": {
                "variable": {
                    "value": "p_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_vec, p.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_768": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_824": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_333": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "self.n_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "*size": {
                    "value": "hparams['latent'] * 2 + int(self.fix_megno) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_426": {
                "input": {
                    "value": "sample_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_427": {
                "input": {
                    "value": "sample_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.std(x, dim=1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_430": {
                "input": {
                    "value": "var_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn_like(sample_var) * std_in_var + sample_var",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_560": {
                "input": {
                    "value": "2 * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isfinite_564": {
                "input": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(y - mu) ** 2 / (2 * var)",
                            "BinOp"
                        ],
                        [
                            "regression_loss + -safe_log_erf((mu - 4) / torch.sqrt(2 * var))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isfinite_568": {
                "input": {
                    "value": "classifier_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_log_erf((mu - 9) / torch.sqrt(2 * var))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_780": {
                "variable": {
                    "value": "self.pre_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pre_D, cur_w[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_832": {
                "input": {
                    "value": "avg_w2 - avg_w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_296": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_557": {
                "input": {
                    "value": "2 * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_565": {
                "input": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(y - mu) ** 2 / (2 * var)",
                            "BinOp"
                        ],
                        [
                            "regression_loss + -safe_log_erf((mu - 4) / torch.sqrt(2 * var))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_569": {
                "input": {
                    "value": "classifier_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_log_erf((mu - 9) / torch.sqrt(2 * var))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_330": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, np.random.randint(0, x.shape[1], size=samples)]",
                            "Subscript"
                        ],
                        [
                            "self.feature_nn(x)",
                            "Call"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "x - mask",
                            "BinOp"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "self.add_input_noise(x)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_517": {
                "input": {
                    "value": "self.summary_noise_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_587": {
                "input": {
                    "value": "self.input_noise_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_868": {
                "input": {
                    "value": "self.summary_noise_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "figures/feature_importance.py": {
        "torch": {
            "cat_127": {
                "variable": {
                    "value": "saliency_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradforward(swag_model.cpu(), X_sample.cpu())[0] for (X_sample, _) in val_dataloader]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "summary_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[summary_stats, megno_avg_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "(mu, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_116": {
                "outputs": {
                    "value": "mu.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.zero_megno(x)",
                            "Call"
                        ],
                        [
                            "self.zero_mmr(x)",
                            "Call"
                        ],
                        [
                            "self.zero_nan(x)",
                            "Call"
                        ],
                        [
                            "self.zero_eplusminus(x)",
                            "Call"
                        ],
                        [
                            "self.augment(x)",
                            "Call"
                        ],
                        [
                            "Variable(x, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_81": {
                "input": {
                    "value": "self.summary_noise_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "figures/multiswag_5_planet.py": {
        "torch": {
            "tensor_287": {
                "variable": {
                    "value": "Xpp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.ssX.transform(X.reshape(-1, X.shape[-1])).reshape(X.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([model.sample_full_swag(Xpart).detach().cpu() for Xpart in torch.chunk(Xflat, chunks=10)])[None] for _ in range(samples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_295": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "inv_cdf(r)",
                            "Call"
                        ],
                        [
                            "jnp.zeros_like(scale)",
                            "Call"
                        ],
                        [
                            "jax.ops.index_update(samples, np.s_[start:end], first_good_val)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_296": {
                "tensors": {
                    "value": "[model.sample_full_swag(Xpart).detach().cpu() for Xpart in torch.chunk(Xflat, chunks=10)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "chunk_296": {
                "input": {
                    "value": "Xflat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Xpp.reshape(-1, X.shape[-2], X.shape[-1])",
                            "Call"
                        ],
                        [
                            "Xflat.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "find_minima.py": {
        "torch": {
            "load_94": {
                "f": {
                    "value": "checkpointer.best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "checkpointer.best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "run_swag.py": {
        "torch": {}
    }
}