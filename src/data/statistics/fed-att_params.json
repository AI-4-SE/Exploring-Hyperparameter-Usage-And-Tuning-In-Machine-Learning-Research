{
    "src/Models.py": {
        "torch": {
            "GRU_15": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.d_embed",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "config.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.rnn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.nvocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PackedSequence_26": {
                "variable": {
                    "value": "embedded_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.get_embedded(packed_sents.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "packed_sents.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.nvocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_29": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc1(out_packed_sequence.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/Text.py": {
        "torch": {}
    },
    "src/Update.py": {
        "torch": {
            "NLLLoss_27": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetSplitLM(dataset, list(idxs))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.local_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[s[:-1] for s in sents]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_sequence_41": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[s[1:] for s in sents]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_sequence_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[s[:-1] for s in sents]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_sequence_66": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[s[1:] for s in sents]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_50": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "y.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_71": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "y.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/agg/aggregate.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "w_next[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "w_server[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "att[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(w_clients)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "att[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "att[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_33": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_server[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "att[k][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(linalg.norm(w_server[k] - w_clients[i][k], ord=metric))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_35": {
                "input": {
                    "value": "w_server[k] - w_clients[i][k]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "att[k][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_36": {
                "input": {
                    "value": "att_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(w_server[k])",
                            "Call"
                        ],
                        [
                            "att_weight + torch.mul(w_server[k] - w_clients[i][k], att[k][i])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "stepsize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "w_server[k].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/agg/avg.py": {
        "torch": {
            "div_20": {
                "input": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "len(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_20": {
                "input": {
                    "value": "torch.randn(w_avg[k].shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "dp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "w_avg[k].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/run.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DatasetLM(args.dataset, 'train', vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "loader_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DatasetLM(args.dataset, 'valid', vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DatasetLM(args.dataset, 'test', vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "model_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "net_glob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RnnLm(config)",
                            "Call"
                        ],
                        [
                            "net_glob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}