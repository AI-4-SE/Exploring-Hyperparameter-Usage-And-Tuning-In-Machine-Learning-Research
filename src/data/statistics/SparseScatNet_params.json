{
    "convergence_analysis.py": {
        "torch": {
            "Subset_117": {
                "variable": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, perm)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, val_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randperm(len(val_dataset))[:args.nb_images]",
                            "Subscript"
                        ],
                        [
                            "torch.randperm(1000)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, perm)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, val_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_210": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SparseScatNet(scattering, linear_proj, istc, nn.Identity(), return_full_inf=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_112": {
                "variable": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, perm)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, val_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_full",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for i in range(len(class_indices)) for x in range(val_indices[class_indices[i]], val_indices[class_indices[i] + 1])]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "scattering",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "scattering",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nb_channels_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "nb_channels_in + 3 * L_ang ** 2 * J * (J - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "args.L_proj_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.L_proj_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "args.L_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "class_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.class_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_107": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_115": {
                "n": {
                    "value": "len(val_dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "std_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "std_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'standardization/ImageNet2012_scattering_J{}_order{}_wph_{}_nphases_{}_nb_classes_{}.pth.tar'.format(args.scattering_J, 2 if args.scattering_order2 else 1, args.scattering_wph, args.scattering_nphases if args.scattering_wph else 0, args.nb_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_216": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "lambdas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_iterations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(override_lambdas)",
                            "Call"
                        ],
                        [
                            "model.module.istc.n_iterations",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_401": {
                "variable": {
                    "value": "D_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "y + nn.functional.conv2d(input_batch - D_y, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "x + (t0 - 1.0) / t * (x - x_old)",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "y + nn.functional.conv2d(input_batch - D_y, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "x + (t0 - 1.0) / t * (x - x_old)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_430": {
                "variable": {
                    "value": "D_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, w_matrix.transpose(0, 1).contiguous())",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambdas[i_iter])",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Flatten_142": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_278": {
                "variable": {
                    "value": "D_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, w_matrix.transpose(0, 1).contiguous())",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambdas[i_iter])",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_331": {
                "variable": {
                    "value": "D_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "y + nn.functional.conv2d(input_batch - D_y, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "x + (t0 - 1.0) / t * (x - x_old)",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "y + nn.functional.conv2d(input_batch - D_y, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "x + (t0 - 1.0) / t * (x - x_old)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_373": {
                "variable": {
                    "value": "D_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, w_matrix.transpose(0, 1).contiguous())",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambdas[i_iter])",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "symeig_306": {
                "input": {
                    "value": "torch.mm(dictionary[..., 0, 0].t(), dictionary[..., 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_351": {
                "input": {
                    "value": "torch.mm(dictionary[..., 0, 0].t(), dictionary[..., 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_390": {
                "input": {
                    "value": "torch.mm(dictionary[..., 0, 0].t(), dictionary[..., 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_421": {
                "input": {
                    "value": "torch.mm(dictionary[..., 0, 0].t(), dictionary[..., 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_279": {
                "input": {
                    "value": "input_batch - D_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_matrix.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_306": {
                "input": {
                    "value": "dictionary[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dictionary[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_351": {
                "input": {
                    "value": "dictionary[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dictionary[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_390": {
                "input": {
                    "value": "dictionary[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dictionary[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_402": {
                "input": {
                    "value": "input_batch - D_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "dictionary.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_421": {
                "input": {
                    "value": "dictionary[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dictionary[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_431": {
                "input": {
                    "value": "input_batch - D_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "dictionary.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_332": {
                "input": {
                    "value": "input_batch - D_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "dictionary.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_374": {
                "input": {
                    "value": "input_batch - D_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "dictionary.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_288": {
                "input": {
                    "value": "torch.ones(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_290": {
                "input": {
                    "value": "torch.ones(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_288": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_290": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_282": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, w_matrix.transpose(0, 1).contiguous())",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambdas[i_iter])",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_338": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, w_matrix.transpose(0, 1).contiguous())",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambdas[i_iter])",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_377": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, w_matrix.transpose(0, 1).contiguous())",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambdas[i_iter])",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "relu(y, lambda_star / L)",
                            "Call"
                        ],
                        [
                            "input_batch.new_zeros(batch_size, dict_size, M, N)",
                            "Call"
                        ],
                        [
                            "x + nn.functional.conv2d(input_batch - D_x, dictionary.transpose(0, 1).contiguous()) / L",
                            "BinOp"
                        ],
                        [
                            "relu(x, lambda_star / L)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.istc.dictionary_weight.data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "SummaryWriter_161": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logs_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.logdir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_dataset, train_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, val_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_341": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SparseScatNet(scattering, linear_proj, istc, classifier, return_full_inf=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "nn.Sequential(scattering, linear_proj, classifier)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_344": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_346": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_188": {
                "variable": {
                    "value": "classes_names",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "utils_sampling/labels_dict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Subset_208": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(train_dataset, train_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices_full",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for i in range(len(class_indices)) for x in range(train_indices[class_indices[i]], train_indices[class_indices[i] + 1])]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_209": {
                "variable": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(val_dataset, val_indices_full)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_full",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for i in range(len(class_indices)) for x in range(val_indices[class_indices[i]], val_indices[class_indices[i] + 1])]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "scattering",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "scattering",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_761": {
                "variable": {
                    "value": "gram",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.w_weight.data[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "model.module.istc.dictionary_weight.data[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_819": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_910": {
                "variable": {
                    "value": "best_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "class_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.class_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_192": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "class_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(args.class_indices)",
                            "Call"
                        ],
                        [
                            "perm[:args.nb_classes].tolist()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "classes_indices_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(logs_dir, 'classes_indices_selected')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_262": {
                "variable": {
                    "value": "std_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "std_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'standardization/ImageNet2012_scattering_J{}_order{}_wph_{}_nphases_{}_nb_classes_{}.pth.tar'.format(args.scattering_J, 2 if args.scattering_order2 else 1, args.scattering_wph, args.scattering_nphases if args.scattering_wph else 0, args.nb_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_275": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nb_channels_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "nb_channels_in + 3 * L_ang ** 2 * J * (J - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "args.L_proj_size",
                            "Attribute"
                        ],
                        [
                            "args.dictionary_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.L_proj_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "args.L_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_280": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_352": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_405": {
                "variable": {
                    "value": "gram",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.w_weight.data[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "model.module.istc.dictionary_weight.data[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_483": {
                "variable": {
                    "value": "gram",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.w_weight.data[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "model.module.istc.dictionary_weight.data[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_661": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_893": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_909": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_239": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "std_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(std_file)",
                            "Call"
                        ],
                        [
                            "{'mean': mean_std, 'std': std, 'matrix': stding_mat}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "std_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'standardization/ImageNet2012_scattering_J{}_order{}_wph_{}_nphases_{}_nb_classes_{}.pth.tar'.format(args.scattering_J, 2 if args.scattering_order2 else 1, args.scattering_wph, args.scattering_nphases if args.scattering_wph else 0, args.nb_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "scattering",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_371": {
                "variable": {
                    "value": "model.module.istc.log_lambda_0.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.lambda_0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_373": {
                "variable": {
                    "value": "model.module.istc.log_gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_376": {
                "variable": {
                    "value": "model.module.istc.log_lambdas.data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.lambdas.data[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_600": {
                "variable": {
                    "value": "gram",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.w_weight.data[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "model.module.istc.dictionary_weight.data[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_721": {
                "variable": {
                    "value": "gram",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.istc.w_weight.data[..., 0, 0].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "model.module.istc.dictionary_weight.data[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/Classifier.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nb_channels_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classif_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.avg_pool2d(x, self.avg_ker_size, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.avg_ker_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nb_channels_in * n ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nb_channels_in * n ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "p": {
                    "value": "dropout_p_mlp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "nb_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "dropout_p_mlp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "nb_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/ISTC.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self.dictionary_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dictionary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(dictionary_size, nb_channels_in, kernel_size=1, stride=1, padding=0, bias=False).weight.data",
                            "Attribute"
                        ],
                        [
                            "dictionary / dictionary.norm(p=2, dim=0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.log_lambda_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(np.log(lambda_0))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.log_lambdas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_iterations - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.log_lambda_star",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(np.log(lambda_star))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "grad_lambda_star",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(1.0 / self.n_iterations * np.log(lambda_star / lambda_0))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.lambda_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(lambda_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.lambdas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_iterations - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.lambda_star",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(lambda_star)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(np.power(lambda_star / lambda_0, 1.0 / self.n_iterations))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "WT_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w_weight.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "WT_x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "input": {
                    "value": "x - lambd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.w_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(dictionary_size, nb_channels_in, kernel_size=1, stride=1, padding=0, bias=False).weight.data",
                            "Attribute"
                        ],
                        [
                            "w_matrix / w_matrix.norm(p=2, dim=0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "D_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(WT_x.size()).cuda()",
                            "Call"
                        ],
                        [
                            "relu(z - WT_D_z + WT_x, lambda_i)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.dictionary_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "WT_D_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.conv2d(z, self.dictionary_weight)",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(z, self.dictionary_weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.w_weight.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "D_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(WT_x.size()).cuda()",
                            "Call"
                        ],
                        [
                            "relu(z - WT_D_z + WT_x, lambda_i)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.dictionary_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "sparsity",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "support_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_82": {
                "variable": {
                    "value": "lambdas_fwd[i][...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "log_lambdas_fwd[i][...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_104": {
                "variable": {
                    "value": "lambda_0_max_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-WT_x.min()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_111": {
                "variable": {
                    "value": "lambda_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_lambda_star",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_141": {
                "variable": {
                    "value": "reconstructed_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(WT_x.size()).cuda()",
                            "Call"
                        ],
                        [
                            "relu(z - WT_D_z + WT_x, lambda_i)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.dictionary_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "dictionary_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nb_channels_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_87": {
                "variable": {
                    "value": "self.lambda_0.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_lambda_0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_88": {
                "variable": {
                    "value": "self.lambda_star.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_lambda_star.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_89": {
                "variable": {
                    "value": "self.gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lambda_star.data / self.lambda_0.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / self.n_iterations",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_90": {
                "variable": {
                    "value": "self.log_gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_117": {
                "variable": {
                    "value": "lambda_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_lambdas[i_iter]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "dictionary_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nb_channels_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_73": {
                "input": {
                    "value": "self.lambda_0.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_74": {
                "input": {
                    "value": "self.lambda_0.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/LinearProj.py": {
        "torch": {
            "div_18": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.standardization(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(output, ((self.L_kernel_size - 1) // 2,) * 4, mode='reflect')",
                            "Call"
                        ],
                        [
                            "self.proj(output)",
                            "Call"
                        ],
                        [
                            "torch.div(output, output.norm(p=2, dim=1, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output.norm(p=2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_15": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.standardization(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(output, ((self.L_kernel_size - 1) // 2,) * 4, mode='reflect')",
                            "Call"
                        ],
                        [
                            "self.proj(output)",
                            "Call"
                        ],
                        [
                            "torch.div(output, output.norm(p=2, dim=1, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "((self.L_kernel_size - 1) // 2,) * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/Rescaling.py": {
        "torch": {
            "Parameter_7": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_8": {
                "variable": {
                    "value": "self.scaling_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scaling_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_12": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.bias",
                            "BinOp"
                        ],
                        [
                            "nn.functional.conv2d(output, self.scaling_mat)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.scaling_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/SparseScatNet.py": {
        "torch": {}
    },
    "phase_scattering2d_torch.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "current_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "current_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_263": {
                "tensors": {
                    "value": "[real1 * real2 - imag1 * imag2, real1 * imag2 + imag1 * real2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_188": {
                "variable": {
                    "value": "U_1_c_ph_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-U_1_c_ph",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "U_1_c_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U_1_c_ph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "U_1_c.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "torch.cat((U_1_c_ph, U_1_c_ph_), 1)",
                            "Call"
                        ],
                        [
                            "U_1_c_ph.reshape(-1, U_1_c_ph.shape[-2], U_1_c_ph.shape[-1])",
                            "Call"
                        ],
                        [
                            "add_imaginary_part(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "fft(U_1_c_ph, 'C2C')",
                            "Call"
                        ],
                        [
                            "complex_multiplication(phase, U_1_c)",
                            "Call"
                        ],
                        [
                            "U_1_c_ph[..., 0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "add_imaginary_part(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "fft(U_1_c_ph, 'C2C')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "U_1_c_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(U_1_c_ph, U_1_c_ph_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "obj": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.reshape((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_209": {
                "variable": {
                    "value": "U_1_c_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U_1_c_ph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "U_1_c.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "torch.cat((U_1_c_ph, U_1_c_ph_), 1)",
                            "Call"
                        ],
                        [
                            "U_1_c_ph.reshape(-1, U_1_c_ph.shape[-2], U_1_c_ph.shape[-1])",
                            "Call"
                        ],
                        [
                            "add_imaginary_part(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "fft(U_1_c_ph, 'C2C')",
                            "Call"
                        ],
                        [
                            "complex_multiplication(phase, U_1_c)",
                            "Call"
                        ],
                        [
                            "U_1_c_ph[..., 0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "add_imaginary_part(U_1_c_ph)",
                            "Call"
                        ],
                        [
                            "fft(U_1_c_ph, 'C2C')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "mean_17": {
                "variable": {
                    "value": "batch_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.transpose(1, -1).contiguous().view(-1, n_channels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "transformation",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "transformation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(transformation).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "var_19": {
                "variable": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.transpose(1, -1).contiguous().view(-1, n_channels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_var_meter.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_55": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}