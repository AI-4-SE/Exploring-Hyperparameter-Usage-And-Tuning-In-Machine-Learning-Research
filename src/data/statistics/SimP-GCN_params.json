{
    "src/distance.py": {
        "sklearn": {
            "cosine_similarity_33": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_similarity_85": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "reshape_79": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/geom_data_utils.py": {
        "sklearn": {
            "ShuffleSplit_121": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage + val_percentage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ShuffleSplit_123": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ShuffleSplit_136": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage + val_percentage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ShuffleSplit_138": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "src/metric.py": {
        "sklearn": {
            "roc_auc_score_31": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_targets.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "encode_onehot(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_preds.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "src/sample.py": {
        "sklearn": {},
        "torch": {}
    },
    "src/selfsl.py": {
        "sklearn": {
            "cosine_similarity_152": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.copy(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "kneighbors_graph_189": {
                "variable": {
                    "value": "self.adj_knn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.copy(features)",
                            "Call"
                        ]
                    ]
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "args.k",
                            "Attribute"
                        ],
                        [
                            "args.k",
                            "Attribute"
                        ],
                        [
                            "args.k",
                            "Attribute"
                        ],
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "connectivity",
                    "type": "str",
                    "possible_values": []
                },
                "include_self": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cosine_similarity_306": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.copy(features)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_357": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_107": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.cat([embeddings0, embeddings1], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_109": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_221": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.cat([embeddings0, embeddings1], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_223": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_86": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.cat([embeddings0, embeddings1], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels[sampled]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_91": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings0 - embeddings1))",
                            "Call"
                        ],
                        [
                            "self.linear(torch.cat([embeddings0, embeddings1], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_106": {
                "input": {
                    "value": "embeddings0 - embeddings1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "[embeddings0, embeddings1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_85": {
                "input": {
                    "value": "embeddings0 - embeddings1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_90": {
                "input": {
                    "value": "embeddings0 - embeddings1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/ssl_utils.py": {
        "sklearn": {},
        "torch": {
            "Tensor_28": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_40": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/earlystopping.py": {
        "torch": {
            "save_70": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.fname",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "self.fname",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/layers.py": {
        "torch": {
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.hiddenlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_355": {
                "variable": {
                    "value": "self.midlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_420": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_422": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_439": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_483": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.self_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "gc(x, adj)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self._doconcat(x, subx)",
                            "Call"
                        ],
                        [
                            "self.transform_layers.forward(input, identity)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_370": {
                "variable": {
                    "value": "reslayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_424": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "(x, subx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_388": {
                "variable": {
                    "value": "subx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "gc(subx, adj)",
                            "Call"
                        ],
                        [
                            "F.dropout(subx, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_397": {
                "tensors": {
                    "value": "(x, subx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_75": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.self_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models_simp.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.midlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_119": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_131": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_139": {
                "variable": {
                    "value": "self.D_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_149": {
                "variable": {
                    "value": "self.D_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "s_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea @ self.scores[0] + self.bias[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn) + gamma * Dk_i * self.ingc(fea, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "midgc(x, adj)",
                            "Call"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn) + gamma * Dk_o * self.outgc(x, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ingc(input, adj)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.reslayer(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_197": {
                "variable": {
                    "value": "s_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ self.scores[-1] + self.bias[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_206": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn) + gamma * Dk_i * self.ingc(fea, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "midgc(x, adj)",
                            "Call"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn) + gamma * Dk_o * self.outgc(x, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ingc(input, adj)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.reslayer(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "self.ss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_i.view(1, -1), s_o.view(1, -1), gamma * Dk_i.view(1, -1), gamma * Dk_o.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_234": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn) + gamma * Dk_i * self.ingc(fea, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "midgc(x, adj)",
                            "Call"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn) + gamma * Dk_o * self.outgc(x, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ingc(input, adj)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.reslayer(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_237": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn) + gamma * Dk_i * self.ingc(fea, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_i * self.ingc(fea, adj) + (1 - s_i) * self.ingc(fea, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "midgc(x, adj)",
                            "Call"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn) + gamma * Dk_o * self.outgc(x, self.identity)",
                            "BinOp"
                        ],
                        [
                            "s_o * self.outgc(x, adj) + (1 - s_o) * self.outgc(x, adj_knn)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ingc(input, adj)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.reslayer(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "data": {
                    "value": "torch.FloatTensor(nfeat, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "data": {
                    "value": "torch.FloatTensor(nfeat, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "data": {
                    "value": "torch.FloatTensor(nhid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "data": {
                    "value": "torch.FloatTensor(nhid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_simp.py": {
        "torch": {
            "Adam_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_157": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(list(model.parameters()) + list(ssl_agent.linear.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(list(model.parameters()) + list(ssl_agent.agent2.linear.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[100000]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_257": {
                "variable": {
                    "value": "loss_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_288": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters()) + list(ssl_agent.linear.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_300": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters()) + list(ssl_agent.agent2.linear.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_210": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(val_fea, val_adj, adj_knn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_213": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_235": {
                "variable": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_174": {
                "variable": {
                    "value": "train_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "row_normalize(features)",
                            "Call"
                        ],
                        [
                            "sp.vstack((allx, tx)).tolil()",
                            "Call"
                        ],
                        [
                            "np.array(features.todense())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(features).float()",
                            "Call"
                        ],
                        [
                            "torch.spmm(adj, features)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.array(features))",
                            "Call"
                        ],
                        [
                            "(features - features.mean(dim=0)) / features.std(dim=0)",
                            "BinOp"
                        ],
                        [
                            "features.numpy()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.array(features))",
                            "Call"
                        ],
                        [
                            "(features - features.mean(dim=0)) / features.std(dim=0)",
                            "BinOp"
                        ],
                        [
                            "features.numpy()",
                            "Call"
                        ],
                        [
                            "sp.vstack((allx, tx)).tolil()",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix(features_extended)",
                            "Call"
                        ],
                        [
                            "load_sparse_csr('data/{}.features.npz'.format(dataset))",
                            "Call"
                        ],
                        [
                            "features.astype(float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(features).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(train_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineSimilarity_229": {
                "variable": {
                    "value": "coser",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_117": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_231": {
                "input": {
                    "value": "cos_sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coser(x[indices[0]], x[indices[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_280": {
                "input": {
                    "value": "embeddings[indices].mean(0) - embeddings.mean(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "(output[edges[0]] * output[edges[1]]).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}