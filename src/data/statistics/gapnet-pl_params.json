{
    "tensorflow_models/main.py": {
        "sklearn": {
            "f1_score_56": {
                "variable": {
                    "value": "class_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_labels[:, i].astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "(val_predictions[:, i] + 0.5).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "gradients_69": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.loss()",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + loss_mean",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_73": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, trainables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "prediction_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sigmoid(model.output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_164": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_79": {
                "variable": {
                    "value": "update",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get_value('optimizer_params')['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "run_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "x": {
                    "value": "model.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_119": {
                "name": {
                    "value": "Loss_per_Class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_122": {
                "variable": {
                    "value": "loss_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "model.output[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "model.y_[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=model.output[:, i], labels=model.y_[:, i])",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=tf.reduce_mean(model.output[:, i], axis=0, keepdims=True), labels=model.y_[:, i])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "Loss_per_Class_Patching",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_133": {
                "variable": {
                    "value": "loss_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_mean(model.output[:, i], axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "model.y_[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "variable": {
                    "value": "loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=model.output[:, i], labels=model.y_[:, i])",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=tf.reduce_mean(model.output[:, i], axis=0, keepdims=True), labels=model.y_[:, i])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_134": {
                "input_tensor": {
                    "value": "model.output[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "reader_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "readers['train']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_threads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get_value('num_threads', 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "reader_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "readers['val']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_threads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get_value('num_threads', 5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_models/TeLL/activations.py": {
        "tensorflow": {
            "name_scope_22": {
                "name": {
                    "value": "selu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_25": {
                "condition": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * tf.nn.elu(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_25": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_models/TeLL/initializations.py": {
        "tensorflow": {
            "truncated_normal_79": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_15": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_17": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_38": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "tf.cast(tf.sqrt(1 / f_in), dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_38": {
                "x": {
                    "value": "tf.sqrt(1 / f_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.sqrt(1 / f_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_38": {
                "x": {
                    "value": "1 / f_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "x": {
                    "value": "1 / f_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_models/TeLL/layers.py": {
        "tensorflow": {
            "expand_dims_106": {
                "variable": {
                    "value": "tensor_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor_2d, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "variable": {
                    "value": "shape_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_nd.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[s if isinstance(s, int) else -1 for s in shape_nd]",
                            "ListComp"
                        ],
                        [
                            "tf.expand_dims(shape_nd, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tensor_nd, [-1, shape_nd[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor_2d, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(tensor_nd, [-1, shape_nd[-1]]), tensor_2d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dot_prod, shape_nd[:-1] + shape_2d[-1:])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_nd, tensor_2d)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(tensor_nd, 0), tensor_2d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_nd[:-1] + shape_2d[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [padding_x, padding_x], [padding_y, padding_y], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [padding_x, padding_x], [padding_y, padding_y], [0, 0]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_238": {
                "variable": {
                    "value": "avgpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0] * x_shape[1]] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0] * x_shape[1]] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0] * x_shape[1]] + x_shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W.get_shape()[0].value",
                            "Attribute"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(self.strides[-3:-1])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'ZEROPAD'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "avgpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "avgpool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x_flat, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(avgpool, x_shape[:2] + avgpool.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:2] + avgpool.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool_241": {
                "variable": {
                    "value": "avgpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W.get_shape()[0].value",
                            "Attribute"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(self.strides[-3:-1])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'ZEROPAD'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_268": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0] * x_shape[1]] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0] * x_shape[1]] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1] + x_shape[2:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0] * x_shape[1]] + x_shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W.get_shape()[0].value",
                            "Attribute"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(self.strides[-3:-1])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'ZEROPAD'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(x, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x_flat, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxpool, x_shape[:2] + maxpool.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:2] + maxpool.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_271": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W.get_shape()[0].value",
                            "Attribute"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(self.strides[-3:-1])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'ZEROPAD'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_304": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - rate",
                            "BinOp"
                        ],
                        [
                            "ops.convert_to_tensor(keep_prob, dtype=x.dtype, name='keep_prob')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_307": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(alpha, dtype=x.dtype, name='alpha')",
                            "Call"
                        ],
                        [
                            "-1.7580993408473766",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_316": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + random_ops.random_uniform(noise_shape, seed=seed, dtype=x.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_319": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fixedPointVar / (keep_prob * ((1 - keep_prob) * tf.pow(alpha - fixedPointMean, 2) + fixedPointVar))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "initial_value": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tof(i, shape)",
                            "Call"
                        ],
                        [
                            "(int(x_shape[2] / s[0]), int(x_shape[3] / s[1]))",
                            "Tuple"
                        ],
                        [
                            "(int(x_shape[1] / s[0]), int(x_shape[2] / s[1]))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor_2d, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tensor_nd, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor_2d, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_fct(x)",
                            "Call"
                        ],
                        [
                            "conv_fct(x_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, x_shape[:2] + conv.get_shape().as_list()[1:])",
                            "Call"
                        ],
                        [
                            "conv2d(incoming, self.W, strides=self.strides, padding=self.padding, dilation_rate=self.dilation_rate)",
                            "Call"
                        ],
                        [
                            "conv + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:2] + conv.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0] * x_shape[1]] + x_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0] * x_shape[1]] + x_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_326": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "tensor_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, shape_nd[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_190": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tofov(W, shape=[incoming_shape[-1], n_units], var_params=dict(name='W_dense'))",
                            "Call"
                        ],
                        [
                            "tofov(weight_initializer, shape=(ksize, ksize, self.incoming_shape[-1], num_outputs), var_params=dict(name='W_conv'))",
                            "Call"
                        ],
                        [
                            "tofov(W, shape=None, var_params=dict(name='W_conv'))",
                            "Call"
                        ],
                        [
                            "tf.zeros",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'ZEROPAD'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(self.strides[-3:-1])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convolution_197": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tofov(W, shape=[incoming_shape[-1], n_units], var_params=dict(name='W_dense'))",
                            "Call"
                        ],
                        [
                            "tofov(weight_initializer, shape=(ksize, ksize, self.incoming_shape[-1], num_outputs), var_params=dict(name='W_conv'))",
                            "Call"
                        ],
                        [
                            "tofov(W, shape=None, var_params=dict(name='W_conv'))",
                            "Call"
                        ],
                        [
                            "tf.zeros",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'ZEROPAD'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides[1:3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.asarray(self.strides[-3:-1])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "np.asarray(self.strides[-3:-1] if self.data_format == 'NHWC' else self.strides[-2:])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0] * x_shape[1]] + x_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_value_310": {
                "pylist": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - rate",
                            "BinOp"
                        ],
                        [
                            "ops.convert_to_tensor(keep_prob, dtype=x.dtype, name='keep_prob')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_313": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_461": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_573": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_674": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_737": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_797": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'DropoutLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'DenseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'MaxPoolingLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'ConcatLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_118": {
                "input": {
                    "value": "tensor_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_329": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_419": {
                "name_or_scope": {
                    "value": "self.layer_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_509": {
                "name_or_scope": {
                    "value": "self.layer_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "incoming",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "incomings",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.incoming_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_632": {
                "name_or_scope": {
                    "value": "self.layer_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_715": {
                "name_or_scope": {
                    "value": "self.layer_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_778": {
                "name_or_scope": {
                    "value": "self.layer_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_826": {
                "name_or_scope": {
                    "value": "self.layer_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_425": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "incoming",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.incoming(prev_layers=prev_layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "incomings",
                            "Name"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - self.prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "self.noise_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_827": {
                "axis": {
                    "value": "len(self.incoming_shapes[0]) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "incomings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[incoming(prev_layers=prev_layers, **kwargs) for incoming in self.incomings]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pow_319": {
                "x": {
                    "value": "alpha - fixedPointMean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_models/TeLL/regularization.py": {
        "tensorflow": {
            "reshape_72": {
                "variable": {
                    "value": "data2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "centered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddens - tf.reduce_mean(hiddens, enum_dims, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "covar_scaled_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "data2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(centered, [-1, n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "data2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(centered, [-1, n_features])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "covar_l1norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(covar_scaled_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_76": {
                "variable": {
                    "value": "covar_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(data2d)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_137": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.to_float(class_i_mask))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_140": {
                "variable": {
                    "value": "(l1norm, num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(tf.to_float(class_i_mask)), 0)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : (tf.zeros([1]), tf.zeros([1]))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : __covar_l1norm(tf.boolean_mask(hiddens, class_i_mask), enum_dims, feature_dims, n_features)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "score / tf.to_float(n_classes) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_156": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_160": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - rate",
                            "BinOp"
                        ],
                        [
                            "ops.convert_to_tensor(keep_prob, dtype=x.dtype, name='keep_prob')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_163": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(alpha, dtype=x.dtype, name='alpha')",
                            "Call"
                        ],
                        [
                            "-1.7580993408473766",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_172": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + random_ops.random_uniform(noise_shape, seed=seed, dtype=x.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_175": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fixedPointVar / (keep_prob * ((1 - keep_prob) * tf.pow(alpha - fixedPointMean, 2) + fixedPointVar))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_hiddens()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "enum_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(set(range(len(hiddens.shape.as_list()))) - set(feature_dims))",
                            "Call"
                        ],
                        [
                            "list(set(range(len(h_shape))) - set(feature_dims))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_75": {
                "x": {
                    "value": "covar_scaled_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(data2d, data2d, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_133": {
                "variable": {
                    "value": "class_i_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_135": {
                "variable": {
                    "value": "class_i_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_dims",
                            "Name"
                        ],
                        [
                            "range(n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_182": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "data2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(centered, [-1, n_features])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "tf.to_float(class_i_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_value_166": {
                "pylist": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - rate",
                            "BinOp"
                        ],
                        [
                            "ops.convert_to_tensor(keep_prob, dtype=x.dtype, name='keep_prob')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_169": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_137": {
                "x": {
                    "value": "class_i_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(labels[:, i], 1)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_147": {
                "x": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_185": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_141": {
                "tensor": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_hiddens()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "class_i_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(labels[:, i], 1)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "tf.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_54": {
                "t": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.abs(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_61": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "biases",
                            "Name"
                        ],
                        [
                            "fixedPointMean - a * (keep_prob * fixedPointMean + (1 - keep_prob) * alpha)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_52": {
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_59": {
                "x": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "biases",
                            "Name"
                        ],
                        [
                            "fixedPointMean - a * (keep_prob * fixedPointMean + (1 - keep_prob) * alpha)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_175": {
                "x": {
                    "value": "alpha - fixedPointMean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_models/TeLL/session.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConfigProto_59": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "config.get_value('inter_op_parallelism_threads', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "config.get_value('intra_op_parallelism_threads', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "config.get_value('log_device_placement', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "tf_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=config.get_value('inter_op_parallelism_threads', 1), intra_op_parallelism_threads=config.get_value('intra_op_parallelism_threads', 1), log_device_placement=config.get_value('log_device_placement', False))",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_100": {
                "variable": {
                    "value": "tf_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "config.get_value('max_checkpoints', 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "sharded": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FileWriter_76": {
                "variable": {
                    "value": "summary_instances[summary]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(workspace.get_tensorboard_dir(), summary)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf_session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "tf_global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "tell_global_step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_with_default_94": {
                "variable": {
                    "value": "global_step_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.constant(0, dtype=tf.int64), name='tell_global_step', dtype=tf.int64, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf_global_step.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_171": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.workspace.get_checkpoint()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_173": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_209": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_89": {
                "name": {
                    "value": "TeLL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "initialize_variables_214": {
                "var_list": {
                    "value": "filter(None, slots)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_91": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionLog_152": {
                "status": {
                    "value": "tf.SessionLog.START",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_models/TeLL/utility/misc.py": {
        "tensorflow": {
            "HistogramProto_250": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_models/architectures.py": {
        "tensorflow": {
            "extract_image_patches_214": {
                "variable": {
                    "value": "patches",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, height, width, n_channels], name='Features')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, height, width, n_channels], name='Features')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, height, width, 4], name='Features')",
                            "Call"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "[1, config.patch_size, config.patch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, config.patch_size, config.patch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "patches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(images=X, ksizes=[1, config.patch_size, config.patch_size, 1], strides=[1, config.patch_size, config.patch_size, 1], rates=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.patch_size, config.patch_size, config.get_value('n_channels', 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_221": {
                "variable": {
                    "value": "patchesPerImage",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(input)[0] / tf.shape(X)[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(tf.range(config.batchsize), -1), [1, patchesPerImage])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, width, n_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, width, n_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, output_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, width, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_152": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(d, tf.constant(0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.2, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_154": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(d, tf.constant(0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.5, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.output, labels=self.y_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_209": {
                "variable": {
                    "value": "mil",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.output_nand, labels=self.y_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_187": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b', shape=[1, n_classes], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(b, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid(layers[-1].get_output())",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_222": {
                "input": {
                    "value": "tf.expand_dims(tf.range(config.batchsize), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, patchesPerImage]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_152": {
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_154": {
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "NoisyAND",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_207": {
                "logits": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_209": {
                "logits": {
                    "value": "self.output_nand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "input": {
                    "value": "tf.range(config.batchsize)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_152": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_153": {
                "value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_154": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_155": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "x": {
                    "value": "layers[-1].get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_221": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, height, width, n_channels], name='Features')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, height, width, n_channels], name='Features')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, height, width, 4], name='Features')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_185": {
                "value": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get_value('a', 5)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='a', shape=[1], initializer=tf.constant_initializer(a), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_186": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_189": {
                "x": {
                    "value": "-a * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_190": {
                "x": {
                    "value": "-a * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_models/densenet.py": {
        "torch": {
            "Sequential_149": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(num_in_channels, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_186": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_187": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=out.size()[-2:], stride=1).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_120": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_192": {
                "input": {
                    "value": "1.0 + torch.exp(-prediction.abs())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_params.growth_rate",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_192": {
                "input": {
                    "value": "-prediction.abs()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "num_in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_params.num_in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_params.num_init_features",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_params.num_init_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_152": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_models/main.py": {
        "torch": {}
    },
    "pytorch_models/models.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=208, out_channels=1024, kernel_size=1, padding=0, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=h * w * 1024, out_features=512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "208",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "h * w * 1024",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "13",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "1.0 + torch.exp(-prediction.abs())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=s, stride=s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, n))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, n))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, 6 - n))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, 6 - n))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_65": {
                "input": {
                    "value": "-prediction.abs()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}