{
    "dqn.py": {
        "torch": {
            "max_486": {
                "variable": {
                    "value": "(_, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Q([state], None)",
                            "Call"
                        ],
                        [
                            "self._Q(states, hidden_states)",
                            "Call"
                        ],
                        [
                            "self._Q([[state]], prev_hidden_state)",
                            "Call"
                        ],
                        [
                            "q_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dqn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('learning_rate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e.action for e in experiences]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e.reward for e in experiences]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "not_done_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 - e.done for e in experiences]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(weights).float()",
                            "Call"
                        ],
                        [
                            "weights.unsqueeze(1) * mask.float()",
                            "BinOp"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_265": {
                "variable": {
                    "value": "best_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_273": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "td_error ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_345": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e.action for seq in experiences for e in seq]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e.reward for seq in experiences for e in seq]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(weights).float()",
                            "Call"
                        ],
                        [
                            "weights.unsqueeze(1) * mask.float()",
                            "BinOp"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_389": {
                "variable": {
                    "value": "best_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_438": {
                "variable": {
                    "value": "self._q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._state_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.size()",
                            "Call"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self._V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._state_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_464": {
                "variable": {
                    "value": "self._A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._state_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.size()",
                            "Call"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_470": {
                "variable": {
                    "value": "mean_advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._A(state_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[e.index for e in seq] for seq in experiences]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__71": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._dqn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self._max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_224": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Q([state], None)",
                            "Call"
                        ],
                        [
                            "self._Q(states, hidden_states)",
                            "Call"
                        ],
                        [
                            "self._Q([[state]], prev_hidden_state)",
                            "Call"
                        ],
                        [
                            "q_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_225": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Q([state], None)",
                            "Call"
                        ],
                        [
                            "self._Q(states, hidden_states)",
                            "Call"
                        ],
                        [
                            "self._Q([[state]], prev_hidden_state)",
                            "Call"
                        ],
                        [
                            "q_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_366": {
                "data": {
                    "value": "[e.done for seq in experiences for e in seq]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_423": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Q([state], None)",
                            "Call"
                        ],
                        [
                            "self._Q(states, hidden_states)",
                            "Call"
                        ],
                        [
                            "self._Q([[state]], prev_hidden_state)",
                            "Call"
                        ],
                        [
                            "q_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_424": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Q([state], None)",
                            "Call"
                        ],
                        [
                            "self._Q(states, hidden_states)",
                            "Call"
                        ],
                        [
                            "self._Q([[state]], prev_hidden_state)",
                            "Call"
                        ],
                        [
                            "q_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_265": {
                "input": {
                    "value": "self._Q(next_states, None)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_389": {
                "input": {
                    "value": "next_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "next_q_values.reshape(batch_size * seq_len, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "embed.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self._transition_embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self._state_embedder.embed_dim * 2 + self._action_embedder.embed_dim + reward_embed_dim, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_118": {
                "variable": {
                    "value": "self._transition_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "transition_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self._transition_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self._transition_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(traj) for traj in trajectories]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_160": {
                "variable": {
                    "value": "padded_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transition_embed.reshape(mask.shape[0], mask.shape[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([len(traj) for traj in trajectories]).long()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_168": {
                "variable": {
                    "value": "(transition_hidden_states, hidden_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "transition_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "initial_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "transition_hidden_states.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "transition_hidden_states.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "transition_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(initial_hidden_states, transition_hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "transition_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._transition_fc_layer(transition_hidden_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(transition_contexts.shape[0], 1).bool(), mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self._fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "obs_embedder.embed_dim + self._trajectory_embedder.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self._final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_310": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._fc_layer(torch.cat((obs_embed, trajectory_embed), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self._final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "id_embedder.embed_dim + state_embedder.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self._fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "recurrent_state_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self._fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "recurrent_state_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self._phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + state_embedder.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_489": {
                "variable": {
                    "value": "self._decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim + state_embedder.embed_dim + action_embedder.embed_dim, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self._reward_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_498": {
                "variable": {
                    "value": "self._state_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(env.observation_space['observation'].high)",
                            "Call"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Independent_512": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "td.Normal(mu, std)",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_560": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, state_embeds, action_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_567": {
                "variable": {
                    "value": "true_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[exp.next_state.prev_reward for exp in trajectory] for trajectory in trajectories_to_predict]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_585": {
                "variable": {
                    "value": "state_decoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_612": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(states)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(states[0])",
                            "Call"
                        ],
                        [
                            "sequence_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_613": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "torch.zeros(batch_size, sequence_len, self._z_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_648": {
                "variable": {
                    "value": "self._lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "state_embedder.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_697": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[state_embeds, next_state_embeds, action_embeds]",
                            "List"
                        ],
                        [
                            "self._recurrent_state_embedder(states, hidden_state=hidden_state)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings, 1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_697": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_780": {
                "variable": {
                    "value": "self._network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_inputs, 32, kernel_size=5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_819": {
                "variable": {
                    "value": "self._embedders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(dim, hidden_size) for dim in observation_space.high]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_821": {
                "variable": {
                    "value": "self._fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * len(observation_space.high)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_822": {
                "variable": {
                    "value": "self._final_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_825": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_846": {
                "variable": {
                    "value": "self._embedders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(dim, hidden_size) for dim in observation_space]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_848": {
                "variable": {
                    "value": "self._fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * len(observation_space)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_877": {
                "variable": {
                    "value": "self._embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_892": {
                "variable": {
                    "value": "tensor_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_908": {
                "variable": {
                    "value": "self._embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_927": {
                "variable": {
                    "value": "tensor_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(inputs)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "get_inputs(key, instruction_states)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_970": {
                "variable": {
                    "value": "self._register_embedders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._embedders.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_971": {
                "variable": {
                    "value": "self._final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum((embedder.embed_dim for embedder in self._embedders.values()))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_158": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_591": {
                "variable": {
                    "value": "next_states_to_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack([exp.next_state.observation for exp in trajectory]) for trajectory in trajectories_to_predict]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Independent_614": {
                "base_distribution": {
                    "value": "td.Normal(mu, std)",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_743": {
                "variable": {
                    "value": "self._final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_embedder.embed_dim + instruction_embedder.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "self._state_embedder.embed_dim * 2 + self._action_embedder.embed_dim + reward_embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[state_embeds, next_state_embeds, action_embeds]",
                            "List"
                        ],
                        [
                            "self._recurrent_state_embedder(states, hidden_state=hidden_state)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings, 1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_164": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "[traj[0].state.env_id for traj in trajectories]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_218": {
                "*size": {
                    "value": "id_contexts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_221": {
                "input": {
                    "value": "(id_contexts ** 2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_403": {
                "data": {
                    "value": "[seq[0].env_id for seq in states]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_490": {
                "in_features": {
                    "value": "z_dim + state_embedder.embed_dim + action_embedder.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_493": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_510": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "torch.zeros(batch_size, sequence_len, self._z_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_512": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "torch.zeros(batch_size, sequence_len, self._z_dim)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(mu) * 1e-06",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_564": {
                "input": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder(decoder_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_614": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "torch.zeros(batch_size, sequence_len, self._z_dim)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(mu) * 1e-06",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_781": {
                "in_channels": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_space.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_782": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_784": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_785": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_787": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_792": {
                "in_features": {
                    "value": "32 * 7 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_797": {
                "tensors": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_829": {
                "input": {
                    "value": "self._fc_layer(torch.cat(embeds, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_862": {
                "tensors": {
                    "value": "embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1005": {
                "input": {
                    "value": "torch.cat(embeddings, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_196": {
                "*size": {
                    "value": "transition_contexts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "tensors": {
                    "value": "(obs_embed, trajectory_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_424": {
                "input": {
                    "value": "torch.cat((history_embed, state_embeds), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_525": {
                "input": {
                    "value": "torch.cat((z, state_embeds), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_588": {
                "input": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder(decoder_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_679": {
                "tensors": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_753": {
                "input": {
                    "value": "torch.cat((state_embeds, instruction_embeds), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_820": {
                "num_embeddings": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_847": {
                "num_embeddings": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "cat_1005": {
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[state_embeds, next_state_embeds, action_embeds]",
                            "List"
                        ],
                        [
                            "self._recurrent_state_embedder(states, hidden_state=hidden_state)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings, 1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_241": {
                "input": {
                    "value": "id_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._id_embedder(torch.tensor([traj[0].state.env_id for traj in trajectories]))",
                            "Call"
                        ],
                        [
                            "self._compute_contexts(trajectories)",
                            "Call"
                        ],
                        [
                            "self._compute_contexts(trajectories)",
                            "Call"
                        ],
                        [
                            "id_contexts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_424": {
                "tensors": {
                    "value": "(history_embed, state_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_525": {
                "tensors": {
                    "value": "(z, state_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_592": {
                "tensors": {
                    "value": "[exp.next_state.observation for exp in trajectory]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_751": {
                "data": {
                    "value": "state.instructions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_753": {
                "tensors": {
                    "value": "(state_embeds, instruction_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_829": {
                "tensors": {
                    "value": "embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_674": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_675": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_988": {
                "data": {
                    "value": "state.instructions",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "envs/miniworld/sign.py": {
        "torch": {
            "tensor_182": {
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_186": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_188": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_218": {
                "f": {
                    "value": "os.path.join(args.checkpoint, 'instruction.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_220": {
                "f": {
                    "value": "os.path.join(args.checkpoint, 'exploration.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_378": {
                "obj": {
                    "value": "instruction_agent.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'instruction.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_380": {
                "obj": {
                    "value": "exploration_agent.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'exploration.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main_varibad.py": {
        "torch": {
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_72": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "os.path.join(args.checkpoint, 'agent.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "agent.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'agent.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta_exploration.py": {
        "torch": {
            "tensor_51": {
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._step(action)",
                            "Call"
                        ],
                        [
                            "MetaExplorationState(self._wrapper(state), reward, action, self._env_id)",
                            "Call"
                        ],
                        [
                            "self._reset()",
                            "Call"
                        ],
                        [
                            "MetaExplorationState(self._wrapper(state), 0, None, self._env_id)",
                            "Call"
                        ],
                        [
                            "super().reset()",
                            "Call"
                        ],
                        [
                            "super().step(action)",
                            "Call"
                        ],
                        [
                            "InstructionState(state.observation, self._current_instructions, action, None, False, self._trajectory, state.env_id)",
                            "Call"
                        ],
                        [
                            "state._replace(prev_reward=reward, done=done)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(episodes), max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_33": {
                "variable": {
                    "value": "self._episode_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(log_dir, 'episode')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_35": {
                "variable": {
                    "value": "self._step_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(log_dir, 'step')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "wrappers.py": {
        "torch": {}
    }
}