{
    "NFSP/AvgWrapper.py": {
        "torch": {
            "arange_24": {
                "variable": {
                    "value": "self._all_range_idxs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self._env_bldr.rules.RANGE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_46": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._net(pub_obses=pub_obses, range_idxs=torch.from_numpy(range_idxs).to(dtype=torch.long, device=self.device), legal_action_masks=legal_action_masks)",
                            "Call"
                        ],
                        [
                            "self._net(pub_obses=[pub_obs] * self._env_bldr.rules.RANGE_SIZE, range_idxs=self._all_range_idxs, legal_action_masks=mask)",
                            "Call"
                        ],
                        [
                            "self._net(pub_obses=batch_pub_obs_t, range_idxs=batch_range_idx, legal_action_masks=batch_legal_action_mask_t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_61": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._net(pub_obses=pub_obses, range_idxs=torch.from_numpy(range_idxs).to(dtype=torch.long, device=self.device), legal_action_masks=legal_action_masks)",
                            "Call"
                        ],
                        [
                            "self._net(pub_obses=[pub_obs] * self._env_bldr.rules.RANGE_SIZE, range_idxs=self._all_range_idxs, legal_action_masks=mask)",
                            "Call"
                        ],
                        [
                            "self._net(pub_obses=batch_pub_obs_t, range_idxs=batch_range_idx, legal_action_masks=batch_legal_action_mask_t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "range_idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "NFSP/TrainingProfile.py": {
        "torch": {
            "device_242": {
                "variable": {
                    "value": "self.device_parameter_server",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device_parameter_server",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "NFSP/workers/la/SeatActor.py": {
        "torch": {
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "NFSP/workers/la/action_buffer/ActionBufferFLAT.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "self.storage_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_17": {
                "variable": {
                    "value": "self._pub_obs_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._max_size, self._env_bldr.pub_obs_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.storage_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_19": {
                "variable": {
                    "value": "self._action_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.storage_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_20": {
                "variable": {
                    "value": "self._range_idx_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.storage_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_21": {
                "variable": {
                    "value": "self._legal_action_mask_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._max_size, self._env_bldr.N_ACTIONS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.storage_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "self._pub_obs_buffer[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pub_obs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "self._legal_action_mask_buffer[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "legal_actions_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_48": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "NFSP/workers/la/action_buffer/ActionBufferRNN.py": {
        "torch": {
            "from_numpy_80": {
                "variable": {
                    "value": "batch_legal_action_mask_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch_legal_action_mask_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "batch_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch_action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "batch_range_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch_range_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "NFSP/workers/la/dist.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "NFSP/workers/ps/dist.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}