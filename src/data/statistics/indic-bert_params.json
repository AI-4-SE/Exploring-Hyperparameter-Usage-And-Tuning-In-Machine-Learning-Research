{
    "albert/classifier_utils.py": {
        "tensorflow": {
            "TFRecordWriter_668": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_785": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_789": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_694": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_715": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([seq_length * multiple], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length * multiple], tf.int64), 'segment_ids': tf.FixedLenFeature([seq_length * multiple], tf.int64), 'label_ids': tf.FixedLenFeature([], labeltype), 'is_real_example': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_736": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_797": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [num_labels, hidden_size], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_798": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [num_labels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_811": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.square(logits - labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_846": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_646": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_647": {
                "msg": {
                    "value": "'guid: %s' % example.guid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_648": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_650": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_651": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_652": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_653": {
                "msg": {
                    "value": "'label: %s (id = %d)' % (example.label, label_id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Feature_678": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_682": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_706": {
                "shape": {
                    "value": "[seq_length * multiple]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_707": {
                "shape": {
                    "value": "[seq_length * multiple]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_708": {
                "shape": {
                    "value": "[seq_length * multiple]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_709": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labeltype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32 if task_name == 'sts-b' else tf.int64",
                            "IfExp"
                        ]
                    ]
                }
            },
            "FixedLenFeature_710": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_792": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_795": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_800": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_801": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_802": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_803": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_808": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_810": {
                "variable": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_825": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_835": {
                "variable": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['is_real_example']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_837": {
                "variable": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(label_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_862": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_877": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu, optimizer)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_672": {
                "msg": {
                    "value": "'Writing example %d of %d' % (ex_index, len(examples))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_722": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_742": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "bsz",
                            "Name"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_787": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_827": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_867": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_950": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(metric_fn, [per_example_loss, label_ids, logits, is_real_example])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_956": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "{'probabilities': probabilities, 'predictions': predictions}",
                    "type": "Dict",
                    "possible_values": []
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_1031": {
                "msg": {
                    "value": "'Writing example %d of %d' % (ex_index, len(examples))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Features_694": {
                "feature": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_805": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_837": {
                "input": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_860": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_995": {
                "value": {
                    "value": "all_input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_999": {
                "value": {
                    "value": "all_input_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1004": {
                "value": {
                    "value": "all_segment_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1009": {
                "value": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_678": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_682": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_855": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_856": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_885": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_886": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_889": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.square(logits - labels)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_squared_error_908": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_911": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.square(logits - labels)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_920": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "true_positives_922": {
                "variable": {
                    "value": "(tp, tp_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "true_negatives_924": {
                "variable": {
                    "value": "(tn, tn_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "false_positives_926": {
                "variable": {
                    "value": "(fp, fp_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "false_negatives_928": {
                "variable": {
                    "value": "(fn, fn_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "accuracy_937": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_941": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.square(logits - labels)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_934": {
                "x": {
                    "value": "(tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_945": {
                "*inputs": {
                    "value": "tp_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tn_op",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "albert/create_pretraining_data.py": {
        "tensorflow": {
            "Feature_209": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_214": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_180": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_205": {
                "msg": {
                    "value": "Wrote %d total instances",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_written",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total_written + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_619": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_629": {
                "msg": {
                    "value": "*** Reading from input files ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_639": {
                "msg": {
                    "value": "number of instances: %i",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(instances)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_642": {
                "msg": {
                    "value": "*** Writing to output files ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_654": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_631": {
                "msg": {
                    "value": "  %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_files",
                            "Name"
                        ],
                        [
                            "input_files",
                            "Name"
                        ]
                    ]
                }
            },
            "info_644": {
                "msg": {
                    "value": "  %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_files",
                            "Name"
                        ],
                        [
                            "output_files",
                            "Name"
                        ]
                    ]
                }
            },
            "TFRecordWriter_132": {
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_files",
                            "Name"
                        ],
                        [
                            "output_files",
                            "Name"
                        ]
                    ]
                }
            },
            "info_188": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_189": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in instance.tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Int64List_209": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_214": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_231": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_files",
                            "Name"
                        ],
                        [
                            "input_files",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "FLAGS.input_file_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Glob_627": {
                "filename": {
                    "value": "input_pattern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_180": {
                "feature": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_199": {
                "msg": {
                    "value": "'%s: %s' % (feature_name, ' '.join([str(x) for x in values]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "albert/export_checkpoints.py": {
        "tensorflow": {
            "reshape_52": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_57": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "segment_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "mlm_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mlm_positions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_130": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_142": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_148": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_155": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "my_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[albert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, mlm_positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, albert_config.hidden_size], initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_84": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[albert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, albert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, mlm_positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, albert_config.hidden_size], initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_103": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[albert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "info_134": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_141": {
                "ckpt_dir_or_file": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.albert_directory, FLAGS.checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, mlm_positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "albert_config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(albert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_139": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_53": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "albert/export_to_tfhub.py": {
        "tensorflow": {
            "reshape_58": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "segment_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "mlm_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mlm_positions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_118": {
                "variable": {
                    "value": "config_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "albert_config_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.albert_directory, 'albert_config.json')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "config_file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_120": {
                "variable": {
                    "value": "vocab_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vocab_model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.albert_directory, '30k-clean.model')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_123": {
                "variable": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vocab_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.albert_directory, '30k-clean.vocab')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[albert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(model.get_sequence_output(), mlm_positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "model.get_embedding_table()",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_90": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, model.get_embedding_table(), transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[albert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_129": {
                "name": {
                    "value": "tf.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "config_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(value=albert_config_path, dtype=tf.string, name='config_file')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_130": {
                "name": {
                    "value": "tf.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "vocab_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(value=vocab_model_path, dtype=tf.string, name='vocab_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_131": {
                "name": {
                    "value": "tf.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "vocab_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(value=vocab_file_path, dtype=tf.string, name='vocab_file')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_170": {
                "msg": {
                    "value": "'Using checkpoint {}'.format(checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_74": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(model.get_sequence_output(), mlm_positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "albert_config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(albert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_59": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_158": {
                "value": {
                    "value": "FLAGS.do_lower_case",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "albert/fine_tuning_utils.py": {
        "tensorflow": {
            "info_65": {
                "msg": {
                    "value": "creating model from hub_module: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "hub_module",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_69": {
                "msg": {
                    "value": "creating model from albert_config",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "albert/lamb_optimizer.py": {
        "tensorflow": {
            "get_variable_76": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "six.ensure_str(param_name) + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "six.ensure_str(param_name) + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_123": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'LAMBOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_110": {
                "variable": {
                    "value": "w_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_111": {
                "variable": {
                    "value": "g_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "update",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "next_m / (tf.sqrt(next_v) + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "update + self.weight_decay_rate * param",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_112": {
                "condition": {
                    "value": "math_ops.greater(g_norm, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "w_norm / g_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_91": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_93": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_94": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_96": {
                "x": {
                    "value": "next_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_112": {
                "x": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linalg_ops.norm(param, ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_113": {
                "x": {
                    "value": "g_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linalg_ops.norm(update, ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "albert/modeling.py": {
        "tensorflow": {
            "list_variables_365": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_426": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_476": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_477": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_510": {
                "variable": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_524": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, rate=dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_654": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_807": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dense_layer_3d(from_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), query_act, use_einsum, 'query')",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dense_layer_3d(to_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), key_act, use_einsum, 'key')",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_808": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(logits, 1.0 / math.sqrt(float(get_shape_list(q)[-1])))",
                            "Call"
                        ],
                        [
                            "logits + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(get_shape_list(q)[-1]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_833": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(logits, 1.0 / math.sqrt(float(get_shape_list(q)[-1])))",
                            "Call"
                        ],
                        [
                            "logits + adder",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_922": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dense_layer_3d(from_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), query_act, use_einsum, 'query')",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_923": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dense_layer_3d(to_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), key_act, use_einsum, 'key')",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_924": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dense_layer_3d(to_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), value_act, use_einsum, 'value')",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1149": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_1165": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_445": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_508": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_516": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_517": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_518": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_520": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_580": {
                "variable": {
                    "value": "token_type_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_less_equal_598": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_651": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_dims + [inner_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_653": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inner_dim, outer_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_656": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ret",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, batch_dims + outer_dims)",
                            "Call"
                        ],
                        [
                            "tf.einsum('BFH,HND->BFND', input_tensor, w)",
                            "Call"
                        ],
                        [
                            "einsum_via_matmul(input_tensor, w, 1)",
                            "Call"
                        ],
                        [
                            "ret + b",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('BFND,NDH->BFH', input_tensor, w)",
                            "Call"
                        ],
                        [
                            "einsum_via_matmul(input_tensor, w, 2)",
                            "Call"
                        ],
                        [
                            "tf.einsum('BFH,HO->BFO', input_tensor, w)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_dims + outer_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_686": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, num_attention_heads * head_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_690": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[hidden_size, num_attention_heads, head_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_691": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_attention_heads * head_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_695": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[num_attention_heads * head_size], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='bias', shape=[hidden_size], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='bias', shape=[output_size], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_attention_heads, head_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_732": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_attention_heads * head_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_736": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_attention_heads, head_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_737": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_775": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_779": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_819": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "broadcast_ones",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ones([from_shape[0], 1, from_shape[2], 1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([from_shape[0], 1, from_shape[2], from_shape[3], 1], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.cast(bias, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_835": {
                "a": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_probs')",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dense_layer_3d(to_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), value_act, use_einsum, 'value')",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_926": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.reshape(attention_mask, [batch_size, 1, to_seq_length, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_932": {
                "a": {
                    "value": "new_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dot_product_attention(q, k, v, attention_mask, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1179": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_392": {
                "msg": {
                    "value": "name %s match to %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "name_to_variable",
                            "Name"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tvar_name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "name",
                            "Name"
                        ],
                        [
                            "re.sub('/group_\\\\d+/', '/group_0/', six.ensure_str(name))",
                            "Call"
                        ],
                        [
                            "re.sub('/ffn_\\\\d+/', '/ffn_1/', six.ensure_str(name))",
                            "Call"
                        ],
                        [
                            "re.sub('/attention_\\\\d+/', '/attention_1/', six.ensure_str(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_471": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_474": {
                "input": {
                    "value": "tf.expand_dims(inv_timescales, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_587": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_588": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_589": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_590": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(token_type_table, token_type_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_593": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "token_type_table",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "token_type_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_600": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_613": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_624": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_685": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "name_to_variable",
                            "Name"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_697": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFH,HND->BFND",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_731": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "name_to_variable",
                            "Name"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_740": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFND,NDH->BFH",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_774": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "name_to_variable",
                            "Name"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_782": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFH,HO->BFO",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_784": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, batch_dims + [inner_dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(w, [inner_dim, outer_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, num_attention_heads * head_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[num_attention_heads * head_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_813": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[from_shape[0], 1, from_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_971": {
                "name_or_scope": {
                    "value": "attention_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_995": {
                "name_or_scope": {
                    "value": "ffn_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1090": {
                "name_or_scope": {
                    "value": "transformer",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_115": {
                "name": {
                    "value": "json_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_251": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_252": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_311": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_470": {
                "x": {
                    "value": "num_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_474": {
                "x": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_475": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_476": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_476": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_599": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_816": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[from_shape[0], 1, from_shape[2], from_shape[3], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_820": {
                "x": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(broadcast_ones, tf.cast(bias, tf.float32), transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_972": {
                "name_or_scope": {
                    "value": "self",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_984": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_996": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_1205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_472": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_477": {
                "x1": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1005": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1093": {
                "name_or_scope": {
                    "value": "'group_%d' % group_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_400": {
                "msg": {
                    "value": "%s belongs to %dth",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "name_to_variable",
                            "Name"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "gid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(num_of_group)",
                            "Call"
                        ],
                        [
                            "range(1, num_of_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1094": {
                "name": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_390": {
                "msg": {
                    "value": "name %s does not get matched",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "name_to_variable",
                            "Name"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_312": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expected_rank",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1097": {
                "name_or_scope": {
                    "value": "'inner_group_%d' % inner_group_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "albert/modeling_test.py": {
        "tensorflow": {
            "constant_150": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_152": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_153": {
                "variable": {
                    "value": "ret1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFH,HND->BFND",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_160": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_162": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "ret1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFND,NDH->BFH",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [batch_size, seq_length, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(input_tensor, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, [hidden_size, num_attention_heads, head_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(w, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_170": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_192": {
                "value": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stack.pop()",
                            "Call"
                        ],
                        [
                            "all_names",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "albert/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_33": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_35": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_38": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=poly_power, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "power": {
                    "value": "poly_power",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "cycle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_99": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "colocate_gradients_with_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_103": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars, colocate_gradients_with_ops=colocate_gradients_with_ops)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_113": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(list(zip(grads, tvars)), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "start_warm_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_warmup_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ],
                        [
                            "global_steps_int - start_warm_int",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "is_warmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "lamb_optimizer.LAMBOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "contrib_tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ],
                        [
                            "'adamw'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_50": {
                "msg": {
                    "value": "++++++ warmup starts at step  + str(start_warmup_step) + , for  + str(num_warmup_steps) +  steps ++++++",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_75": {
                "msg": {
                    "value": "using adamw",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "six.ensure_str(param_name) + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "six.ensure_str(param_name) + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_187": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_84": {
                "msg": {
                    "value": "using lamb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_162": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_164": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_165": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_167": {
                "x": {
                    "value": "next_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "albert/optimization_test.py": {
        "tensorflow": {
            "main_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer([0.1, -0.2, -0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_35": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_36": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - w))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_37": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_40": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "x - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "albert/race_utils.py": {
        "tensorflow": {
            "TFRecordWriter_257": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + padding",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_ids, [bsz_per_core * num_labels, max_seq_length])",
                            "Call"
                        ],
                        [
                            "features['input_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bsz_per_core * num_labels, max_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_mask",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "input_mask + padding",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_mask, [bsz_per_core * num_labels, max_seq_length])",
                            "Call"
                        ],
                        [
                            "features['input_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bsz_per_core * num_labels, max_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "segment_ids",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[0] * (len(context_tokens_choice) + 2) + [1] * (len(ending_tokens) + 1)",
                            "BinOp"
                        ],
                        [
                            "segment_ids + padding",
                            "BinOp"
                        ],
                        [
                            "features['segment_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bsz_per_core * num_labels, max_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_311": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_278": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(output_layer, keep_prob=1 - dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [1, hidden_size], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_322": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, num_labels])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [1], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, num_labels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bsz_per_core, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_324": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, num_labels])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_325": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_326": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, num_labels])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_328": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "tf.cast(num_labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_332": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "trainable_variables_368": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_267": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_287": {
                "input": {
                    "value": "input_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + padding",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_ids, [bsz_per_core * num_labels, max_seq_length])",
                            "Call"
                        ],
                        [
                            "features['input_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_318": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(output_layer, keep_prob=1 - dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_346": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_356": {
                "variable": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['is_real_example']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_358": {
                "variable": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(label_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_384": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_398": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_229": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "'id: {}'.format(example.example_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_261": {
                "msg": {
                    "value": "'Writing example %d of %d' % (ex_index, len(examples))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_309": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_331": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "info_348": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_389": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_418": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(metric_fn, [per_example_loss, label_ids, logits, is_real_example])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_424": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "{'probabilities': probabilities, 'predictions': predictions}",
                    "type": "Dict",
                    "possible_values": []
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_233": {
                "msg": {
                    "value": "'choice: {}'.format(choice_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_234": {
                "msg": {
                    "value": "'tokens: {}'.format(' '.join(tokens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_235": {
                "msg": {
                    "value": "'input_ids: {}'.format(' '.join(map(str, input_ids)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_237": {
                "msg": {
                    "value": "'input_mask: {}'.format(' '.join(map(str, input_mask)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_239": {
                "msg": {
                    "value": "'segment_ids: {}'.format(' '.join(map(str, segment_ids)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_241": {
                "msg": {
                    "value": "'label: {}'.format(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_278": {
                "feature": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_329": {
                "x": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_358": {
                "input": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_382": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_405": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, num_labels])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_406": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(probabilities, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_409": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_267": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_377": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "albert/run_classifier.py": {
        "tensorflow": {
            "DEFINE_string_119": {
                "name": {
                    "value": "tpu_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_125": {
                "name": {
                    "value": "tpu_zone",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_131": {
                "name": {
                    "value": "gcp_project",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_137": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RunConfig_209": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "contrib_cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "int(FLAGS.save_checkpoints_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_238": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "classifier_utils.model_fn_builder(albert_config=albert_config, num_labels=len(label_list), init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.train_step, num_warmup_steps=FLAGS.warmup_step, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, task_name=task_name, hub_module=FLAGS.albert_hub_module_handle, optimizer=FLAGS.optimizer)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=int(FLAGS.save_checkpoints_steps), keep_checkpoint_max=0, tpu_config=contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_145": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_179": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_200": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_361": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_eval_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_255": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_256": {
                "msg": {
                    "value": "  Num examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_257": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_258": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_290": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_291": {
                "msg": {
                    "value": "  Num examples = %d (%d actual, %d padding)",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "num_actual_eval_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(eval_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_294": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ListDirectory_341": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ListDirectory_364": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_436": {
                "msg": {
                    "value": "***** Running prediction*****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_437": {
                "msg": {
                    "value": "  Num examples = %d (%d actual, %d padding)",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(predict_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "num_actual_predict_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(predict_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_440": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUConfig_215": {
                "iterations_per_loop": {
                    "value": "iterations_per_loop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(min(FLAGS.iterations_per_loop, FLAGS.save_checkpoints_steps))",
                            "Call"
                        ],
                        [
                            "FLAGS.iterations_per_loop",
                            "Attribute"
                        ]
                    ]
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Exists_251": {
                "filename": {
                    "value": "train_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cached_dir, task_name + '_train.tf_record')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_285": {
                "filename": {
                    "value": "eval_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cached_dir, task_name + '_eval.tf_record')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_318": {
                "filename": {
                    "value": "best_trial_info_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'best_trial.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_329": {
                "msg": {
                    "value": "Best trial info: Step: %s, Best Value Step: %s, Best Value: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "result['global_step']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "int(global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "best_metric_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "int(best_metric_global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_375": {
                "msg": {
                    "value": "'found {} files.'.format(len(steps_and_files))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_413": {
                "msg": {
                    "value": "'saving {} to {}'.format(src_ckpt, tgt_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rename_414": {
                "src": {
                    "value": "os.path.join(FLAGS.output_dir, src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dst": {
                    "value": "os.path.join(FLAGS.output_dir, tgt_ckpt)",
                    "type": "Call",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_459": {
                "name": {
                    "value": "output_predict_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'test_results.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_460": {
                "name": {
                    "value": "output_submit_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'submit_results.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_463": {
                "msg": {
                    "value": "***** Predict results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_337": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_338": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'model.ckpt-{}.{}'.format(best_perf_global_step, ext)",
                            "Call"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_377": {
                "msg": {
                    "value": "'found 0 file, global step: {}. Sleeping.'.format(global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_319": {
                "name": {
                    "value": "best_trial_info_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'best_trial.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_393": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_373": {
                "msg": {
                    "value": "'Add {} to eval list.'.format(cur_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_395": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_405": {
                "name": {
                    "value": "best_trial_info_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'best_trial.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "albert/run_pretraining.py": {
        "tensorflow": {
            "DEFINE_string_102": {
                "name": {
                    "value": "tpu_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_108": {
                "name": {
                    "value": "tpu_zone",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_114": {
                "name": {
                    "value": "gcp_project",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_120": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_372": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_374": {
                "variable": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_377": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_457": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([max_seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'next_sentence_labels': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "RunConfig_494": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "contrib_cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "FLAGS.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "contrib_tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_519": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_fn_builder(albert_config=albert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.num_train_steps, num_warmup_steps=FLAGS.num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, optimizer=FLAGS.optimizer, poly_power=FLAGS.poly_power, start_warmup_step=FLAGS.start_warmup_step)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, keep_checkpoint_max=FLAGS.keep_checkpoint_max, tpu_config=contrib_tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_180": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_315": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[albert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, albert_config.hidden_size], initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_320": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[albert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_321": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_326": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "albert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_334": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_347": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, albert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_352": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_355": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, albert_config.hidden_size], initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_356": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[albert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_357": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_359": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_361": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_verbosity_471": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_478": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_484": {
                "msg": {
                    "value": "*** Input Files ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_490": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_541": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_eval_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_577": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_141": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_211": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_225": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_lm_loss",
                            "Name"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu, optimizer, poly_power, start_warmup_step)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_305": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=albert_config.embedding_size, activation=modeling.get_activation(albert_config.hidden_act), kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "albert_config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(albert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordDataset_434": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "info_449": {
                "msg": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.data.Dataset.from_tensor_slices(tf.constant(input_files))",
                            "Call"
                        ],
                        [
                            "d.repeat()",
                            "Call"
                        ],
                        [
                            "d.shuffle(buffer_size=len(input_files))",
                            "Call"
                        ],
                        [
                            "d.apply(contrib_data.parallel_interleave(tf.data.TFRecordDataset, sloppy=is_training, cycle_length=cycle_length))",
                            "Call"
                        ],
                        [
                            "d.shuffle(buffer_size=100)",
                            "Call"
                        ],
                        [
                            "tf.data.TFRecordDataset(input_files)",
                            "Call"
                        ],
                        [
                            "d.repeat()",
                            "Call"
                        ],
                        [
                            "d.apply(tf.data.experimental.map_and_batch_with_legacy_function(lambda record: _decode_record(record, name_to_features), batch_size=batch_size, num_parallel_batches=num_cpu_threads, drop_remainder=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_464": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_486": {
                "msg": {
                    "value": "'  %s' % input_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_527": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_528": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_537": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_538": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_143": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_185": {
                "msg": {
                    "value": "number of hidden group %d to initialize",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "albert_config.num_hidden_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_216": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_282": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_lm_loss",
                            "Name"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(metric_fn, metric_values)",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_333": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_335": {
                "input_tensor": {
                    "value": "label_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_360": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_373": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_393": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_394": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_395": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_399": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_and_batch_with_legacy_function_444": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sequence_shape[0]",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "num_cpu_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Glob_482": {
                "filename": {
                    "value": "input_pattern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUConfig_500": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_241": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_246": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_250": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "sentence_order_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sentence_order_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(sentence_order_log_probs, [-1, sentence_order_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sentence_order_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_260": {
                "variable": {
                    "value": "sentence_order_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_order_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(sentence_order_log_probs, [-1, sentence_order_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "sentence_order_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sentence_order_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sentence_order_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_263": {
                "variable": {
                    "value": "sentence_order_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "sentence_order_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sentence_order_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "sentence_order_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(sentence_order_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_266": {
                "variable": {
                    "value": "sentence_order_mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sentence_order_example_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_418": {
                "value": {
                    "value": "input_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "parallel_interleave_428": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ]
                    ]
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(num_cpu_threads, len(input_files))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_551": {
                "msg": {
                    "value": "No checkpoint found yet. Sleeping.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_557": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Scaffold_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_207": {
                "msg": {
                    "value": "initialize the %dth layer",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "gid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(num_of_initialize_group)",
                            "Call"
                        ],
                        [
                            "range(num_of_initialize_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_208": {
                "msg": {
                    "value": "assignment_map[gid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_209": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map[gid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FixedLenFeature_405": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_409": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_411": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_413": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_560": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_199": {
                "msg": {
                    "value": "initialize the %dth layer",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "gid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(num_of_initialize_group)",
                            "Call"
                        ],
                        [
                            "range(num_of_initialize_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_200": {
                "msg": {
                    "value": "assignment_map[gid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_201": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map[gid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_568": {
                "msg": {
                    "value": "'saving {} to {}'.format(src_ckpt, tgt_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Copy_569": {
                "oldpath": {
                    "value": "src_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "newpath": {
                    "value": "tgt_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_path.rsplit('-', 1)[0] + '-best.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "albert/run_pretraining_test.py": {
        "tensorflow": {
            "Example_57": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_84": {
                "path": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_93": {
                "filename": {
                    "value": "os.path.join(FLAGS.output_dir, basename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "albert/run_race.py": {
        "tensorflow": {
            "DEFINE_string_143": {
                "name": {
                    "value": "tpu_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_149": {
                "name": {
                    "value": "tpu_zone",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_155": {
                "name": {
                    "value": "gcp_project",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_161": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RunConfig_219": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "contrib_cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "int(FLAGS.save_checkpoints_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_249": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "race_utils.model_fn_builder(albert_config=albert_config, num_labels=len(label_list), init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.train_step, num_warmup_steps=FLAGS.warmup_step, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, max_seq_length=FLAGS.max_seq_length, dropout_prob=FLAGS.dropout_prob, hub_module=FLAGS.albert_hub_module_handle)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=int(FLAGS.save_checkpoints_steps), keep_checkpoint_max=0, tpu_config=contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_169": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_187": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_210": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_344": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_eval_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_262": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_263": {
                "msg": {
                    "value": "  Num examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_265": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_294": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_295": {
                "msg": {
                    "value": "  Num examples = %d (%d actual, %d padding)",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "num_actual_eval_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(eval_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_298": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ListDirectory_320": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_333": {
                "filename": {
                    "value": "checkpoint_path + '.index'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ListDirectory_347": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_419": {
                "msg": {
                    "value": "***** Running prediction*****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_420": {
                "msg": {
                    "value": "  Num examples = %d (%d actual, %d padding)",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(predict_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "num_actual_predict_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(predict_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_423": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUConfig_225": {
                "iterations_per_loop": {
                    "value": "iterations_per_loop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(min(FLAGS.iterations_per_loop, FLAGS.save_checkpoints_steps))",
                            "Call"
                        ],
                        [
                            "FLAGS.iterations_per_loop",
                            "Attribute"
                        ]
                    ]
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Exists_258": {
                "filename": {
                    "value": "FLAGS.train_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_289": {
                "filename": {
                    "value": "FLAGS.eval_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_358": {
                "msg": {
                    "value": "'found {} files.'.format(len(steps_and_files))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_443": {
                "name": {
                    "value": "output_predict_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'predict_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_445": {
                "msg": {
                    "value": "***** Predict results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_361": {
                "msg": {
                    "value": "'found 0 file, global step: {}. Sleeping.'.format(global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_448": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ],
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_379": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_356": {
                "msg": {
                    "value": "'Add {} to eval list.'.format(cur_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_381": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ],
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_389": {
                "msg": {
                    "value": "'saving {} to {}'.format(src_ckpt, tgt_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Copy_390": {
                "oldpath": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "newpath": {
                    "value": "tgt_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_path.rsplit('-', 1)[0] + '-best.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_396": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_397": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_371": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_372": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "albert/run_squad_v1.py": {
        "tensorflow": {
            "DEFINE_string_151": {
                "name": {
                    "value": "tpu_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_157": {
                "name": {
                    "value": "tpu_zone",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_163": {
                "name": {
                    "value": "gcp_project",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_169": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RunConfig_271": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "contrib_cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_310": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "squad_utils.v1_model_fn_builder(albert_config=albert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, use_einsum=FLAGS.use_einsum, hub_module=FLAGS.albert_hub_module_handle)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, keep_checkpoint_max=0, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_mask",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "segment_ids",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_246": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_252": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_262": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_454": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_eval_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ServingInputReceiver_239": {
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'input_ids': input_ids, 'input_mask': input_mask, 'segment_ids': segment_ids}",
                            "Dict"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'input_ids': input_ids, 'input_mask': input_mask, 'segment_ids': segment_ids}",
                            "Dict"
                        ]
                    ]
                }
            },
            "info_335": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "  Num orig examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_339": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "int(len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_388": {
                "msg": {
                    "value": "***** Running predictions *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_389": {
                "msg": {
                    "value": "  Num orig examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_390": {
                "msg": {
                    "value": "  Num split examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_391": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_406": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ListDirectory_441": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_455": {
                "filename": {
                    "value": "checkpoint_path + '.index'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ListDirectory_465": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_517": {
                "msg": {
                    "value": "***** Final Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MakeDirs_524": {
                "dirname": {
                    "value": "FLAGS.export_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_527": {
                "msg": {
                    "value": "Starting to export model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_532": {
                "msg": {
                    "value": "Starting to export TFLite.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUConfig_277": {
                "iterations_per_loop": {
                    "value": "iterations_per_loop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(min(FLAGS.iterations_per_loop, FLAGS.save_checkpoints_steps))",
                            "Call"
                        ],
                        [
                            "FLAGS.iterations_per_loop",
                            "Attribute"
                        ]
                    ]
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Exists_321": {
                "filename": {
                    "value": "FLAGS.train_feature_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_359": {
                "filename": {
                    "value": "FLAGS.predict_feature_left_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_361": {
                "msg": {
                    "value": "'Loading eval features from {}'.format(FLAGS.predict_feature_left_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_476": {
                "msg": {
                    "value": "'found {} files.'.format(len(steps_and_files))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_519": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ],
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_539": {
                "name": {
                    "value": "tflite_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.export_dir, 'albert_model.tflite')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_478": {
                "msg": {
                    "value": "'found 0 file, global step: {}. Sleeping.'.format(global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_413": {
                "msg": {
                    "value": "'Processing example: %d' % len(all_results)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_492": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_506": {
                "msg": {
                    "value": "'  best {} = {}\\n'.format(key_name, best_perf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_474": {
                "msg": {
                    "value": "'Add {} to eval list.'.format(cur_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_494": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ],
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_502": {
                "msg": {
                    "value": "'saving {} to {}'.format(src_ckpt, tgt_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Copy_503": {
                "oldpath": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "newpath": {
                    "value": "tgt_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_path.rsplit('-', 1)[0] + '-best.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_511": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_512": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_488": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_489": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "albert/run_squad_v2.py": {
        "tensorflow": {
            "DEFINE_string_152": {
                "name": {
                    "value": "tpu_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_158": {
                "name": {
                    "value": "tpu_zone",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_164": {
                "name": {
                    "value": "gcp_project",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_170": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RunConfig_245": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "contrib_cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_287": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "squad_utils.v2_model_fn_builder(albert_config=albert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, max_seq_length=FLAGS.max_seq_length, start_n_top=FLAGS.start_n_top, end_n_top=FLAGS.end_n_top, dropout_prob=FLAGS.dropout_prob, hub_module=FLAGS.albert_hub_module_handle)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, keep_checkpoint_max=0, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=contrib_tpu.TPUConfig(iterations_per_loop=iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_220": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_226": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_236": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_442": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_eval_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_312": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_313": {
                "msg": {
                    "value": "  Num orig examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_315": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_316": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "int(len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_364": {
                "msg": {
                    "value": "***** Running predictions *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_365": {
                "msg": {
                    "value": "  Num orig examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_366": {
                "msg": {
                    "value": "  Num split examples = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_367": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_382": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ListDirectory_429": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_443": {
                "filename": {
                    "value": "checkpoint_path + '.index'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ListDirectory_453": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_505": {
                "msg": {
                    "value": "***** Final Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUConfig_251": {
                "iterations_per_loop": {
                    "value": "iterations_per_loop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(min(FLAGS.iterations_per_loop, FLAGS.save_checkpoints_steps))",
                            "Call"
                        ],
                        [
                            "FLAGS.iterations_per_loop",
                            "Attribute"
                        ]
                    ]
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Name",
                    "possible_values": [
                        [
                            "contrib_tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Exists_298": {
                "filename": {
                    "value": "FLAGS.train_feature_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_335": {
                "filename": {
                    "value": "FLAGS.predict_feature_left_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_337": {
                "msg": {
                    "value": "'Loading eval features from {}'.format(FLAGS.predict_feature_left_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_464": {
                "msg": {
                    "value": "'found {} files.'.format(len(steps_and_files))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_507": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ],
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_466": {
                "msg": {
                    "value": "'found 0 file, global step: {}. Sleeping.'.format(global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_389": {
                "msg": {
                    "value": "'Processing example: %d' % len(all_results)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_480": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_494": {
                "msg": {
                    "value": "'  best {} = {}\\n'.format(key_name, best_perf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_462": {
                "msg": {
                    "value": "'Add {} to eval list.'.format(cur_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_482": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ],
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_490": {
                "msg": {
                    "value": "'saving {} to {}'.format(src_ckpt, tgt_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Copy_491": {
                "oldpath": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "newpath": {
                    "value": "tgt_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_path.rsplit('-', 1)[0] + '-best.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_499": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_500": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_476": {
                "msg": {
                    "value": "'removing {}'.format(src_ckpt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Remove_477": {
                "filename": {
                    "value": "src_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ],
                        [
                            "checkpoint_path + '.{}'.format(ext)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "albert/squad_utils.py": {
        "tensorflow": {
            "get_variable_729": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cls/squad/output_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_733": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cls/squad/output_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_736": {
                "variable": {
                    "value": "final_hidden_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "final_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_738": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "final_hidden_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "output_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cls/squad/output_weights', [2, hidden_size], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_739": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cls/squad/output_bias', [2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_741": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_742": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_744": {
                "variable": {
                    "value": "unstacked_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_1447": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1450": {
                "variable": {
                    "value": "p_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['p_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_536": {
                "msg": {
                    "value": "'Total number of instances: {} = pos {} neg {}'.format(cnt_pos + cnt_neg, cnt_pos, cnt_neg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_619": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Example_645": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_664": {
                "variable": {
                    "value": "name_to_features[p_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_667": {
                "variable": {
                    "value": "name_to_features[start_positions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_668": {
                "variable": {
                    "value": "name_to_features[end_positions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_669": {
                "variable": {
                    "value": "name_to_features[is_impossible]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_673": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'unique_ids': tf.FixedLenFeature([], tf.int64), 'input_ids': tf.FixedLenFeature([seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([seq_length], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_694": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_784": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(start_logits, name='start_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(start_logits, -1), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "start_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_785": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(end_logits, name='end_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [max_seq_length, -1, start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "end_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_787": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_917": {
                "msg": {
                    "value": "'Writing predictions to: %s' % output_prediction_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_918": {
                "msg": {
                    "value": "'Writing nbest to: %s' % output_nbest_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1309": {
                "msg": {
                    "value": "'Writing predictions to: %s' % output_prediction_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1310": {
                "msg": {
                    "value": "'Writing nbest to: %s' % output_nbest_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_1454": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_1459": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(start_logits, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_1461": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "start_logits_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_1544": {
                "variable": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.zeros([bsz], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_1547": {
                "variable": {
                    "value": "cls_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bl->bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "cls_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.zeros([bsz], dtype=tf.int32), max_seq_length, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1550": {
                "variable": {
                    "value": "start_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "start_logits_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_start",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_1552": {
                "variable": {
                    "value": "start_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bl->bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "start_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(start_logits_masked, axis=-1, name='softmax_start')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1556": {
                "variable": {
                    "value": "ans_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_feature, cls_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_1557": {
                "variable": {
                    "value": "ans_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ans_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([start_feature, cls_feature], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ans_feature, albert_config.hidden_size, activation=tf.tanh, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(ans_feature, dropout_prob, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "albert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_1564": {
                "variable": {
                    "value": "ans_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ans_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([start_feature, cls_feature], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ans_feature, albert_config.hidden_size, activation=tf.tanh, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(ans_feature, dropout_prob, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ],
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ]
                    ]
                }
            },
            "dense_1566": {
                "variable": {
                    "value": "cls_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ans_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([start_feature, cls_feature], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ans_feature, albert_config.hidden_size, activation=tf.tanh, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(ans_feature, dropout_prob, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_1573": {
                "variable": {
                    "value": "cls_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(ans_feature, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cls_logits, -1)",
                            "Call"
                        ],
                        [
                            "outputs['cls_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "trainable_variables_1614": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_626": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_657": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_658": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_659": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_660": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_759": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_804": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_835": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(start_loss + end_loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(start_loss + end_loss) * 0.5",
                            "BinOp"
                        ],
                        [
                            "total_loss + regression_loss * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ],
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "GFile_1022": {
                "name": {
                    "value": "output_prediction_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_1025": {
                "name": {
                    "value": "output_nbest_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_1419": {
                "name": {
                    "value": "output_prediction_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_1422": {
                "name": {
                    "value": "output_nbest_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_1425": {
                "name": {
                    "value": "output_null_log_odds_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1445": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1453": {
                "name_or_scope": {
                    "value": "start_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1464": {
                "name_or_scope": {
                    "value": "end_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1468": {
                "variable": {
                    "value": "start_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['start_positions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1469": {
                "variable": {
                    "value": "start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "start_positions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['start_positions']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(features['start_positions'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "max_seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_1471": {
                "variable": {
                    "value": "start_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bl->bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "start_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_indexes",
                            "Name"
                        ],
                        [
                            "result.start_top_index[i]",
                            "Subscript"
                        ],
                        [
                            "tf.one_hot(start_positions, depth=max_seq_length, axis=-1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(start_top_index, depth=max_seq_length, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1472": {
                "variable": {
                    "value": "start_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_features[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[max_seq_length, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1473": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([output, start_features], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "albert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_1482": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(end_logits, name='end_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [max_seq_length, -1, start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_1488": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(end_logits, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_1490": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "end_logits_masked",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "end_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ],
                        [
                            "end_logits * (1 - p_mask[:, None]) - 1e+30 * p_mask[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "top_k_1494": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(start_logits_masked, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "start_n_top",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_1496": {
                "variable": {
                    "value": "start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "start_top_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_1498": {
                "variable": {
                    "value": "start_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bkl->bkh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "start_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_indexes",
                            "Name"
                        ],
                        [
                            "result.start_top_index[i]",
                            "Subscript"
                        ],
                        [
                            "tf.one_hot(start_positions, depth=max_seq_length, axis=-1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(start_top_index, depth=max_seq_length, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1499": {
                "variable": {
                    "value": "end_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, start_n_top, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1501": {
                "variable": {
                    "value": "start_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_features[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[max_seq_length, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1503": {
                "variable": {
                    "value": "end_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[end_input, start_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_1504": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "end_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(output[:, :, None], [1, 1, start_n_top, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([end_input, start_features], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "albert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_1512": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(end_logits, name='end_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [max_seq_length, -1, start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(albert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1518": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(end_logits, name='end_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [max_seq_length, -1, start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_seq_length, -1, start_n_top]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1519": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(end_logits, name='end_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [max_seq_length, -1, start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_1522": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "end_logits_masked",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "end_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ],
                        [
                            "end_logits * (1 - p_mask[:, None]) - 1e+30 * p_mask[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "top_k_1523": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(end_logits_masked, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(end_logits_masked, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "end_n_top",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_1525": {
                "variable": {
                    "value": "end_top_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "end_top_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(end_top_log_probs, [-1, start_n_top * end_n_top])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, start_n_top * end_n_top]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1528": {
                "variable": {
                    "value": "end_top_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "end_top_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(end_top_index, [-1, start_n_top * end_n_top])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, start_n_top * end_n_top]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1542": {
                "name_or_scope": {
                    "value": "answer_class",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_1589": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_1631": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1659": {
                "variable": {
                    "value": "is_impossible",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['is_impossible']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_1660": {
                "variable": {
                    "value": "regression_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(is_impossible, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "cls_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(ans_feature, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cls_logits, -1)",
                            "Call"
                        ],
                        [
                            "outputs['cls_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_1662": {
                "variable": {
                    "value": "regression_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "regression_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.cast(is_impossible, dtype=tf.float32), logits=cls_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(regression_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_1670": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(start_loss + end_loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(start_loss + end_loss) * 0.5",
                            "BinOp"
                        ],
                        [
                            "total_loss + regression_loss * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ],
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_229": {
                "msg": {
                    "value": "'Converting {}/{} pos {} neg {}'.format(example_index, len(examples), cnt_pos, cnt_neg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_325": {
                "msg": {
                    "value": "MISMATCH DETECTED!",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int32_680": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_700": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "bsz",
                            "Name"
                        ],
                        [
                            "final_hidden_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_731": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_761": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_809": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_817": {
                "variable": {
                    "value": "one_hot_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "seq_length",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "final_hidden_shape[1]",
                            "Subscript"
                        ],
                        [
                            "modeling.get_shape_list(input_ids)[1]",
                            "Subscript"
                        ],
                        [
                            "modeling.get_shape_list(input_ids)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_819": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_847": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'start_log_prob': start_logits, 'end_log_prob': end_logits}",
                            "Dict"
                        ],
                        [
                            "{'unique_ids': features['unique_ids'], 'start_top_index': outputs['start_top_index'], 'start_top_log_probs': outputs['start_top_log_probs'], 'end_top_index': outputs['end_top_index'], 'end_top_log_probs': outputs['end_top_log_probs'], 'cls_logits': outputs['cls_logits']}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "squeeze_1459": {
                "input": {
                    "value": "start_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(start_logits, name='start_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(start_logits, -1), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1544": {
                "shape": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_1591": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1636": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1644": {
                "variable": {
                    "value": "one_hot_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "seq_length",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "final_hidden_shape[1]",
                            "Subscript"
                        ],
                        [
                            "modeling.get_shape_list(input_ids)[1]",
                            "Subscript"
                        ],
                        [
                            "modeling.get_shape_list(input_ids)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1648": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(tf.reduce_sum(one_hot_positions * log_probs, axis=-1))",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(one_hot_positions * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_1684": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'start_log_prob': start_logits, 'end_log_prob': end_logits}",
                            "Dict"
                        ],
                        [
                            "{'unique_ids': features['unique_ids'], 'start_top_index': outputs['start_top_index'], 'start_top_log_probs': outputs['start_top_log_probs'], 'end_top_index': outputs['end_top_index'], 'end_top_log_probs': outputs['end_top_log_probs'], 'cls_logits': outputs['cls_logits']}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_470": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_471": {
                "msg": {
                    "value": "'unique_id: %s' % unique_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_472": {
                "msg": {
                    "value": "'example_index: %s' % example_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_473": {
                "msg": {
                    "value": "'doc_span_index: %s' % doc_span_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_474": {
                "msg": {
                    "value": "'tok_start_to_orig_index: %s' % ' '.join([str(x) for x in cur_tok_start_to_orig_index])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_476": {
                "msg": {
                    "value": "'tok_end_to_orig_index: %s' % ' '.join([str(x) for x in cur_tok_end_to_orig_index])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_478": {
                "msg": {
                    "value": "'token_is_max_context: %s' % ' '.join(['%d:%s' % (x, y) for (x, y) in six.iteritems(token_is_max_context)])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_481": {
                "msg": {
                    "value": "'input_pieces: %s' % ' '.join([tokenizer.sp_model.IdToPiece(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_483": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_484": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_486": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Features_645": {
                "feature": {
                    "value": "features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "example_index_to_features[example_index]",
                            "Subscript"
                        ],
                        [
                            "example_index_to_features[example_index]",
                            "Subscript"
                        ],
                        [
                            "example_index_to_features[example_index]",
                            "Subscript"
                        ],
                        [
                            "example_index_to_features[example_index]",
                            "Subscript"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_802": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_1474": {
                "values": {
                    "value": "[output, start_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1488": {
                "input": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(end_logits, name='end_logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, albert_config.hidden_size, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=modeling.create_initializer(albert_config.initializer_range), name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [max_seq_length, -1, start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_1629": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_490": {
                "msg": {
                    "value": "impossible example span",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_496": {
                "msg": {
                    "value": "'start_position: %d' % start_position",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_497": {
                "msg": {
                    "value": "'end_position: %d' % end_position",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_498": {
                "msg": {
                    "value": "'answer: %s' % tokenization.printable_text(answer_text)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Int64List_627": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_797": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_798": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_820": {
                "input_tensor": {
                    "value": "tf.reduce_sum(one_hot_positions * log_probs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_1624": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_1625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1647": {
                "input_tensor": {
                    "value": "one_hot_positions * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_1661": {
                "x": {
                    "value": "is_impossible",
                    "type": "Call",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "qa.get('is_impossible', False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features['is_impossible'], [-1])",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_821": {
                "input_tensor": {
                    "value": "one_hot_positions * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "albert/tokenization.py": {
        "tensorflow": {
            "GFile_144": {
                "name": {
                    "value": "vocab_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_190": {
                "variable": {
                    "value": "sp_model_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "spm_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab_file",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_188": {
                "msg": {
                    "value": "loading sentence piece model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_237": {
                "msg": {
                    "value": "using sentence piece tokenzier.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_245": {
                "msg": {
                    "value": "using sentence piece tokenzier.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "albert/tokenization_test.py": {
        "tensorflow": {
            "main_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune/modules/base.py": {
        "torch": {
            "manual_seed_54": {
                "seed": {
                    "value": "hparams['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids or 0 for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_56": {
                "seed": {
                    "value": "hparams['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_135": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_186": {
                "dataset": {
                    "value": "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "self.convert_examples_to_features(examples)",
                            "Call"
                        ],
                        [
                            "convert_multiple_choice_examples_to_features(examples, self.tokenizer, max_length=self.hparams['max_seq_length'], label_list=self.labels)",
                            "Call"
                        ],
                        [
                            "convert_text_examples_to_features(examples, self.tokenizer, max_length=self.hparams['max_seq_length'], label_list=self.labels, output_mode=self.output_mode)",
                            "Call"
                        ],
                        [
                            "convert_tokens_examples_to_features(examples, self.labels, self.hparams['max_seq_length'], self.tokenizer, cls_token_at_end=bool(self.config.model_type in ['xlnet']), cls_token=self.tokenizer.cls_token, cls_token_segment_id=2 if self.config.model_type in ['xlnet'] else 0, sep_token=self.tokenizer.sep_token, sep_token_extra=bool(self.config.model_type in ['roberta']), pad_on_left=bool(self.config.model_type in ['xlnet']), pad_token=self.tokenizer.pad_token_id, pad_token_segment_id=self.tokenizer.pad_token_type_id, pad_token_label_id=self.pad_token_label_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_187": {
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune/modules/masked_lm.py": {
        "torch": {
            "tensor_81": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids or 0 for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "all_cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.candidates for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "all_answers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "mask_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(input_ids == self.mask_id).argmax(axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_107": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "predictions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "dataset": {
                    "value": "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels, all_cands, all_answers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "self.load_features(mode)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_89": {
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune/modules/multiple_choice.py": {
        "torch": {
            "stack_18": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_18": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune/modules/text_classification.py": {
        "torch": {
            "stack_37": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune/modules/token_classification.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_36": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune/modules/xsent_retrieval.py": {
        "torch": {
            "mean_35": {
                "variable": {
                    "value": "mean_pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}