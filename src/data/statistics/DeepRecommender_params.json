{
    "logger.py": {
        "tensorflow": {
            "FileWriter_17": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_21": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_44": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_54": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_71": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "infer.py": {
        "torch": {
            "is_available_34": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_71": {
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reco_encoder/data/input_layer.py": {
        "torch": {}
    },
    "reco_encoder/model/model.py": {
        "torch": {
            "sum_33": {
                "variable": {
                    "value": "num_ratings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_34": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if not size_average else mean",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ParameterList_57": {
                "variable": {
                    "value": "self.encode_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.rand(layer_sizes[i + 1], layer_sizes[i])) for i in range(len(layer_sizes) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_62": {
                "variable": {
                    "value": "self.encode_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(layer_sizes[i + 1])) for i in range(len(layer_sizes) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_73": {
                "variable": {
                    "value": "self.decode_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(reversed_enc_layers[i + 1])) for i in range(len(reversed_enc_layers) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "selu_11": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dp_drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_69": {
                "variable": {
                    "value": "self.decode_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.rand(reversed_enc_layers[i + 1], reversed_enc_layers[i])) for i in range(len(reversed_enc_layers) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_13": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu6_15": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "data": {
                    "value": "torch.rand(layer_sizes[i + 1], layer_sizes[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "data": {
                    "value": "torch.zeros(layer_sizes[i + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "data": {
                    "value": "torch.zeros(reversed_enc_layers[i + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "data": {
                    "value": "torch.rand(reversed_enc_layers[i + 1], reversed_enc_layers[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "reversed_enc_layers[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(input=F.linear(input=x, weight=w, bias=self.encode_b[ind]), kind=self._nl_type)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.encode_b[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_19": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_70": {
                "*size": {
                    "value": "reversed_enc_layers[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "reversed_enc_layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_108": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(input=F.linear(input=z, weight=w.transpose(0, 1), bias=self.decode_b[ind]), kind=self._nl_type if ind != self._last or self._last_layer_activations else 'none')",
                            "Call"
                        ],
                        [
                            "activation(input=F.linear(input=z, weight=w, bias=self.decode_b[ind]), kind=self._nl_type if ind != self._last or self._last_layer_activations else 'none')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.decode_b[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_115": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(input=F.linear(input=z, weight=w.transpose(0, 1), bias=self.decode_b[ind]), kind=self._nl_type if ind != self._last or self._last_layer_activations else 'none')",
                            "Call"
                        ],
                        [
                            "activation(input=F.linear(input=z, weight=w, bias=self.decode_b[ind]), kind=self._nl_type if ind != self._last or self._last_layer_activations else 'none')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.decode_b[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "elu_21": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "is_available_59": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_149": {
                "variable": {
                    "value": "rencoder",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rencoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.AutoEncoder(layer_sizes=[data_layer.vector_dim] + [int(l) for l in args.hidden_layers.split(',')], nl_type=args.non_linearity_type, is_constrained=args.constrained, dp_drop_prob=args.drop_prob, last_layer_activations=not args.skip_last_layer_nl)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(rencoder, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "rencoder.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(g) for g in args.gpu_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Adam_155": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rencoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "variable": {
                    "value": "dp",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "args.noise_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "rencoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_checkpoint + '.last'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adagrad_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rencoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_245": {
                "*size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "data_layer.vector_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "model_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.logdir + '/model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rencoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_166": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(rencoder.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(rencoder.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(rencoder.parameters(), lr=args.lr, momentum=0.9, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(rencoder.parameters(), lr=args.lr, momentum=0.9, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[24, 36, 48, 66, 72]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "rencoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_checkpoint + '.epoch_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSprop_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rencoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_model.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}