{
    "layers/discritizer.py": {
        "sklearn": {
            "MeanShift_232": {
                "variable": {
                    "value": "self.cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "bandwidth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "as_tensor_73": {
                "variable": {
                    "value": "labelI_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(labelI_onehot, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_74": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[bidx, 0, 0, labelI.shape[0] - 1, labelI.shape[1] - 1, 0, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(bboxes).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(segments['bboxes'], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_202": {
                "input": {
                    "value": "bht * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_ext[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_203": {
                "input": {
                    "value": "bwd * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_ext[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_211": {
                "variable": {
                    "value": "ext_x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx - pwd / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_212": {
                "variable": {
                    "value": "ext_x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ext_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(cx - pwd / 2, min=0)",
                            "Call"
                        ],
                        [
                            "torch.min(ext_x0, wd - pwd)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_215": {
                "variable": {
                    "value": "ext_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cy - pht / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_216": {
                "variable": {
                    "value": "ext_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ext_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(cy - pht / 2, min=0)",
                            "Call"
                        ],
                        [
                            "torch.min(ext_y0, ht - pht)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_219": {
                "variable": {
                    "value": "ext_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ext_x0.int(), ext_y0.int(), ext_x1.int(), ext_y1.int()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_106": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_intensity[:, None] - mean_intensity[None, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_142": {
                "variable": {
                    "value": "labelI_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labelI.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labelI.max() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_142": {
                "variable": {
                    "value": "labelI_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "pht",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bwd * ht / wd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_207": {
                "variable": {
                    "value": "pwd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bht * wd / ht",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_345": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "variable"
                        ],
                        [
                            "((rng_wght * nei_x).sum(axis=1) / rng_wght.sum(axis=1))[:, None, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0 / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_357": {
                "variable": {
                    "value": "spt_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor((axis_x - cx) ** 2 + (axis_y - cy) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_363": {
                "variable": {
                    "value": "nei_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_364": {
                "variable": {
                    "value": "rng_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_389": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.ReplicationPad2d([pad_wd, pad_wd, pad_ht, pad_ht])(tensor)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_433": {
                "variable": {
                    "value": "labelImgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mf_fea / (self.rradius + 0.01)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segments['bboxes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "labelI_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "merge_disconnected_regions(mean_intensity, labelI_onehot, keep)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_166": {
                "variable": {
                    "value": "base_tmpl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_intensity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labelI_onehot * intensityI).sum(axis=-1) / (area + 1)",
                            "BinOp"
                        ],
                        [
                            "(labelI_onehot * intensityI).sum(axis=-1) / (area + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "cur_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bth_idx, x0, y0, x1, y1, int_label, mean_intensity]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_346": {
                "input": {
                    "value": "torch.exp(expVal)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1.0 / (sigma * self.sqrt_pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_447": {
                "variable": {
                    "value": "one_tmpl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[ht, wd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_xor_120": {
                "variable": {
                    "value": "siml",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "merge[merge_idxes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "siml",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_345": {
                "input": {
                    "value": "torch.mul(x, 1.0 / sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_346": {
                "input": {
                    "value": "expVal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(-0.5, torch.pow(torch.mul(x, 1.0 / sigma), 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_388": {
                "padding": {
                    "value": "[pad_wd, pad_wd, pad_ht, pad_ht]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_168": {
                "input": {
                    "value": "base_tmpl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(mean_intensity, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_448": {
                "input": {
                    "value": "one_tmpl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([ht, wd])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_449": {
                "input": {
                    "value": "one_tmpl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([ht, wd])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_160": {
                "input": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labelI_onehot.sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "labelI_onehot.sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "area[idxes]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "num_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_params['num_keep']",
                            "Subscript"
                        ],
                        [
                            "cand_params['num_keep']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_363": {
                "n": {
                    "value": "spt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sdiameter * self.sdiameter",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_364": {
                "n": {
                    "value": "spt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sdiameter * self.sdiameter",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "backbone.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, *args, **kwdargs, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_269": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_342": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_355": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(self.channels[l]) for l in norm_layers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, conv_channels, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False, dilation=self.dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_215": {
                "variable": {
                    "value": "new_state_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_233": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_236": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "*args": {
                    "value": "*layer_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_321": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_439": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_440": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_441": {
                "in_channels": {
                    "value": "conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False, dilation=self.dilation), self.norm_layer(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if downsample > 1 else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_442": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_355": {
                "num_features": {
                    "value": "self.channels[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_171": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self._preconv(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norms[self.norm_lookup[idx]](x)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_384": {},
            "Conv2d_395": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "v[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_396": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/base_config.py": {
        "torch": {
            "softmax_191": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_192": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/base_dataset.py": {
        "torch": {
            "interpolate_333": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_prime, w_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_340": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_prime, w_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_351": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img.unsqueeze(0), (h_prime, w_prime), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.pad(img, pad_dims, mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, new_w - w_prime, 0, new_h - h_prime)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_352": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(masks.unsqueeze(0), (h_prime, w_prime), mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.pad(masks, pad_dims, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.concatenate([instGT, wghts], axis=0))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semGT)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, new_w - w_prime, 0, new_h - h_prime)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([instGT, wghts], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "semGT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([1, ht, wd], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/coco.py": {
        "torch": {
            "from_numpy_142": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(path)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_142": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/pascal.py": {
        "torch": {
            "from_numpy_102": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(osp.join(self.root, 'JPEGImages', img_id + '.jpg'))",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_102": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dvis_network.py": {
        "torch": {
            "current_device_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, cfg.max_size, cfg.max_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_count_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.lat_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(x, cfg.fpn.num_features, kernel_size=1) for x in reversed(in_channels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.pred_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(cfg.fpn.num_features, cfg.fpn.num_features, kernel_size=3, padding=padding) for _ in in_channels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "convouts[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(0) if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[net(x) for net in self.nets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.downsample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(cfg.fpn.num_features, cfg.fpn.num_features, kernel_size=3, padding=1, stride=2) for _ in range(cfg.fpn.num_downsample)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_369": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, 3, cfg.max_size, cfg.max_size))",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, device=convouts[0].device)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode=self.interpolation_mode, align_corners=False)",
                            "Call"
                        ],
                        [
                            "x + lat_layer(convouts[j])",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.interpolation_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "out[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out[idx + cur_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_234": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_379": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, 3, cfg.max_size, cfg.max_size))",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, device=convouts[0].device)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode=self.interpolation_mode, align_corners=False)",
                            "Call"
                        ],
                        [
                            "x + lat_layer(convouts[j])",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg.fpn.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "cfg.fpn.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.fpn.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if cfg.fpn.pad else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_121": {
                "input": {
                    "value": "out[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "cfg.fpn.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.fpn.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_132": {
                "input": {
                    "value": "out[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/box_utils.py": {
        "torch": {
            "min_45": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :, 2:].unsqueeze(2).expand(n, A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :, :2].unsqueeze(2).expand(n, A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_83": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "area_a + area_b - inter",
                            "BinOp"
                        ],
                        [
                            "area_a + area_b - inter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(union, min=0.1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_341": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_x1 * img_size",
                            "BinOp"
                        ],
                        [
                            "_x1.long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_342": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_x1 * img_size",
                            "BinOp"
                        ],
                        [
                            "_x1.long()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_343": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 - padding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_344": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 + padding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_363": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_364": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_14": {
                "tensors": {
                    "value": "(boxes[:, :2] - boxes[:, 2:] / 2, boxes[:, :2] + boxes[:, 2:] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "((boxes[:, 2:] + boxes[:, :2]) / 2, boxes[:, 2:] - boxes[:, :2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "input": {
                    "value": "inter / union",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "input": {
                    "value": "area_a + area_b - intersection",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes[:, :2] - priors[:, :2], torch.log(boxes[:, 2:] / priors[:, 2:]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g_cxcy, g_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loc[:, :2] + priors[:, :2], priors[:, 2:] * torch.exp(loc[:, 2:]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(loc[:, 2:] * variances[1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "input": {
                    "value": "(diff ** 2).sum(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_324": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_261": {
                "input": {
                    "value": "g_wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(matched[:, 2:] - matched[:, :2]) / priors[:, 2:]",
                            "BinOp"
                        ],
                        [
                            "torch.log(g_wh) / variances[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_324": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_250": {
                "input": {
                    "value": "boxes[:, 2:] / priors[:, 2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_324": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_386": {
                "start": {
                    "value": "idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "idx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_299": {
                "input": {
                    "value": "loc[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_308": {
                "input": {
                    "value": "loc[:, 2:] * variances[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers/functions/detection.py": {
        "torch": {
            "max_82": {
                "variable": {
                    "value": "(conf_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf_preds[batch_idx, 1:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_127": {
                "variable": {
                    "value": "(iou_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jaccard(boxes_idx, boxes_idx)",
                            "Call"
                        ],
                        [
                            "jaccard(boxes, boxes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scr_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_200": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cls_scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[conf_mask], cls_scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_210": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_163": {
                "start": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers/interpolate.py": {
        "torch": {
            "interpolate_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "*self.args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/classify_loss.py": {
        "torch": {
            "NLLLoss_13": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_25": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_35": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_18": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_28": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/evaluate.py": {
        "torch": {
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "intp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_m_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred_masks.view(bs, p_ch, -1) > 0.5).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target_m_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_masks.view(bs, gt_ch, -1).permute(0, 2, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tp / (tp + fp + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tp / (tot_target + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tp / (tot_target + fp + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "tot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eff_gt_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ele in self.eval_classes for ele in target_clsIds.flatten()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sum_86": {
                "variable": {
                    "value": "tot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/instance_loss.py": {
        "torch": {
            "conv2d_302": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.ReplicationPad2d([pad_wd, pad_wd, pad_ht, pad_ht])(tensor)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_pairwise_conv_kernel(kernel_size, kernel_cen, dia_stride=kernel_stride, diff_kernel=do_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_319": {
                "variable": {
                    "value": "pi_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pi_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_27": {
                "input": {
                    "value": "margin - pi_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_149": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_152": {
                "variable": {
                    "value": "obj_wght",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pi_pairs / (smpl_size + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "eff_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "eff_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(eff_idx, axis=0).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "eff_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "smpl_wght",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "smpl_wght",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(smpl_wght, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "input": {
                    "value": "pi_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi_pred",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "(_, target_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[targets_0, targets_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(_, target_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_201": {
                "variable": {
                    "value": "pi_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(smpl_pred - smpl_pred.permute(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "variable": {
                    "value": "pred_numi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smpl_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_1D[b][smpl_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "smpl_pred.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "pred_demi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_tmp[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "pred_tmp[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "target_numi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smpl_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_1D[b][smpl_idx].float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "smpl_target.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_211": {
                "variable": {
                    "value": "target_demi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_tmp[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_tmp[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_229": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "less_than_theta * y_pred ** 2 * less_grad_factor + (1 - less_than_theta) * (y_pred - theta + less_loss_bias)",
                            "BinOp"
                        ],
                        [
                            "loss_pi_1 * pi_target * pos_wght + loss_pi_0 * (1.0 - pi_target)",
                            "BinOp"
                        ],
                        [
                            "-(pi_target * torch.log(1.0 - pi_sims) * pos_wght + (1.0 - pi_target) * torch.log(pi_sims))",
                            "UnaryOp"
                        ],
                        [
                            "loss_0 * (1.0 - isFG) + loss_1 * isFG",
                            "BinOp"
                        ],
                        [
                            "adjust_smooth_l1_loss(torch.abs(targets_0 - preds_0))",
                            "Call"
                        ],
                        [
                            "loss.sum(axis=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.CE_loss(torch.cat((preds_0, preds_1), axis=1), target_id)",
                            "Call"
                        ],
                        [
                            "loss[:, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(loss, weights).sum() / (weights.sum() + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.mul(loss, pi_obj_wght)",
                            "Call"
                        ],
                        [
                            "(loss * flag).sum() / (flag.sum() + 1.0)",
                            "BinOp"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(loss, pi_weight), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pi_obj_wght",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smpl_weight + smpl_weight.permute(1, 0)",
                            "BinOp"
                        ],
                        [
                            "smpl_wght + smpl_wght.permute(1, 0)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_301": {
                "padding": {
                    "value": "[pad_wd, pad_wd, pad_ht, pad_ht]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_319": {
                "input": {
                    "value": "pi_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.abs(smpl_pred - smpl_pred.permute(1, 0)), max=5.0)",
                            "Call"
                        ],
                        [
                            "1 - pred_numi / pred_demi",
                            "BinOp"
                        ],
                        [
                            "self.compute_pairwise_conv(preds, self.pi_diff_ke)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.abs(pi_pred), 1e-08, 5.0)",
                            "Call"
                        ],
                        [
                            "pi_pred[:, idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_345": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(loss, pi_weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "pi_sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * (margin - torch.sigmoid(pi_diff))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_99": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_100": {
                "input": {
                    "value": "self.margin - preds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_104": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "less_than_theta * y_pred ** 2 * less_grad_factor + (1 - less_than_theta) * (y_pred - theta + less_loss_bias)",
                            "BinOp"
                        ],
                        [
                            "loss_pi_1 * pi_target * pos_wght + loss_pi_0 * (1.0 - pi_target)",
                            "BinOp"
                        ],
                        [
                            "-(pi_target * torch.log(1.0 - pi_sims) * pos_wght + (1.0 - pi_target) * torch.log(pi_sims))",
                            "UnaryOp"
                        ],
                        [
                            "loss_0 * (1.0 - isFG) + loss_1 * isFG",
                            "BinOp"
                        ],
                        [
                            "adjust_smooth_l1_loss(torch.abs(targets_0 - preds_0))",
                            "Call"
                        ],
                        [
                            "loss.sum(axis=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.CE_loss(torch.cat((preds_0, preds_1), axis=1), target_id)",
                            "Call"
                        ],
                        [
                            "loss[:, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(loss, weights).sum() / (weights.sum() + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.mul(loss, pi_obj_wght)",
                            "Call"
                        ],
                        [
                            "(loss * flag).sum() / (flag.sum() + 1.0)",
                            "BinOp"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(loss, pi_weight), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_239": {
                "tensors": {
                    "value": "all_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_240": {
                "tensors": {
                    "value": "eval_pi0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pi_pred * (pi_target == 0).float()).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_241": {
                "tensors": {
                    "value": "eval_pi1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pi_pred * (pi_target == 1).float()).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_332": {
                "input": {
                    "value": "torch.ones(bs * ht * wd, dtype=torch.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_350": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "less_than_theta * y_pred ** 2 * less_grad_factor + (1 - less_than_theta) * (y_pred - theta + less_loss_bias)",
                            "BinOp"
                        ],
                        [
                            "loss_pi_1 * pi_target * pos_wght + loss_pi_0 * (1.0 - pi_target)",
                            "BinOp"
                        ],
                        [
                            "-(pi_target * torch.log(1.0 - pi_sims) * pos_wght + (1.0 - pi_target) * torch.log(pi_sims))",
                            "UnaryOp"
                        ],
                        [
                            "loss_0 * (1.0 - isFG) + loss_1 * isFG",
                            "BinOp"
                        ],
                        [
                            "adjust_smooth_l1_loss(torch.abs(targets_0 - preds_0))",
                            "Call"
                        ],
                        [
                            "loss.sum(axis=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.CE_loss(torch.cat((preds_0, preds_1), axis=1), target_id)",
                            "Call"
                        ],
                        [
                            "loss[:, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(loss, weights).sum() / (weights.sum() + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.mul(loss, pi_obj_wght)",
                            "Call"
                        ],
                        [
                            "(loss * flag).sum() / (flag.sum() + 1.0)",
                            "BinOp"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(loss, pi_weight), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_45": {
                "input": {
                    "value": "1.0 - pi_sims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_83": {
                "input": {
                    "value": "targets_0 - preds_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "(preds_0, preds_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "cur_sel.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_201": {
                "input": {
                    "value": "smpl_pred - smpl_pred.permute(1, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_332": {
                "*size": {
                    "value": "bs * ht * wd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_345": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "less_than_theta * y_pred ** 2 * less_grad_factor + (1 - less_than_theta) * (y_pred - theta + less_loss_bias)",
                            "BinOp"
                        ],
                        [
                            "loss_pi_1 * pi_target * pos_wght + loss_pi_0 * (1.0 - pi_target)",
                            "BinOp"
                        ],
                        [
                            "-(pi_target * torch.log(1.0 - pi_sims) * pos_wght + (1.0 - pi_target) * torch.log(pi_sims))",
                            "UnaryOp"
                        ],
                        [
                            "loss_0 * (1.0 - isFG) + loss_1 * isFG",
                            "BinOp"
                        ],
                        [
                            "adjust_smooth_l1_loss(torch.abs(targets_0 - preds_0))",
                            "Call"
                        ],
                        [
                            "loss.sum(axis=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.CE_loss(torch.cat((preds_0, preds_1), axis=1), target_id)",
                            "Call"
                        ],
                        [
                            "loss[:, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(loss, weights).sum() / (weights.sum() + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.mul(loss, pi_obj_wght)",
                            "Call"
                        ],
                        [
                            "(loss * flag).sum() / (flag.sum() + 1.0)",
                            "BinOp"
                        ],
                        [
                            "pi_l1_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "pi_exp_loss(pi_pred, pi_target, self.margin, self.pos_wght)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(loss, pi_weight), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pi_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_pairwise_conv(weights, self.pi_sum_ke)",
                            "Call"
                        ],
                        [
                            "pi_weight[:, idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_323": {
                "input": {
                    "value": "pi_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_numi / target_demi < 0.5).float()",
                            "Call"
                        ],
                        [
                            "self.compute_pairwise_conv(targets, self.pi_diff_ke)",
                            "Call"
                        ],
                        [
                            "(torch.abs(pi_target) > 0.5).float()",
                            "Call"
                        ],
                        [
                            "pi_target[:, idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "layers/modules/loss_main.py": {
        "torch": {
            "Softmax2d_29": {
                "variable": {
                    "value": "self.softmax2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "preds_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_mask, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "preds_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_cls, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "targets.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_161": {
                "variable": {
                    "value": "targets_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[ht, wd]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "ret[preds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + plain.cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, fht, fwd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "tmp[:, :, y0:y1 + 1, x0:x1 + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.Sigmoid()(loc_mask_logits[k:k + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[nht, nwd]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "preds_mask[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_mask[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "preds_cls[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_cls[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_200": {
                "variable": {
                    "value": "preds_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + plain.cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "comp_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_cnt - obj_cnts[k], fht, fwd]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "comp_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_cnt - obj_cnts[k], loc_cls_logits.size(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "preds_rfn['obj_bboxes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/refine_loss.py": {
        "torch": {
            "stack_137": {
                "variable": {
                    "value": "target_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target_cls)",
                            "Call"
                        ],
                        [
                            "target_cls * (rfn_iou > self.iou_l_thr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_138": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_139": {
                "variable": {
                    "value": "target_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target_iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_140": {
                "variable": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(obj_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_141": {
                "variable": {
                    "value": "ori_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(ori_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_180": {
                "variable": {
                    "value": "iou_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds['iou_scores'] - gts['iou']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "preds_all_labelI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_all_labelI",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[preds['labelI'][0][k].max(axis=0)[1] for k in range(bs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(preds_all_labelI, axis=0).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "target_all_labelI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_all_labelI",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[target_onehot[k].max(axis=0)[1] for k in range(bs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(target_all_labelI, axis=0).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[pos_weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_align(input.float(), bboxes.float(), spatial_scale=self.scale, output_size=self.out_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "wght",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_126": {
                "input": {
                    "value": "labelImgs[bk][labelVal, y0:y1, x0:x1][None, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "self.roi_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "self.roi_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "self.roi_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_201": {
                "tensors": {
                    "value": "preds['obj_bboxes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/regularize_loss.py": {
        "torch": {
            "stack_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.abs(preds - torch.round(preds)) * effI).sum() / (effI.sum() + 1.0)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_22": {
                "input": {
                    "value": "preds[preds > 0] - torch.round(preds[preds > 0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "loss_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[:, k:k + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.kernel_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "loss_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[:, k:k + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.kernel_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "loss_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(loss_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clipVal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "loss_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(loss_v)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clipVal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_59": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_h ** 2 + loss_v ** 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_55": {
                "input": {
                    "value": "loss_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(preds[:, k:k + 1, :, :], self.kernel_h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.abs(loss_h), max=self.clipVal)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_56": {
                "input": {
                    "value": "loss_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(preds[:, k:k + 1, :, :], self.kernel_v)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.abs(loss_v), max=self.clipVal)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_21": {
                "input": {
                    "value": "preds - torch.round(preds)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_22": {
                "input": {
                    "value": "preds[preds > 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_21": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "refineNet.py": {
        "torch": {
            "LeakyReLU_36": {
                "variable": {
                    "value": "relu_func",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "variable": {
                    "value": "relu_func",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hiddens[0], kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.cls_iou_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "relu_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.cls_linear_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.iou_linear_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "relu_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.mask_fcn_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "backbone_feas + [mask_feas]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "abs_177": {
                "variable": {
                    "value": "mask_feas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_feas - rois[:, -1][:, None, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_178": {
                "variable": {
                    "value": "mask_feas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pi_margin - mask_feas",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "one_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, 256, kernel_size=3, padding=(1, 1), padding_mode='replicate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(fea_layers) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "hiddens[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "cls_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_size[0] // 2 * (roi_size[1] // 2) * hiddens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "hiddens[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_122": {
                "size": {
                    "value": "(2 * roi_size[0], 2 * roi_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_196": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fea_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SGD_254": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_grp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': net.backbone.parameters(), 'lr': args.lr * option['bkb_lr_alpha']}, {'params': net.fpn.parameters(), 'lr': args.lr * option['fpn_lr_alpha']}, {'params': net.proto_net.parameters(), 'lr': args.lr * option['proto_net_lr_alpha']}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_295": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataSet(image_path=cfg.dataset.train_images, mask_out_ch=cfg.gt_inst_ch, info_file=cfg.dataset.train_info, option=cfg.dataset, transform=SSDAugmentation(cfg, MEANS), running_mode='train')",
                            "Call"
                        ],
                        [
                            "DataSet(image_path=cfg.dataset.valid_images, mask_out_ch=cfg.gt_inst_ch, info_file=cfg.dataset.valid_info, option=cfg.dataset, transform=SSDAugmentation(cfg, MEANS), running_mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_564": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "out[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[k].to(output_device) for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_499": {
                "variable": {
                    "value": "split_images[device_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images[cur_idx:cur_idx + alloc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_501": {
                "variable": {
                    "value": "split_masks[device_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks[cur_idx:cur_idx + alloc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_572": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_514": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_566": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_570": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_374": {
                "input": {
                    "value": "all_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([losses[k] for k in det_loss_keys])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/augmentations.py": {
        "torch": {
            "interpolate_649": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "(img - self.mean) / self.std",
                            "BinOp"
                        ],
                        [
                            "img[:, :, self.channel_permutation]",
                            "Subscript"
                        ],
                        [
                            "img - self.mean",
                            "BinOp"
                        ],
                        [
                            "img / 255",
                            "BinOp"
                        ],
                        [
                            "img.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, img_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(img - self.mean) / self.std",
                            "BinOp"
                        ],
                        [
                            "img - self.mean",
                            "BinOp"
                        ],
                        [
                            "img[:, (2, 1, 0), :, :].contiguous()",
                            "Call"
                        ],
                        [
                            "img / 255",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Resize.calc_size_preserve_ar(w, h, self.max_size)",
                            "Call"
                        ],
                        [
                            "(img_size[1], img_size[0])",
                            "Tuple"
                        ],
                        [
                            "(self.max_size, self.max_size)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "ndarray": {
                    "value": "cvimage.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_277": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/functions.py": {
        "torch": {
            "Sequential_213": {
                "*args": {
                    "value": "*net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels if num_channels is not None else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_cfg[0]",
                            "Subscript"
                        ],
                        [
                            "sum([net[1] for net in nets])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_cfg[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_206": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_196": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels if num_channels is not None else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_cfg[0]",
                            "Subscript"
                        ],
                        [
                            "sum([net[1] for net in nets])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "-kernel_size",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}