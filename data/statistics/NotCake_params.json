{
    "CakeDetect-YOLO/backend.py": {
        "tensorflow": {
            "space_to_depth_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(32, (3, 3), strides=(1, 1), padding='same', name='conv_1', use_bias=False)(input_image)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_1')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(64, (3, 3), strides=(1, 1), padding='same', name='conv_2', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_2')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(128, (3, 3), strides=(1, 1), padding='same', name='conv_3', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_3')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(64, (1, 1), strides=(1, 1), padding='same', name='conv_4', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_4')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(128, (3, 3), strides=(1, 1), padding='same', name='conv_5', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_5')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(256, (3, 3), strides=(1, 1), padding='same', name='conv_6', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_6')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(128, (1, 1), strides=(1, 1), padding='same', name='conv_7', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_7')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(256, (3, 3), strides=(1, 1), padding='same', name='conv_8', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_8')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(512, (3, 3), strides=(1, 1), padding='same', name='conv_9', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_9')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(256, (1, 1), strides=(1, 1), padding='same', name='conv_10', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_10')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(512, (3, 3), strides=(1, 1), padding='same', name='conv_11', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_11')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(256, (1, 1), strides=(1, 1), padding='same', name='conv_12', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_12')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(512, (3, 3), strides=(1, 1), padding='same', name='conv_13', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_13')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_14', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_14')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(512, (1, 1), strides=(1, 1), padding='same', name='conv_15', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_15')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_16', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_16')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(512, (1, 1), strides=(1, 1), padding='same', name='conv_17', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_17')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_18', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_18')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_19', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_19')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_20', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_20')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "concatenate([skip_connection, x])",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_22', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_22')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(16, (3, 3), strides=(1, 1), padding='same', name='conv_1', use_bias=False)(input_image)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_1')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(32 * 2 ** i, (3, 3), strides=(1, 1), padding='same', name='conv_' + str(i + 2), use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_' + str(i + 2))(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(512, (3, 3), strides=(1, 1), padding='same', name='conv_6', use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_6')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(2, 2), strides=(1, 1), padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(1024, (3, 3), strides=(1, 1), padding='same', name='conv_' + str(i + 7), use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='norm_' + str(i + 7))(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.1)(x)",
                            "Call"
                        ],
                        [
                            "mobilenet(input_image)",
                            "Call"
                        ],
                        [
                            "Conv2D(64, (3, 3), strides=(2, 2), padding='valid', name='conv1')(input_image)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name='relu_conv1')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name='pool1')(x)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=2, squeeze=16, expand=64)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=3, squeeze=16, expand=64)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name='pool3')(x)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=4, squeeze=32, expand=128)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=5, squeeze=32, expand=128)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name='pool5')(x)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=6, squeeze=48, expand=192)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=7, squeeze=48, expand=192)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=8, squeeze=64, expand=256)",
                            "Call"
                        ],
                        [
                            "fire_module(x, fire_id=9, squeeze=64, expand=256)",
                            "Call"
                        ],
                        [
                            "Conv2D(squeeze, (1, 1), padding='valid', name=s_id + sq1x1)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=s_id + relu + sq1x1)(x)",
                            "Call"
                        ],
                        [
                            "concatenate([left, right], axis=3, name=s_id + 'concat')",
                            "Call"
                        ],
                        [
                            "inception(input_image)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CakeDetect-YOLO/frontend.py": {
        "tensorflow": {
            "cast_27": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_100": {
                "variable": {
                    "value": "cell_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.tile(tf.range(self.grid_w), [self.grid_h]), (1, self.grid_h, self.grid_w, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "variable": {
                    "value": "cell_y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(tf.tile(tf.range(self.grid_w), [self.grid_h]), (1, self.grid_h, self.grid_w, 1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_103": {
                "variable": {
                    "value": "cell_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([cell_x, cell_y], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size, 1, 1, self.nb_box, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "coord_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "mask_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y_true)[:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "conf_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "mask_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y_true)[:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "mask_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y_true)[:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "total_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "pred_box_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_145": {
                "variable": {
                    "value": "intersect_mins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_box_xy - pred_wh_half",
                            "BinOp"
                        ],
                        [
                            "pred_xy - pred_wh_half",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "true_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_box_xy - true_wh_half",
                            "BinOp"
                        ],
                        [
                            "true_xy - true_wh_half",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_146": {
                "variable": {
                    "value": "intersect_maxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_maxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_box_xy + pred_wh_half",
                            "BinOp"
                        ],
                        [
                            "pred_xy + pred_wh_half",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "true_maxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_box_xy + true_wh_half",
                            "BinOp"
                        ],
                        [
                            "true_xy + true_wh_half",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_147": {
                "variable": {
                    "value": "intersect_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intersect_maxes - intersect_mins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truediv_154": {
                "variable": {
                    "value": "iou_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intersect_areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersect_wh[..., 0] * intersect_wh[..., 1]",
                            "BinOp"
                        ],
                        [
                            "intersect_wh[..., 0] * intersect_wh[..., 1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "union_areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_areas + true_areas - intersect_areas",
                            "BinOp"
                        ],
                        [
                            "pred_areas + true_areas - intersect_areas",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_159": {
                "variable": {
                    "value": "true_box_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "variable": {
                    "value": "pred_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_box_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(y_pred[..., :2]) + cell_grid",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "variable": {
                    "value": "pred_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_box_wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(y_pred[..., 2:4]) * np.reshape(self.anchors, [1, 1, 1, self.nb_box, 2])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_183": {
                "variable": {
                    "value": "intersect_mins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_box_xy - pred_wh_half",
                            "BinOp"
                        ],
                        [
                            "pred_xy - pred_wh_half",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "true_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_box_xy - true_wh_half",
                            "BinOp"
                        ],
                        [
                            "true_xy - true_wh_half",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_184": {
                "variable": {
                    "value": "intersect_maxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_maxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_box_xy + pred_wh_half",
                            "BinOp"
                        ],
                        [
                            "pred_xy + pred_wh_half",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "true_maxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_box_xy + true_wh_half",
                            "BinOp"
                        ],
                        [
                            "true_xy + true_wh_half",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_185": {
                "variable": {
                    "value": "intersect_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intersect_maxes - intersect_mins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truediv_192": {
                "variable": {
                    "value": "iou_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intersect_areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersect_wh[..., 0] * intersect_wh[..., 1]",
                            "BinOp"
                        ],
                        [
                            "intersect_wh[..., 0] * intersect_wh[..., 1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "union_areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_areas + true_areas - intersect_areas",
                            "BinOp"
                        ],
                        [
                            "pred_areas + true_areas - intersect_areas",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_194": {
                "variable": {
                    "value": "best_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iou_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truediv(intersect_areas, union_areas)",
                            "Call"
                        ],
                        [
                            "tf.truediv(intersect_areas, union_areas)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_206": {
                "variable": {
                    "value": "no_boxes_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coord_mask < self.coord_scale / 2.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "assign_add_207": {
                "variable": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(seen, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_209": {
                "variable": {
                    "value": "(true_box_xy, true_box_wh, coord_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(seen, self.warmup_batches + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : [true_box_xy + (0.5 + cell_grid) * no_boxes_mask, true_box_wh + tf.ones_like(true_box_wh) * np.reshape(self.anchors, [1, 1, 1, self.nb_box, 2]) * no_boxes_mask, tf.ones_like(coord_mask)]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : [true_box_xy, true_box_wh, coord_mask]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_222": {
                "variable": {
                    "value": "nb_coord_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(coord_mask > 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "nb_conf_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(conf_mask > 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "variable": {
                    "value": "nb_class_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(class_mask > 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_229": {
                "variable": {
                    "value": "loss_class",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "true_box_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y_true[..., 5:], -1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred_box_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., 5:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cond_232": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(seen, self.warmup_batches + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : loss_xy + loss_wh + loss_conf + loss_class + 10",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : loss_xy + loss_wh + loss_conf + loss_class",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "nb_true_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "variable": {
                    "value": "nb_pred_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(true_box_conf > 0.5) * tf.to_float(pred_box_conf > 0.3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_add_241": {
                "variable": {
                    "value": "total_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "total_recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(total_recall, current_recall)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "current_recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_pred_box / (nb_true_box + 1e-06)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Print_243": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss_xy]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Loss XY \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_244": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Loss WH \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_245": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss_conf]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Loss Conf \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_246": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss_class]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Loss Class \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_247": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total Loss \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_248": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[current_recall]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Current Recall \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_249": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : loss_xy + loss_wh + loss_conf + loss_class + 10, lambda : loss_xy + loss_wh + loss_conf + loss_class)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_xy], message='Loss XY \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_wh], message='Loss WH \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_conf], message='Loss Conf \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss_class], message='Loss Class \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], message='Total Loss \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [current_recall], message='Current Recall \\t', summarize=1000)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [total_recall / seen], message='Average Recall \\t', summarize=1000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[total_recall / seen]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Average Recall \\t",
                    "type": "str",
                    "possible_values": []
                },
                "summarize": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "tf.tile(tf.range(self.grid_w), [self.grid_h])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.grid_h, self.grid_w, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_103": {
                "values": {
                    "value": "[cell_x, cell_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "x": {
                    "value": "y_pred[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_119": {
                "x": {
                    "value": "y_pred[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "input": {
                    "value": "y_true[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "less_209": {
                "x": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(seen, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.warmup_batches + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_222": {
                "x": {
                    "value": "coord_mask > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_223": {
                "x": {
                    "value": "conf_mask > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_224": {
                "x": {
                    "value": "class_mask > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "loss_class * class_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_232": {
                "x": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(seen, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.warmup_batches + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_100": {
                "input": {
                    "value": "tf.range(self.grid_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.grid_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_201": {
                "params": {
                    "value": "self.class_wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_box_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y_true[..., 5:], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "tf.square(true_box_xy - pred_box_xy) * coord_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_227": {
                "input_tensor": {
                    "value": "tf.square(true_box_wh - pred_box_wh) * coord_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "tf.square(true_box_conf - pred_box_conf) * conf_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_195": {
                "x": {
                    "value": "best_ious < 0.6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_214": {
                "input": {
                    "value": "coord_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(mask_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y_true[..., 4], axis=-1) * self.coord_scale",
                            "BinOp"
                        ],
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : [true_box_xy + (0.5 + cell_grid) * no_boxes_mask, true_box_wh + tf.ones_like(true_box_wh) * np.reshape(self.anchors, [1, 1, 1, self.nb_box, 2]) * no_boxes_mask, tf.ones_like(coord_mask)], lambda : [true_box_xy, true_box_wh, coord_mask])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_238": {
                "x": {
                    "value": "pred_box_conf > 0.3",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "square_226": {
                "x": {
                    "value": "true_box_xy - pred_box_xy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_227": {
                "x": {
                    "value": "true_box_wh - pred_box_wh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_228": {
                "x": {
                    "value": "true_box_conf - pred_box_conf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_211": {
                "input": {
                    "value": "true_box_wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., 2:4]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.less(seen, self.warmup_batches + 1), lambda : [true_box_xy + (0.5 + cell_grid) * no_boxes_mask, true_box_wh + tf.ones_like(true_box_wh) * np.reshape(self.anchors, [1, 1, 1, self.nb_box, 2]) * no_boxes_mask, tf.ones_like(coord_mask)], lambda : [true_box_xy, true_box_wh, coord_mask])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CakeDetect-YOLO/utils.py": {
        "tensorflow": {}
    },
    "NotCakeFlask/app.py": {
        "tensorflow": {}
    },
    "NotCakeFlask/model.py": {
        "tensorflow": {}
    }
}