{
    "builders/builders.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets[data_config.dataset](**train_set_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets[data_config.dataset](**val_set_config)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/dataset_utils.py": {
        "torch": {
            "eye_42": {
                "variable": {
                    "value": "rand_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "rand_rot[:3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_rand_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(angle), 0, np.sin(angle)], [0, 1, 0], [-np.sin(angle), 0, np.cos(angle)]])",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_26": {
                "variable": {
                    "value": "normalized_Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rt.view(-1, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "origins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rt[:, origin_frame:origin_frame + 1].expand_as(Rt).reshape(-1, 4, 4).inverse()",
                            "Call"
                        ],
                        [
                            "camera_pose[:, origin_frame:origin_frame + 1, :3, 3]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/replica.py": {
        "torch": {
            "stack_68": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt, dim=0)",
                            "Call"
                        ],
                        [
                            "Rt.view(-1, self.seq_len, self.step, 4, 4).permute(0, 2, 1, 3, 4).reshape(-1, self.seq_len, 4, 4)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[bool_mask].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt)",
                            "Call"
                        ],
                        [
                            "Rt.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[0]",
                            "Subscript"
                        ],
                        [
                            "Rt[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "random_rotation_augment(Rt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(rgb)",
                            "Call"
                        ],
                        [
                            "rgb[selected_indices].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_139": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(depth).float()",
                            "Call"
                        ],
                        [
                            "depth[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "depth * 1000",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_140": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(K)",
                            "Call"
                        ],
                        [
                            "K[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "K[:, :3, :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_141": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt, dim=0)",
                            "Call"
                        ],
                        [
                            "Rt.view(-1, self.seq_len, self.step, 4, 4).permute(0, 2, 1, 3, 4).reshape(-1, self.seq_len, 4, 4)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[bool_mask].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt)",
                            "Call"
                        ],
                        [
                            "Rt.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[0]",
                            "Subscript"
                        ],
                        [
                            "Rt[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "random_rotation_augment(Rt)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "episode_Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "episode_Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode_Rt, dim=0)",
                            "Call"
                        ],
                        [
                            "episode_Rt[:episode_Rt.shape[0] - trim]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_78": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(Rt.shape[:2])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_148": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(Rt.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "np.array(_depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_136": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "Rt.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_79": {
                "n": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "Rt.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/vizdoom.py": {
        "torch": {
            "stack_68": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt, dim=0)",
                            "Call"
                        ],
                        [
                            "Rt.view(-1, self.seq_len, self.step, 4, 4).permute(0, 2, 1, 3, 4).reshape(-1, self.seq_len, 4, 4)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[bool_mask].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt)",
                            "Call"
                        ],
                        [
                            "Rt.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[0]",
                            "Subscript"
                        ],
                        [
                            "Rt[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "random_rotation_augment(Rt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(rgb)",
                            "Call"
                        ],
                        [
                            "rgb[selected_indices].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_135": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(depth).float()",
                            "Call"
                        ],
                        [
                            "depth[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "depth / 14 * 100",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_136": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(K)",
                            "Call"
                        ],
                        [
                            "K[selected_indices].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_137": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt, dim=0)",
                            "Call"
                        ],
                        [
                            "Rt.view(-1, self.seq_len, self.step, 4, 4).permute(0, 2, 1, 3, 4).reshape(-1, self.seq_len, 4, 4)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[bool_mask].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(Rt)",
                            "Call"
                        ],
                        [
                            "Rt.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "normalize_trajectory(Rt, center=self.center, normalize_rotation=self.normalize_rotation)",
                            "Call"
                        ],
                        [
                            "Rt[0]",
                            "Subscript"
                        ],
                        [
                            "Rt[selected_indices].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "random_rotation_augment(Rt)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "episode_Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "episode_Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode_Rt, dim=0)",
                            "Call"
                        ],
                        [
                            "episode_Rt[:episode_Rt.shape[0] - trim]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_78": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(Rt.shape[:2])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_144": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(Rt.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "np.array(_depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "Rt.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_79": {
                "n": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "Rt.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/backprojection_utils.py": {
        "torch": {
            "tensor_71": {
                "variable": {
                    "value": "world_center",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "world_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(world_center, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "world_center * voxels_per_unit_dimension",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "volume",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_90": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "repeat_interleave_91": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(B, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(batch_idx, repeats=H * W * samples_per_ray, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "H * W * samples_per_ray",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(features, size=max(voxel_dim), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "features.view(-1, C).unsqueeze(1).expand(-1, samples_per_ray, -1).reshape(-1, C)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "max(voxel_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_59": {
                "variable": {
                    "value": "t_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "samples_per_ray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(voxel_dim)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ro.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ro.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "batch_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_idx.unsqueeze(1), pts_aligned.view(-1, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(depth, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "voxel_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "models/diff_augment.py": {
        "torch": {
            "randint_61": {
                "variable": {
                    "value": "translation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_62": {
                "variable": {
                    "value": "translation_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_y",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_63": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(x.size(2), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_68": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + translation_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + translation_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_70": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collapse_trajectory_dim(x)",
                            "Call"
                        ],
                        [
                            "x * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "expand_trajectory_dim(x, T)",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 1, 1, 1, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_77": {
                "variable": {
                    "value": "offset_x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_78": {
                "variable": {
                    "value": "offset_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_79": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_64": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_66": {
                "start": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_80": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_81": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_82": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/discriminator.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_25": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_26": {
                "variable": {
                    "value": "inv_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(len(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_33": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Flatten_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/generator.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.mapping_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mapping_network",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ModulationLinear(in_channel=self.from_coords.out_dim, out_channel=channels, z_dim=z_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, viewdirs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_302": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EqualLinear(in_channel=self.from_coords.out_dim + z_dim, out_channel=channels, activate=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, viewdirs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_395": {
                "variable": {
                    "value": "self.render_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_420": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.sigmoid(rgb)",
                            "Call"
                        ],
                        [
                            "rgb.view(B, -1, samples_per_ray, self.out_dim) if rgb is not None else None",
                            "IfExp"
                        ],
                        [
                            "torch.cat([rgb_coarse, rgb_fine], dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.gather(rgb, -2, rgb_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_520": {
                "variable": {
                    "value": "sampled_local_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz[:, :, :, [0, 2]]",
                            "Subscript"
                        ],
                        [
                            "xyz.view(B, H, H, samples_per_ray, 3)",
                            "Call"
                        ],
                        [
                            "xyz / (self.coordinate_scale / 2)",
                            "BinOp"
                        ],
                        [
                            "self.get_local_coordinates(global_coords=xyz, local_grid_length=self.global_feat_res, preserve_y=preserve_y)",
                            "Call"
                        ],
                        [
                            "xyz.reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "xyz.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "ro[..., None, :] + rd[..., None, :] * z_vals_fine[..., :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_499": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[local_coords[..., 0:1], global_coords[..., 1:2], local_coords[..., 2:3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_501": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[local_coords[..., 0:1], local_coords[..., 1:2], local_coords[..., 2:3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_638": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_coarse, rgb_fine]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_639": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alpha_coarse, alpha_fine]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_640": {
                "variable": {
                    "value": "z_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_vals, z_vals_fine]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_642": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_vals.view(B, n_rays, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_vals, z_vals_fine], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(z_vals, -1, indices)",
                            "Call"
                        ],
                        [
                            "z_vals",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_643": {
                "variable": {
                    "value": "z_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_vals.view(B, n_rays, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_vals, z_vals_fine], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(z_vals, -1, indices)",
                            "Call"
                        ],
                        [
                            "z_vals",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_645": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.sigmoid(rgb)",
                            "Call"
                        ],
                        [
                            "rgb.view(B, -1, samples_per_ray, self.out_dim) if rgb is not None else None",
                            "IfExp"
                        ],
                        [
                            "torch.cat([rgb_coarse, rgb_fine], dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.gather(rgb, -2, rgb_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "rgb_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat(indices, 'b n_rays n_samples -> b n_rays n_samples d', d=rgb.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_646": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_alpha(h, z[i + 1])",
                            "Call"
                        ],
                        [
                            "self.fc_alpha(h)",
                            "Call"
                        ],
                        [
                            "alpha.view(B, -1, samples_per_ray)",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_coarse, alpha_fine], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(alpha, -1, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_567": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/gsn.py": {
        "torch": {
            "cat_117": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(rgb, dim=1)",
                            "Call"
                        ],
                        [
                            "rearrange(rgb, 'b (h w) c -> b c h w', h=nerf_out_res, w=nerf_out_res)",
                            "Call"
                        ],
                        [
                            "texture_net(rgb)",
                            "Call"
                        ],
                        [
                            "rearrange(rgb, '(b t) c h w -> b t c h w', t=T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(depth, dim=1)",
                            "Call"
                        ],
                        [
                            "rearrange(depth, '(b t) (h w) -> b t 1 h w', t=T, h=nerf_out_res, w=nerf_out_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_221": {
                "variable": {
                    "value": "opt_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.decoder.parameters()) + list(self.generator.parameters()) + list(self.texture_net.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_227": {
                "variable": {
                    "value": "opt_disc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.loss.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr * self.ttur_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_149": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['rgb'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x['rgb'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_174": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x['K'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x['K'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "fid",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(fid)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "fid",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_217": {
                "tensor": {
                    "value": "fid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "calculate_fid(real_features, fake_features)",
                            "Call"
                        ],
                        [
                            "torch.tensor([float(fid)], device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0.0], device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_197": {
                "input": {
                    "value": "real_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_zero_cat(self.fid.real_features)",
                            "Call"
                        ],
                        [
                            "dim_zero_cat(real_features_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_202": {
                "input": {
                    "value": "fake_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_zero_cat(self.fid.fake_features)",
                            "Call"
                        ],
                        [
                            "dim_zero_cat(fake_features_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_96": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nerf_out_res ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_97": {
                "variable": {
                    "value": "indices_chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_chunks",
                            "variable"
                        ],
                        [
                            "torch.arange(nerf_out_res ** 2, device=z.device)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "int(nerf_out_res ** 2 / self.patch_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, *res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_interleave_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_249": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_301": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_460": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_489": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.scale",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * gamma",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_574": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_772": {
                "variable": {
                    "value": "self.freqs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "freqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 ** torch.linspace(0.0, frequency_bands - 1, frequency_bands, dtype=torch.float)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_783": {
                "variable": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_190": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_203": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_244": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_296": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_482": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([1]) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_486": {
                "variable": {
                    "value": "input_demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.pow(2).sum([1]) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_597": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_608": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.scale",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * gamma",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_723": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rsqrt_20": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*res",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_187": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_237": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_288": {
                "*size": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_460": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_574": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, out_channel, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_616": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.scale",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * gamma",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_621": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * gamma",
                            "BinOp"
                        ],
                        [
                            "input * input_demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.scale",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * gamma",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_738": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.skip(input)",
                            "Call"
                        ],
                        [
                            "self.upsample(skip)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(skip, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.skip_upsample(skip)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_771": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "frequency_bands - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "frequency_bands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_296": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_582": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "grad_35": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_13": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(1.0 + fake_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_14": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(1.0 - real_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_25": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(fake_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-real_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "d_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-fake_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "disc_in_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_real, depth_real]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "disc_in_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_fake, depth_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_13": {
                "input": {
                    "value": "1.0 + fake_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_14": {
                "input": {
                    "value": "1.0 - real_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_25": {
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_26": {
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "depth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(depth_real, size=depth_fake.shape[-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(depth_real, size=rgb_real.shape[-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "depth_fake.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "variable": {
                    "value": "depth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(depth_real, size=depth_fake.shape[-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(depth_real, size=rgb_real.shape[-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "rgb_real.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_77": {
                "variable": {
                    "value": "depth_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(depth_fake, size=rgb_real.shape[-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "rgb_real.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "grad_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_30": {
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mse_loss_103": {
                "input": {
                    "value": "disc_in_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb_real",
                            "variable"
                        ],
                        [
                            "torch.cat([rgb_real, depth_real], dim=1)",
                            "Call"
                        ],
                        [
                            "DiffAugment(disc_in_real, normalize=True, policy=self.aug_policy)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "recon_real",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils.py": {
        "torch": {
            "interpolate_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collapse_trajectory_dim(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "expand_trajectory_dim(x, T)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.real_Rts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "real_Rts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.real_Rts.clone()",
                            "Call"
                        ],
                        [
                            "camera_pose.inverse()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.real_trajectories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.real_trajectories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_122": {
                "variable": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "displacements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((self.real_trajectories[:, 0] - self.real_trajectories[:, -1]) ** 2, dim=1) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "chunk_124": {
                "variable": {
                    "value": "bin_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argsort(displacements)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_159": {
                "variable": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(local_latents=local_latents, xyz=query_points)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(occupancy)",
                            "Call"
                        ],
                        [
                            "occupancy.view(B, -1, self.seq_len)",
                            "Call"
                        ],
                        [
                            "torch.sum(occupancy, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(occupancy)",
                            "Call"
                        ],
                        [
                            "self.get_occupancy(generator=generator, local_latents=local_latents, trajectories=trajectories)",
                            "Call"
                        ],
                        [
                            "self.get_occupancy(generator=generator, local_latents=local_latents, trajectories=trajectories)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_9": {
                "obj": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_130": {
                "variable": {
                    "value": "permutation_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trajectory_bin.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(local_latents=local_latents, xyz=query_points)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(occupancy)",
                            "Call"
                        ],
                        [
                            "occupancy.view(B, -1, self.seq_len)",
                            "Call"
                        ],
                        [
                            "torch.sum(occupancy, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(occupancy)",
                            "Call"
                        ],
                        [
                            "self.get_occupancy(generator=generator, local_latents=local_latents, trajectories=trajectories)",
                            "Call"
                        ],
                        [
                            "self.get_occupancy(generator=generator, local_latents=local_latents, trajectories=trajectories)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_184": {
                "variable": {
                    "value": "jitter",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_trajectories, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "real_Rts.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_201": {
                "variable": {
                    "value": "subset_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(real_Rts.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_subsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(real_Rts.shape[0], 1000)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmin_205": {
                "variable": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy[:, subset_indices] + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_206": {
                "variable": {
                    "value": "nans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmin(occupancy[:, subset_indices] + 1e-08, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_208": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmin(occupancy[:, subset_indices] + 1e-08, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_208": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "(self.real_trajectories[:, 0] - self.real_trajectories[:, -1]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_156": {
                "variable": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(local_latents=local_latents, xyz=query_points)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(occupancy)",
                            "Call"
                        ],
                        [
                            "occupancy.view(B, -1, self.seq_len)",
                            "Call"
                        ],
                        [
                            "torch.sum(occupancy, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(occupancy)",
                            "Call"
                        ],
                        [
                            "self.get_occupancy(generator=generator, local_latents=local_latents, trajectories=trajectories)",
                            "Call"
                        ],
                        [
                            "self.get_occupancy(generator=generator, local_latents=local_latents, trajectories=trajectories)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_225": {
                "variable": {
                    "value": "Rts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_Rts[subset_indices][selected_indices]",
                            "Subscript"
                        ],
                        [
                            "Rts.to(local_latents.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "real_Rts[selected_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(Rts, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "real_Rts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmin_222": {
                "variable": {
                    "value": "most_empty_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "occupancy[i, selected_bin]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_228": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_Rts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multinomial_229": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(real_Rts.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_latents.shape[0]",
                            "Subscript"
                        ],
                        [
                            "local_latents.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/nerf_utils.py": {
        "torch": {
            "meshgrid_16": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "indexing": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cumprod_35": {
                "variable": {
                    "value": "cumprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "roll_37": {
                "variable": {
                    "value": "cumprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumprod(tensor, dim)",
                            "Call"
                        ],
                        [
                            "torch.roll(cumprod, 1, dim)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "arange_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tform_cam2world.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tform_cam2world.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tform_cam2world.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tform_cam2world.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "directions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(ii - width * 0.5) / fx, (jj - height * 0.5) / fy, -torch.ones_like(ii)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "ray_directions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "directions * tform_cam2world[:, :3, :3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_116": {
                "variable": {
                    "value": "t_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "samples_per_ray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ro.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ro.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "one_e_10",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[10000000000.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ray_directions.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ray_directions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(depth_values[..., 1:] - depth_values[..., :-1], one_e_10.expand(depth_values[..., :1].shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_204": {
                "variable": {
                    "value": "occupancy_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(0.1 + alpha.view(alpha.size(0), -1)) + torch.log(0.1 + 1.0 - alpha.view(alpha.size(0), -1)) - -2.20727",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_218": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights / torch.sum(weights, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(cdf[..., :1]), cdf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "searchsorted_235": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(pdf, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(cdf[..., :1]), cdf], dim=-1)",
                            "Call"
                        ],
                        [
                            "cdf.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0.0, 1.0, steps=num_samples, dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "u.expand(list(cdf.shape[:-1]) + [num_samples])",
                            "Call"
                        ],
                        [
                            "torch.rand(list(cdf.shape[:-1]) + [num_samples], dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "u.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "right": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_236": {
                "variable": {
                    "value": "below",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(inds - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_237": {
                "variable": {
                    "value": "above",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cdf.shape[-1] - 1) * torch.ones_like(inds)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_238": {
                "variable": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(below, above)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_241": {
                "variable": {
                    "value": "cdf_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cdf.unsqueeze(1).expand(matched_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((below, above), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_242": {
                "variable": {
                    "value": "bins_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bins.unsqueeze(1).expand(matched_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((below, above), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_245": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "denom < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(denom)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mids, z_vals[..., -1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_vals[..., :1], mids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_125": {
                "variable": {
                    "value": "t_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_vals.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ro.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ro.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "sigma_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(rgb)",
                            "Call"
                        ],
                        [
                            "rgb * (1 + 2 * rgb_padding) - rgb_padding",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_223": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_226": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(cdf.shape[:-1]) + [num_samples]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_111": {
                "input": {
                    "value": "rd[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_112": {
                "input": {
                    "value": "rd[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_181": {
                "variable": {
                    "value": "sigma_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy + noise + density_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_183": {
                "input": {
                    "value": "-sigma_a * dists",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_200": {
                "input": {
                    "value": "1e-10 * torch.ones_like(depth_map)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * cumprod_exclusive(1.0 - alpha + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "weights + 1e-05",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "input": {
                    "value": "inds - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_245": {
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_108": {
                "variable": {
                    "value": "ro",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ro",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ray_origins.view((B, -1, 3))",
                            "Call"
                        ],
                        [
                            "ro[:, mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.gather(ro, dim=1, index=mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat(mask, 'b n_patch_pixels -> b n_patch_pixels 3')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_109": {
                "variable": {
                    "value": "rd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ray_directions.view((B, -1, 3))",
                            "Call"
                        ],
                        [
                            "rd[:, mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.gather(rd, dim=1, index=mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat(mask, 'b n_patch_pixels -> b n_patch_pixels 3')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_169": {
                "*size": {
                    "value": "occupancy.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "occupancy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "occupancy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_219": {
                "input": {
                    "value": "cdf[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_237": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.searchsorted(cdf, u, right=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_76": {
                "input": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_200": {
                "input": {
                    "value": "depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights * depth_values",
                            "BinOp"
                        ],
                        [
                            "depth_map.sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_205": {
                "input": {
                    "value": "0.1 + 1.0 - alpha.view(alpha.size(0), -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/op/fused_act.py": {
        "torch": {
            "load_7": {
                "variable": {
                    "value": "fused",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['models/op/fused_bias_act.cpp', 'models/op/fused_bias_act_kernel.cu']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_100": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_103": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/op/native_ops.py": {
        "torch": {
            "pad_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_60": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.reshape(-1, in_h, in_w, 1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/op/upfirdn2d.py": {
        "torch": {
            "load_6": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['models/op/upfirdn2d.cpp', 'models/op/upfirdn2d_kernel.cu']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_86": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.half()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/walkthrough_utils.py": {
        "torch": {
            "stack_69": {
                "variable": {
                    "value": "new_Rts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_Rts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_Rts, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "new_Rts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_config.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume_from_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_gsn.py": {
        "torch": {
            "manual_seed_96": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "opt.resume_from_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/callbacks.py": {
        "torch": {
            "cat_141": {
                "variable": {
                    "value": "floorplans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "floorplans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(floorplans, dim=0)",
                            "Call"
                        ],
                        [
                            "floorplans.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "get_floorplans(data, voxel_res=voxel_res, voxel_size=voxel_size, floorplan_res=floorplan_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_137": {
                "variable": {
                    "value": "depth_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(volume > 0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_138": {
                "variable": {
                    "value": "floorplan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backproject(voxel_dim=(floorplan_res, floorplan_res, floorplan_res), voxel_size=voxel_size, world_center=(0, 0, 0), Rt=collapse_trajectory_dim(data['Rt'][i:i + batch_size]), K=collapse_trajectory_dim(data['K'][i:i + batch_size]), features=collapse_trajectory_dim(data['rgb'][i:i + batch_size]), depth=collapse_trajectory_dim(data['depth'][i:i + batch_size]))",
                            "Call"
                        ],
                        [
                            "expand_trajectory_dim(volume, T=T)",
                            "Call"
                        ],
                        [
                            "exclusive_mean(volume, dim=1)",
                            "Call"
                        ],
                        [
                            "volume[:, :, :, :height // 2, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "depth_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax((volume > 0).float(), dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "floorplan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch['K'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "pl_module.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch['K'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/camera_trajectory.py": {
        "torch": {
            "eye_14": {
                "variable": {
                    "value": "Rts",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "Rts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_15": {
                "variable": {
                    "value": "Rts[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack([R_0, R_1])",
                            "Call"
                        ],
                        [
                            "Rs.cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([[np.cos(theta), 0, np.sin(theta)], [0, 1, 0], [-np.sin(theta), 0, np.cos(theta)]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_23": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_0, R_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_64": {
                "variable": {
                    "value": "camera_path",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "camera_path",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "camera_path[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slerp(times).as_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_66": {
                "variable": {
                    "value": "camera_path[:, :3, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_10": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([[np.cos(theta), 0, np.sin(theta)], [0, 1, 0], [-np.sin(theta), 0, np.cos(theta)]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/fid.py": {
        "torch": {
            "trace_193": {
                "variable": {
                    "value": "tr_covmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg.sqrtm((sigma1 + offset).dot(sigma2 + offset))",
                            "Call"
                        ],
                        [
                            "covmean.real",
                            "Attribute"
                        ],
                        [
                            "sqrt_newton_schulz(sigma1.mm(sigma2).unsqueeze(0), 50).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_8": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features).cuda()",
                            "Call"
                        ],
                        [
                            "features.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "features.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_29": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.double()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.view(1, -1)",
                            "Call"
                        ],
                        [
                            "m.t()",
                            "Call"
                        ],
                        [
                            "m - torch.mean(m, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "np.max(np.abs(covmean.imag))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_91": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_92": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_185": {
                "n": {
                    "value": "sigma1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_97": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.mul(A).sum(dim=1).sum(dim=1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_195": {
                "input": {
                    "value": "sigma1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.atleast_2d(sigma1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "sum_32": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x != 0",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "chunk_24": {
                "variable": {
                    "value": "(x1[key], x2[key])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_33": {
                "input": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mask, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}