{
    "lang_id_embeddings.py": {
        "sklearn": {
            "LogisticRegression_86": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learn_lng_projection.py": {
        "sklearn": {
            "LinearRegression_68": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_54": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[get_repr_from_layer(model, sentence_tensor, layer, tokenizer.pad_token_id, mean_pool=mean_pool) for sentence_tensor in batch_generator(text_data_generator(text_file, tokenizer), 64, tokenizer)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learn_lng_projection_embeddings.py": {
        "sklearn": {
            "LinearRegression_65": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lng_confusion_matrix.py": {
        "sklearn": {
            "confusion_matrix_34": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[lng2idx[line.strip()] for line in args.test_data]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[lng2idx[line.strip()] for line in args.predictions]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "qe_by_regression.py": {
        "sklearn": {
            "MLPRegressor_86": {
                "variable": {
                    "value": "regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "early_stopping": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_62": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qe_by_regression_embeddings.py": {
        "sklearn": {
            "MLPRegressor_84": {
                "variable": {
                    "value": "regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "early_stopping": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_num_threads_61": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_retrieval.py": {
        "sklearn": {
            "LinearRegression_157": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "arange_45": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "distances.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_115": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_114": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "lng_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[get_repr_from_layer(model, sentence_tensor, args.layer, tokenizer.pad_token_id, mean_pool=args.mean_pool) for sentence_tensor in batch_generator(text_data_generator(text_file, tokenizer), 64, tokenizer)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "lng_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "proj.predict(lng_repr.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "input": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat1",
                            "Method Argument"
                        ],
                        [
                            "mat1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "mat2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "repr1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "proj.predict(repr1.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "repr1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "proj.predict(repr1.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_retrieval_embeddings.py": {
        "sklearn": {},
        "torch": {
            "set_num_threads_73": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "lng_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(embedded_sentences)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "lng_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "proj.predict(lng_repr.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "visualize_centroids.py": {
        "sklearn": {
            "TSNE_45": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word_alignment.py": {
        "sklearn": {
            "MLPRegressor_104": {
                "variable": {
                    "value": "new_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "early_stopping": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_180": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_179": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "att_entropies_per_lng.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_43": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(tokenized)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_76": {
                "input": {
                    "value": "(matrix * torch.log(matrix + 1e-09)).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_76": {
                "input": {
                    "value": "matrix + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fine_mbert.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': 1e-06}] + [{'params': cls.parameters()} for cls in cls_classifiers + state_classifiers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_num_threads_56": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_95": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "RevGrad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_118": {
                "variable": {
                    "value": "lm_target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "randomized_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(len_mask).uniform_() * len_mask > 0.85",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentences.to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.ones_like(len_mask).long()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "random_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sentences != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_129": {
                "variable": {
                    "value": "alternative_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "random_values < 0.1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(sentences).random_(0, len(tokenizer.vocab))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alternative_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sentences) * tokenizer.mask_token_id",
                            "BinOp"
                        ],
                        [
                            "torch.where(random_values < 0.1, torch.zeros_like(sentences).random_(0, len(tokenizer.vocab)), alternative_input)",
                            "Call"
                        ],
                        [
                            "torch.where(random_values > 0.9, sentences, alternative_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_134": {
                "variable": {
                    "value": "alternative_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "random_values > 0.9",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentences.to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alternative_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sentences) * tokenizer.mask_token_id",
                            "BinOp"
                        ],
                        [
                            "torch.where(random_values < 0.1, torch.zeros_like(sentences).random_(0, len(tokenizer.vocab)), alternative_input)",
                            "Call"
                        ],
                        [
                            "torch.where(random_values > 0.9, sentences, alternative_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_139": {
                "variable": {
                    "value": "bert_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "randomized_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(len_mask).uniform_() * len_mask > 0.85",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "alternative_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sentences) * tokenizer.mask_token_id",
                            "BinOp"
                        ],
                        [
                            "torch.where(random_values < 0.1, torch.zeros_like(sentences).random_(0, len(tokenizer.vocab)), alternative_input)",
                            "Call"
                        ],
                        [
                            "torch.where(random_values > 0.9, sentences, alternative_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentences.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "cls_half_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat[:args.batch_size // 2].mean(0) for mat in cls_repr]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "cls_half_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat[args.batch_size // 2:].mean(0) for mat in cls_repr]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "state_half_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat[:args.batch_size // 2].mean(0) for mat in state_repr]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "state_half_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat[args.batch_size // 2:].mean(0) for mat in state_repr]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentences.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_131": {
                "input": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentences.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.encoder.layer[-1].output.dense.out_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(languages)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "input": {
                    "value": "len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sentences != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_119": {
                "input": {
                    "value": "len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sentences != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "[cls_half_1, state_half_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[cls_half_2, state_half_2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lang_id.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_34": {
                "variable": {
                    "value": "text_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_repr_from_layer(model, d.to(device), layer, tokenizer.pad_token_id, mean_pool=mean_pool) for d in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(languages), text_repr.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_106": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_189": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_bert(args.bert_model, device)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(languages)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model_dim, args.hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_311": {
                "obj": {
                    "value": "trained_models[best_exp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "centroids.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_centroids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_bert(args.bert_model, device)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(languages)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_211": {
                "variable": {
                    "value": "batch_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predicted_lng == lng).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "lng_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lng2idx[lng]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lng_id_char_unigrams.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_104": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(chars)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(LANGUAGES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(len(chars), args.hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "np.array(lngs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predicted_lng == tgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "len(chars)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "args.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(LANGUAGES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qe_by_bertscore.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_56": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qe_by_cosine.py": {
        "torch": {
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "lng_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[get_repr_from_layer(model, sentence_tensor.to(device), layer, tokenizer.pad_token_id, mean_pool=mean_pool).cpu() for sentence_tensor in batch_generator(text_data_generator(filename, tokenizer), 32, tokenizer)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "model.predict(representations.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_num_threads_82": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qe_by_cosine_embeddings.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "src_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(word_embeddings_for_file(args.src, src_embeddings, args.src_lng))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "mt_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(word_embeddings_for_file(args.mt, mt_embeddings, args.mt_lng))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_num_threads_59": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "save_centroids.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_43": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_85": {
                "variable": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.convert_tokens_to_ids(tokenized)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "len(sentences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(ex) for ex in sentences))",
                            "Call"
                        ],
                        [
                            "510",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_35": {
                "tensors": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_29": {
                "tensors": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "word_alignment_embeddings.py": {
        "torch": {
            "set_num_threads_72": {
                "int": {
                    "value": "args.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}