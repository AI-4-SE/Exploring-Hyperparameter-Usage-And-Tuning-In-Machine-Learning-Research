{
    "compressai/datasets/image.py": {
        "torch": {}
    },
    "compressai/datasets/video.py": {
        "torch": {
            "chunk_123": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transform(frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.max_frames",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/entropy_models/entropy_models.py": {
        "torch": {
            "round_171": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ],
                        [
                            "inputs.type_as(means)",
                            "Call"
                        ],
                        [
                            "inputs.type(dtype)",
                            "Call"
                        ],
                        [
                            "cdf.new_empty(indexes.size())",
                            "Call"
                        ],
                        [
                            "self.dequantize(outputs, means, dtype)",
                            "Call"
                        ],
                        [
                            "self.quantize(values, 'noise' if training else 'dequantize', self._get_medians())",
                            "Call"
                        ],
                        [
                            "outputs.reshape(shape)",
                            "Call"
                        ],
                        [
                            "outputs.permute(*inv_perm).contiguous()",
                            "Call"
                        ],
                        [
                            "self.quantize(inputs, 'noise' if training else 'dequantize', means)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(pmf_length), max_length + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pmf.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "variable": {
                    "value": "self.quantiles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(channels, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_398": {
                "variable": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians - self.quantiles[:, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(minima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(minima, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_399": {
                "variable": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians - self.quantiles[:, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(minima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(minima, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_402": {
                "variable": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantiles[:, 0, 2] - medians",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(maxima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(maxima, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_403": {
                "variable": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantiles[:, 0, 2] - medians",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(maxima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(maxima, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_412": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max().item()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ],
                        [
                            "max_length",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_start.device",
                            "Attribute"
                        ],
                        [
                            "self.scale_table.device",
                            "Attribute"
                        ],
                        [
                            "pmf_center.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_421": {
                "variable": {
                    "value": "pmf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(sign * upper) - torch.sigmoid(sign * lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_433": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits - self.target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_433": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_466": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(sign * upper) - torch.sigmoid(sign * lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_526": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_627": {
                "variable": {
                    "value": "pmf_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale_table * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_629": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pmf_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxima + minima + 1",
                            "BinOp"
                        ],
                        [
                            "2 * pmf_center + 1",
                            "BinOp"
                        ],
                        [
                            "pmf_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_632": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(max_length, device=device).int() - pmf_center[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_662": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entropy_coder.decode_with_indexes(s, indexes[i].reshape(-1).int().tolist(), cdf.tolist(), self._cdf_length.reshape(-1).int().tolist(), self._offset.reshape(-1).int().tolist())",
                            "Call"
                        ],
                        [
                            "x.reshape(x.size(0), 1, -1)",
                            "Call"
                        ],
                        [
                            "inputs - means",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_163": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_209": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p[:pmf_length[i]], tail_mass[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "variable": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entropy_coder.decode_with_indexes(s, indexes[i].reshape(-1).int().tolist(), cdf.tolist(), self._cdf_length.reshape(-1).int().tolist(), self._offset.reshape(-1).int().tolist())",
                            "Call"
                        ],
                        [
                            "x.reshape(x.size(0), 1, -1)",
                            "Call"
                        ],
                        [
                            "inputs - means",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "outputs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[i].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_443": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logits_cumulative(self.quantiles, stop_gradient=True)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.matmul(F.softplus(matrix), logits)",
                            "Call"
                        ],
                        [
                            "logits + torch.tanh(factor) * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_602": {},
            "Tensor_374": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_378": {},
            "Tensor_383": {},
            "sign_420": {
                "input": {
                    "value": "lower + upper",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_424": {
                "input": {
                    "value": "-upper[:, 0, -1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_464": {
                "input": {
                    "value": "lower + upper",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erfc_608": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "data": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], filters[i])",
                            "Call"
                        ],
                        [
                            "getattr(self, f'_matrix{i:d}')",
                            "Call"
                        ],
                        [
                            "matrix.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_371": {
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], 1)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'_bias{i:d}')",
                            "Call"
                        ],
                        [
                            "bias.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_421": {
                "input": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_443": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], filters[i])",
                            "Call"
                        ],
                        [
                            "getattr(self, f'_matrix{i:d}')",
                            "Call"
                        ],
                        [
                            "matrix.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_467": {
                "input": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_597": {},
            "arange_633": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max().item()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ],
                        [
                            "max_length",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_start.device",
                            "Attribute"
                        ],
                        [
                            "self.scale_table.device",
                            "Attribute"
                        ],
                        [
                            "pmf_center.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_376": {
                "data": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], 1)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'_factor{i:d}')",
                            "Call"
                        ],
                        [
                            "factor.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_454": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logits_cumulative(self.quantiles, stop_gradient=True)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.matmul(F.softplus(matrix), logits)",
                            "Call"
                        ],
                        [
                            "logits + torch.tanh(factor) * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/layers/gdn.py": {
        "torch": {
            "ones_68": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(in_channels)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam.init(beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_init * torch.eye(in_channels)",
                            "BinOp"
                        ],
                        [
                            "self.gamma_reparam.init(gamma)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_83": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_init * torch.eye(in_channels)",
                            "BinOp"
                        ],
                        [
                            "self.gamma_reparam.init(gamma)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(in_channels)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam.init(beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_init * torch.eye(in_channels)",
                            "BinOp"
                        ],
                        [
                            "self.gamma_reparam.init(gamma)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(in_channels)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam.init(beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_86": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x ** 2, gamma, beta)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "torch.rsqrt(norm)",
                            "Call"
                        ],
                        [
                            "F.conv2d(torch.abs(x), gamma, beta)",
                            "Call"
                        ],
                        [
                            "1.0 / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_88": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x ** 2, gamma, beta)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "torch.rsqrt(norm)",
                            "Call"
                        ],
                        [
                            "F.conv2d(torch.abs(x), gamma, beta)",
                            "Call"
                        ],
                        [
                            "1.0 / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_73": {
                "n": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_114": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/layers/layers.py": {
        "torch": {
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch * r ** 2, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_110": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_144": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualUnit()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualUnit()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch * r ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_89": {
                "upscale_factor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_70": {
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(N, N // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_242": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_b(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_286": {
                "input": {
                    "value": "-ctx.alpha ** ctx.beta * torch.abs(2.0 * input / ctx.max_value - 1) ** ctx.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_217": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_288": {
                "input": {
                    "value": "2.0 * input / ctx.max_value - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/models/google.py": {
        "torch": {
            "Sequential_134": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(M, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_201": {
                "input": {
                    "value": "torch.linspace(math.log(min), math.log(max), levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(M, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_339": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N, kernel_size=5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(M, N, kernel_size=5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M, stride=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_446": {
                "variable": {
                    "value": "self.entropy_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(M * 12 // 3, M * 10 // 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_519": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_603": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(z_hat.size(0), self.M, y_height + 2 * padding, y_width + 2 * padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z_hat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_619": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entropy_bottleneck(y)",
                            "Call"
                        ],
                        [
                            "self.entropy_bottleneck.decompress(strings[0], shape)",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional(y, scales_hat)",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional.decompress(strings[0], indexes, z_hat.dtype)",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional(y, scales_hat, means=means_hat)",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional.decompress(strings[0], indexes, means=means_hat)",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional.quantize(y, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "F.pad(y, (padding, padding, padding, padding))",
                            "Call"
                        ],
                        [
                            "torch.zeros((z_hat.size(0), self.M, y_height + 2 * padding, y_width + 2 * padding), device=z_hat.device)",
                            "Call"
                        ],
                        [
                            "F.pad(y_hat, (-padding, -padding, -padding, -padding))",
                            "Call"
                        ],
                        [
                            "y_hat",
                            "Method Argument"
                        ],
                        [
                            "y_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-padding, -padding, -padding, -padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_201": {
                "start": {
                    "value": "math.log(min)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "math.log(max)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SCALES_LEVELS",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_241": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_253": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_266": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_304": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_341": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_343": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_349": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_351": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_432": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_434": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_440": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_442": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_447": {
                "in_channels": {
                    "value": "M * 12 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_448": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_449": {
                "in_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_450": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_451": {
                "in_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 6 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_477": {
                "tensors": {
                    "value": "(params, ctx_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_498": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_550": {
                "variable": {
                    "value": "ctx_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[:, :, h:h + kernel_size, w:w + kernel_size]",
                            "Subscript"
                        ],
                        [
                            "y_crop[:, :, padding, padding]",
                            "Subscript"
                        ],
                        [
                            "y_hat[:, :, h:h + kernel_size, w:w + kernel_size]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "masked_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_prediction.weight * self.context_prediction.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.context_prediction.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_582": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_641": {
                "variable": {
                    "value": "ctx_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[:, :, h:h + kernel_size, w:w + kernel_size]",
                            "Subscript"
                        ],
                        [
                            "y_crop[:, :, padding, padding]",
                            "Subscript"
                        ],
                        [
                            "y_hat[:, :, h:h + kernel_size, w:w + kernel_size]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.context_prediction.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.context_prediction.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_656": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_656": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_559": {
                "tensors": {
                    "value": "(p, ctx_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_649": {
                "tensors": {
                    "value": "(p, ctx_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/models/utils.py": {
        "torch": {
            "linspace_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-khalf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "khalf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dtype if torch.is_floating_point(x) else torch.float32",
                            "IfExp"
                        ],
                        [
                            "torch.int",
                            "Method Argument"
                        ],
                        [
                            "torch.int",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_161": {
                "variable": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * (x / sigma).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-khalf, khalf, steps=kernel_size, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(x, kernel.expand(x.size(1), 1, kernel.size(0), kernel.size(1)), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-khalf, khalf, steps=kernel_size, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(x, kernel.expand(x.size(1), 1, kernel.size(0), kernel.size(1)), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel.expand(x.size(1), 1, kernel.size(0), kernel.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_194": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_194": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_139": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "stride - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_170": {
                "input": {
                    "value": "kernel[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "affine_grid_195": {
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(2, 3, device=device).unsqueeze(0).expand(N, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_floating_point_178": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-khalf, khalf, steps=kernel_size, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(x, kernel.expand(x.size(1), 1, kernel.size(0), kernel.size(1)), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_84": {
                "*size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[state_dict_key].size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dtype if torch.is_floating_point(x) else torch.float32",
                            "IfExp"
                        ],
                        [
                            "torch.int",
                            "Method Argument"
                        ],
                        [
                            "torch.int",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "round_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-khalf, khalf, steps=kernel_size, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(x, kernel.expand(x.size(1), 1, kernel.size(0), kernel.size(1)), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/models/video/google.py": {
        "torch": {
            "cat_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cur, x_ref)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "y_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_res_hat, y_motion_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cur, x_ref)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "y_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_res_hat, y_motion_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "y_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_res_hat, y_motion_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "volume_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(update_grid, update_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_370": {
                "variable": {
                    "value": "volume_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_372": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "volume_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((update_grid, update_scale), dim=-1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_357": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_347": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qrelu1(self.deconv1(x))",
                            "Call"
                        ],
                        [
                            "self.qrelu2(self.deconv2(x))",
                            "Call"
                        ],
                        [
                            "self.qrelu3(self.deconv3(x))",
                            "Call"
                        ],
                        [
                            "frames[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x_cur, x_ref), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_cur, x_ref), dim=1)",
                            "Call"
                        ],
                        [
                            "gaussian_blur(x, kernel=kernel)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "gaussian_blur(x, kernel=kernel)",
                            "Call"
                        ],
                        [
                            "frames[i]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_355": {
                "tensors": {
                    "value": "volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.unsqueeze(2)]",
                            "List"
                        ],
                        [
                            "volume + [x.unsqueeze(2)]",
                            "BinOp"
                        ],
                        [
                            "self.gaussian_volume(x_ref, self.sigma0, self.num_levels)",
                            "Call"
                        ],
                        [
                            "volume",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_floating_point_340": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qrelu1(self.deconv1(x))",
                            "Call"
                        ],
                        [
                            "self.qrelu2(self.deconv2(x))",
                            "Call"
                        ],
                        [
                            "self.qrelu3(self.deconv3(x))",
                            "Call"
                        ],
                        [
                            "frames[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x_cur, x_ref), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_cur, x_ref), dim=1)",
                            "Call"
                        ],
                        [
                            "gaussian_blur(x, kernel=kernel)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "gaussian_blur(x, kernel=kernel)",
                            "Call"
                        ],
                        [
                            "frames[i]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_351": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.interpolate(interp, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/models/waseda.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlockWithStride(3, N, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlock(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlockWithStride(3, N, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AttentionBlock(N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/ops/bound_ops.py": {
        "torch": {
            "max_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/ops/ops.py": {
        "torch": {
            "round_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/ops/parametrizers.py": {
        "torch": {
            "sqrt_59": {
                "input": {
                    "value": "torch.max(x + self.pedestal, self.pedestal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_59": {
                "input": {
                    "value": "x + self.pedestal",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/transforms/functional.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "ycbcr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, cb, cr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r, g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "(y, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_90": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/bench/codecs.py": {
        "torch": {
            "mean_79": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(a - b) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_820": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_552": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_689": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_882": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_883": {
                "ndarray": {
                    "value": "rec_arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_616": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_617": {
                "ndarray": {
                    "value": "rec_arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_756": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_757": {
                "ndarray": {
                    "value": "rec_arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/eval_model/__main__.py": {
        "torch": {
            "set_num_threads_57": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_82": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_104": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "read_image(f).to(device)",
                            "Call"
                        ],
                        [
                            "x.half()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_left, padding_right, padding_top, padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "out_dec[x_hat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out_dec['x_hat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(-padding_left, -padding_right, -padding_top, -padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_145": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/update_model/__main__.py": {
        "torch": {
            "load_71": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(args.filepath).resolve()",
                            "Call"
                        ],
                        [
                            "output_dir / f'{filename}{ext}'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['network']",
                            "Subscript"
                        ],
                        [
                            "load_state_dict(state_dict)",
                            "Call"
                        ],
                        [
                            "checkpoint['state_dict']",
                            "Subscript"
                        ],
                        [
                            "checkpoint",
                            "variable"
                        ],
                        [
                            "load_checkpoint(filepath)",
                            "Call"
                        ],
                        [
                            "net.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(args.filepath).resolve()",
                            "Call"
                        ],
                        [
                            "output_dir / f'{filename}{ext}'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/utils/video/bench/__main__.py": {
        "torch": {
            "mean_204": {
                "input": {
                    "value": "torch.stack(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "np.true_divide(c, max_value, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_204": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "seq_results.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "results[i].items()",
                            "Call"
                        ],
                        [
                            "r.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_212": {
                "input": {
                    "value": "seq_results.pop('mse-rgb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_217": {
                "input": {
                    "value": "seq_results.pop(f'mse-{component}')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/video/eval_model/__main__.py": {
        "torch": {
            "pad_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, padding, mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(padding_left, padding_right, padding_top, padding_bottom)",
                            "Tuple"
                        ],
                        [
                            "pad(x_cur)",
                            "Call"
                        ],
                        [
                            "pad(x_cur)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_402": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_138": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, padding, mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "tuple((-p for p in padding))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_297": {
                "input": {
                    "value": "torch.stack(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_350": {
                "input": {
                    "value": "torch.stack(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "np.true_divide(c, max_value, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_168": {
                "input": {
                    "value": "mse_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(org_rgb - rec_frame).pow(2).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_297": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['results'].items()",
                            "Call"
                        ],
                        [
                            "seq_results.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "seq_results.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_350": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['results'].items()",
                            "Call"
                        ],
                        [
                            "seq_results.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "seq_results.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_380": {
                "enabled": {
                    "value": "args['half']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sys.argv[1:]",
                            "Subscript"
                        ],
                        [
                            "parser.parse_args(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_156": {
                "input": {
                    "value": "(org - rec).pow(2).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_178": {
                "input": {
                    "value": "lkl[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "compressai/zoo/image.py": {
        "torch": {}
    },
    "compressai/zoo/pretrained.py": {
        "torch": {}
    },
    "compressai/zoo/video.py": {
        "torch": {}
    },
    "examples/codec.py": {
        "torch": {
            "pad_235": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2torch(img)",
                            "Call"
                        ],
                        [
                            "convert_yuv420_rgb(org_seq[0], codec.device, max_val)",
                            "Call"
                        ],
                        [
                            "pad(x, p)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_left, padding_right, padding_top, padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_250": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2torch(img)",
                            "Call"
                        ],
                        [
                            "convert_yuv420_rgb(org_seq[0], codec.device, max_val)",
                            "Call"
                        ],
                        [
                            "pad(x, p)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-padding_left, -padding_right, -padding_top, -padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_612": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "ndarray": {
                    "value": "np.true_divide(c, max_value, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/train.py": {
        "torch": {
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "(params_dict[n] for n in sorted(parameters))",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "(params_dict[n] for n in sorted(aux_parameters))",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device == 'cuda'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device == 'cuda'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_325": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam((params_dict[n] for n in sorted(parameters)), lr=args.learning_rate)",
                            "Call"
                        ],
                        [
                            "configure_optimizers(net, args)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_52": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_331": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "'cuda' if args.cuda and torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_286": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/train_video.py": {
        "torch": {
            "Adam_237": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "(params_dict[n] for n in sorted(parameters))",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_241": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "(params_dict[n] for n in sorted(aux_parameters))",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_432": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VideoFolder(args.dataset, rnd_interval=True, rnd_temp_order=True, split='train', transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device == 'cuda'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_440": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VideoFolder(args.dataset, rnd_interval=False, rnd_temp_order=False, split='test', transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device == 'cuda'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_452": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam((params_dict[n] for n in sorted(parameters)), lr=args.learning_rate)",
                            "Call"
                        ],
                        [
                            "configure_optimizers(net, args)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_77": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "metric_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "metric_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(metric_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_162": {
                "variable": {
                    "value": "out[mse_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "distortions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_162": {
                "variable": {
                    "value": "out[mse_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_177": {
                "variable": {
                    "value": "lambdas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bpp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "bpp_loss + bpp",
                            "BinOp"
                        ],
                        [
                            "AverageMeter()",
                            "Call"
                        ],
                        [
                            "collect_likelihoods_list(likelihoods_list, num_pixels)",
                            "Call"
                        ],
                        [
                            "bpp_loss.mean()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self.lmbda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_315": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_458": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "'cuda' if args.cuda and torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_403": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "metric_values.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__265": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "likelihoods.items()",
                            "Call"
                        ],
                        [
                            "self.mse(x0.float(), x1.float())",
                            "Call"
                        ],
                        [
                            "v.mean(dim=(1, 2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_likelihoods.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_codec.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x_hat) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_87": {
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean((x - x_hat) ** 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_datasets.py": {
        "torch": {}
    },
    "tests/test_datasets_video.py": {
        "torch": {}
    },
    "tests/test_entropy_models.py": {
        "torch": {
            "rand_412": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_65": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_83": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-32",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 3, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_91": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_122": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_140": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_314": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_315": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_329": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_330": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_341": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_342": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_356": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_357": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_419": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_422": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_425": {
                "input": {
                    "value": "y0[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y1[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1).item()",
                            "Call"
                        ],
                        [
                            "eb.compress(x)",
                            "Call"
                        ],
                        [
                            "eb.compress(x)",
                            "Call"
                        ],
                        [
                            "eb.compress(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1).item()",
                            "Call"
                        ],
                        [
                            "eb.compress(x)",
                            "Call"
                        ],
                        [
                            "eb.compress(x)",
                            "Call"
                        ],
                        [
                            "eb.compress(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*[4] * i",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "allclose_265": {
                "input": {
                    "value": "torch.round(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eb.decompress(s, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "eb.decompress(s, [])",
                            "Call"
                        ],
                        [
                            "eb.decompress(s, x.size()[2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_275": {
                "input": {
                    "value": "torch.round(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eb.decompress(s, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "eb.decompress(s, [])",
                            "Call"
                        ],
                        [
                            "eb.decompress(s, x.size()[2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_279": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*[4] * i",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "round_265": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_275": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_283": {
                "input": {
                    "value": "torch.round(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eb.decompress(s, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "eb.decompress(s, [])",
                            "Call"
                        ],
                        [
                            "eb.decompress(s, x.size()[2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_415": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_116": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_157": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_160": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_283": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_298": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_175": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_186": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_197": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_210": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_324": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_336": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_350": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_87": {
                "input": {
                    "value": "x - means",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_220": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, *[4] * i)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_363": {
                "input": {
                    "value": "x - means",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_eval_model.py": {
        "torch": {
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_eval_model_video.py": {
        "torch": {
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_layers.py": {
        "torch": {
            "ones_like_62": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_76": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_90": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_104": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_127": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_146": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x.clamp(min=0, max=2 ** 8 - 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "qrelu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_159": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x.clamp(min=0, max=2 ** 8 - 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "qrelu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_172": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x.clamp(min=0, max=2 ** 8 - 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "qrelu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_177": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_180": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_183": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_186": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_196": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_199": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_204": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_222": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x.clamp(min=0, max=2 ** 8 - 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "qrelu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_145": {
                "input": {
                    "value": "1 + 0.1 * x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "1 + 0.1 * x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_171": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models.py": {
        "torch": {
            "rand_286": {
                "variable": {
                    "value": "state_dict[conv1.wweight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_73": {
                "input": {
                    "value": "model.original_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "model.conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_74": {
                "input": {
                    "value": "model.original_deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "model.deconv.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_65": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_177": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_185": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_123": {
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ops.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_53": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_61": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LowerBound(bound)",
                            "Call"
                        ],
                        [
                            "LowerBound(bound)",
                            "Call"
                        ],
                        [
                            "LowerBound(bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_90": {
                "input": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parametrizer.init(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(torch.max(x, x - x))",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "2 ** (-18)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "minimum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_90": {
                "input": {
                    "value": "torch.max(x, x - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_100": {
                "input": {
                    "value": "x_reparam.min()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "minimum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_78": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_86": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_96": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_scripting.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_42": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GDN(128)",
                            "Call"
                        ],
                        [
                            "GDN1(128)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_52": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GDN(128)",
                            "Call"
                        ],
                        [
                            "GDN1(128)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_45": {
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_55": {
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_61": {
                "obj": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MaskedConv2d(3, 3, 3, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_transforms.py": {
        "torch": {
            "rand_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_98": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_99": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_100": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 64, 64)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(x)",
                            "Call"
                        ],
                        [
                            "func(x)",
                            "Call"
                        ],
                        [
                            "ycbcr2rgb(rgb2ycbcr(x))",
                            "Call"
                        ],
                        [
                            "rgb2ycbcr(ycbcr2rgb(x))",
                            "Call"
                        ],
                        [
                            "yuv_420_to_444((y, u, v))",
                            "Call"
                        ],
                        [
                            "yuv_420_to_444((y, u, v), return_tuple=True)",
                            "Call"
                        ],
                        [
                            "RGB2YCbCr()(x)",
                            "Call"
                        ],
                        [
                            "YCbCr2RGB()(x)",
                            "Call"
                        ],
                        [
                            "YUV444To420()(x)",
                            "Call"
                        ],
                        [
                            "YUV420To444()(rv)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 64, 64)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 32, 32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(x)",
                            "Call"
                        ],
                        [
                            "func(x)",
                            "Call"
                        ],
                        [
                            "ycbcr2rgb(rgb2ycbcr(x))",
                            "Call"
                        ],
                        [
                            "rgb2ycbcr(ycbcr2rgb(x))",
                            "Call"
                        ],
                        [
                            "yuv_420_to_444((y, u, v))",
                            "Call"
                        ],
                        [
                            "yuv_420_to_444((y, u, v), return_tuple=True)",
                            "Call"
                        ],
                        [
                            "RGB2YCbCr()(x)",
                            "Call"
                        ],
                        [
                            "YCbCr2RGB()(x)",
                            "Call"
                        ],
                        [
                            "YUV444To420()(x)",
                            "Call"
                        ],
                        [
                            "YUV420To444()(rv)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_48": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_update_model.py": {
        "torch": {
            "save_73": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_93": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_112": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_85": {
                "f": {
                    "value": "files[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "files[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "{k: net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}