{
    "pathgan/data/mpr_dataset.py": {
        "torch": {}
    },
    "pathgan/losses/criterion.py": {
        "torch": {
            "div_28": {
                "variable": {
                    "value": "dice",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * intersection",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "union",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "fake.sum() + real.sum() + self.smooth",
                            "BinOp"
                        ],
                        [
                            "fake.sum() + real.sum() + self.smooth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_56": {
                "variable": {
                    "value": "iou",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(fake * real).sum() + self.smooth",
                            "BinOp"
                        ],
                        [
                            "(fake * real).sum() + self.smooth",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "union - intersection",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "L1Loss_88": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_105": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_106": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_109": {
                "variable": {
                    "value": "fake_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_126": {
                "variable": {
                    "value": "self.adv_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_131": {
                "variable": {
                    "value": "fake_mtarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_mpred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_132": {
                "variable": {
                    "value": "fake_ptarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_ppred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_149": {
                "variable": {
                    "value": "self.adv_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_153": {
                "variable": {
                    "value": "fake_mtarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_mpred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_154": {
                "variable": {
                    "value": "fake_ptarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_ppred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_170": {
                "variable": {
                    "value": "self.adv_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_173": {
                "variable": {
                    "value": "fake_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_174": {
                "variable": {
                    "value": "real_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_74": {
                "input": {
                    "value": "(fake - real) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "-self.alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "-self.alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/metrics/functional.py": {
        "torch": {
            "mean_9": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_9": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_17": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "symeig_23": {
                "variable": {
                    "value": "(P, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[cutoff]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_29": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(P[cutoff])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_26": {
                "input": {
                    "value": "abs(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "py + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/metrics/metrics.py": {
        "torch": {
            "Upsample_30": {
                "variable": {
                    "value": "self.upsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_35": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "px",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_76": {
                "variable": {
                    "value": "self.upsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_81": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsize(x)",
                            "Call"
                        ],
                        [
                            "self.downsize(x)",
                            "Call"
                        ],
                        [
                            "self.upsize(x)",
                            "Call"
                        ],
                        [
                            "self.downsize(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsize(x)",
                            "Call"
                        ],
                        [
                            "self.downsize(x)",
                            "Call"
                        ],
                        [
                            "self.upsize(x)",
                            "Call"
                        ],
                        [
                            "self.downsize(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/layers.py": {
        "torch": {
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_115": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.q_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.k_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.v_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_170": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(alpha).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_180": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.q_conv(x).view(B, -1, W * H).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "xk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.k_conv(x).view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_183": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v_conv(x).view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_140": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_49": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_121": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_131": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_61": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_133": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_63": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/pix2pix/.ipynb_checkpoints/discriminator-checkpoint.py": {
        "torch": {}
    },
    "pathgan/models/gan/pix2pix/.ipynb_checkpoints/generator-checkpoint.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[maps, points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mx, px]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[y5, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[y4, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[y3, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[y2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[y1, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/pix2pix/discriminator.py": {
        "torch": {}
    },
    "pathgan/models/gan/pix2pix/generator.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[maps, points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mx, px]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[y5, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[y4, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[y3, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[y2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[y1, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/sagan/.ipynb_checkpoints/discriminator-checkpoint.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mx, rx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[px, rx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/sagan/.ipynb_checkpoints/generator-checkpoint.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mx, px, nx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/sagan/discriminator.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mx, rx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[px, rx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/models/gan/sagan/generator.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mx, px, nx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/train/pix2pix_trainer.py": {
        "torch": {
            "cat_72": {
                "tensors": {
                    "value": "[maps, points, fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[maps, points, fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[maps, points, real]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/train/sagan_trainer.py": {
        "torch": {
            "rand_85": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pathgan/train/utils.py": {
        "torch": {
            "BCEWithLogitsLoss_8": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_9": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_12": {
                "variable": {
                    "value": "fake_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_20": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "fake_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_24": {
                "variable": {
                    "value": "real_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "test_pix2pix.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MPRDataset(map_dir='dataset/maps', point_dir='dataset/tasks', roi_dir='dataset/tasks', csv_file=df, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_sagan.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MPRDataset(map_dir='dataset/maps', point_dir='dataset/tasks', roi_dir='dataset/tasks', csv_file=df, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_pix2pix.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MPRDataset(map_dir='dataset/maps', point_dir='dataset/tasks', roi_dir='dataset/tasks', csv_file=df, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "generator.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "discriminator.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'discriminator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "f": {
                    "value": "args.load_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_sagan.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MPRDataset(map_dir='dataset/maps', point_dir='dataset/tasks', roi_dir='dataset/tasks', csv_file=df, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "md_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.md_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "pd_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.pd_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "generator.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "map_discriminator.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'map_discriminator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "point_discriminator.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'point_discriminator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "args.load_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}