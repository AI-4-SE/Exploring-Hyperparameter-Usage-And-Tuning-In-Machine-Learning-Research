{
    "lib/model/utils/logger.py": {
        "tensorflow": {
            "FileWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_19": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_52": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_69": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dtm_util.py": {
        "torch": {
            "zeros_492": {
                "variable": {
                    "value": "domain_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_64": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_74": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_428": {
                "variable": {
                    "value": "out_d_ins_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "out_d_ins",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_538": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_604": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_610": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_622": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_497": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_499": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "out_d_mid",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_label_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + label_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_508": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_66": {
                "input": {
                    "value": "out_d_mid_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True, eta=-1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True, eta=-1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True, eta=-1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True, eta=-1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True, eta=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid_s.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid_s.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_70": {
                "input": {
                    "value": "(1 - out_d_pixel_s) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_365": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "out_d_mid",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid_s.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid_s.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_369": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_432": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_439": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "out_d_mid",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_443": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_503": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_505": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_618": {
                "input": {
                    "value": "(1 - out_d_pixel_s) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_392": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_400": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(mask(im_data), im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "out_d_mid",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid_s.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid_s.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_404": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_550": {
                "input": {
                    "value": "p.grad.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_eval.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/exp_eval_complexity.py": {
        "torch": {
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_137": {
                "variable": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "random_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 256, 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_eval_distill.py": {
        "torch": {
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_124": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_frcnn_utils.init_model_only(device, 'res50', htcn_resnet, val_imdb_ts[0], student_pth, class_agnostic=class_agnostic, lc=lc, gc=gc, la_attention=LA_ATT, mid_attention=MID_ATT)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_train_dtm.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "dtm",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 256, 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dtm.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_127": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_htcn_model(LA_ATT, MID_ATT, class_agnostic, device, gc, imdb, lc, load_name, net, strict=False, pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_144": {
                "obj": {
                    "value": "dtm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Conv2d(3, 256, 1, stride=1, padding=0, bias=False), nn.ReLU(), nn.Conv2d(256, 3, 1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'dtm_target_cnn_{}_{}.p'.format(load_id, find_id))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_traineval_htcn.py": {
        "torch": {
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_htcn_model_optimizer(lr, LA_ATT, MID_ATT, class_agnostic, device, gc, imdb, lc, load_name, net, optimizer, resume, session, start_epoch, pretrained=pretrained, is_all_params=False)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_traineval_htcn_inc_FT.py": {
        "torch": {
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_121": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_htcn_model(LA_ATT, MID_ATT, class_agnostic, device, gc, imdb, lc, load_name, net, pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_traineval_htcn_inc_FTPrev.py": {
        "torch": {
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_127": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_htcn_model(LA_ATT, MID_ATT, class_agnostic, device, gc, imdb, lc, load_name, net, pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_traineval_htcn_inc_ida_dtm.py": {
        "torch": {
            "device_112": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_124": {
                "variable": {
                    "value": "dtm",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dtm_load_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "dtm_load_p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_130": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_htcn_model(LA_ATT, MID_ATT, class_agnostic, device, gc, imdb, lc, load_name, net, strict=False, pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_traineval_htcn_mixed.py": {
        "torch": {
            "device_102": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_117": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_htcn_model_optimizer(lr, LA_ATT, MID_ATT, class_agnostic, device, gc, imdb, lc, load_name, net, optimizer, resume, session, start_epoch)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_traineval_source_train.py": {
        "torch": {
            "device_92": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_frcnn_utils.init_non_damodel_optimizer(lr, class_agnostic, device, imdb, load_name, net, optimizer, resume, session, start_epoch, is_all_params=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn_utils.py": {
        "torch": {
            "zeros_167": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "out_d_ins_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_199": {
                "variable": {
                    "value": "domain_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_204": {
                "variable": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_214": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_336": {
                "variable": {
                    "value": "out_d_ins_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_488": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_698": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_708": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_844": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_853": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_854": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_857": {
                "variable": {
                    "value": "domain_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_519": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_520": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_525": {
                "variable": {
                    "value": "out_d_ins_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_529": {
                "variable": {
                    "value": "domain_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_540": {
                "variable": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_552": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_726": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_727": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_731": {
                "variable": {
                    "value": "out_d_ins_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_990": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_64": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "loss + (dloss_s + dloss_t + dloss_s_p + dloss_t_p)",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_64": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "loss + (dloss_s + dloss_t + dloss_s_p + dloss_t_p)",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_89": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_175": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_179": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_206": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device) * target_num",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "domain_t_mid * (i + 1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + (i + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_210": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_315": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_319": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_340": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_345": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_347": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device) * target_num",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "domain_t_mid * (i + 1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + (i + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_351": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_355": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_364": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "loss + (dloss_s + dloss_t + dloss_s_p + dloss_t_p)",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_364": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "loss + (dloss_s + dloss_t + dloss_s_p + dloss_t_p)",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ],
                        [
                            "rpn_loss_cls.mean() + rpn_loss_box.mean() + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_394": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_405": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_496": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_500": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_598": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_607": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_700": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_704": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_848": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_860": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_881": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_892": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_936": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_994": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1000": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_544": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device) * target_num",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "domain_t_mid * (i + 1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + (i + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_548": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_735": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_740": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_742": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device) * target_num",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "domain_t_mid * (i + 1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + (i + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_746": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_750": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_876": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_535": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "inc_frcnn_utils.py": {
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_420": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_451": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_599": {
                "variable": {
                    "value": "domain_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_605": {
                "variable": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_615": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_630": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_631": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_638": {
                "variable": {
                    "value": "domain_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_643": {
                "variable": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_652": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "out_d_ins_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_468": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "domain_gt_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_73": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_77": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_237": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_241": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_257": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_258": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_428": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_432": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_449": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_450": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_607": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_s_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_611": {
                "input": {
                    "value": "out_d_pixel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_644": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_648": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_115": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_119": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_312": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_313": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_500": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_502": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_503": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_504": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_290": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_294": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_476": {
                "*size": {
                    "value": "out_d.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_481": {
                "*size": {
                    "value": "out_d_mid.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_482": {
                "input": {
                    "value": "out_d_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN(im_data, im_info, gt_boxes, num_boxes, target=True, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_forward(base_feat1, base_feat2, base_feat, pooled_feat, -1)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ],
                        [
                            "fasterRCNN.adv_sel_forward(im_data, im_info, gt_boxes, num_boxes, target=True, adv_num=adv_num, with_feat=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "domain_t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(out_d_mid.size(0)).long().to(device) + with_source[i]",
                            "BinOp"
                        ],
                        [
                            "torch.ones(out_d_mid.size(0)).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_486": {
                "input": {
                    "value": "(1 - out_d_pixel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_490": {
                "*size": {
                    "value": "out_d_ins.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "init_frcnn_utils.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "dataloader_s",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader_s",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader_s",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConcatDataset_98": {
                "variable": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "m_datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "dataloader_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset(m_datasets)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size_t, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size_t, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(total_train_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "dataloader_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "dataloader_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size_t, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size_t, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(total_train_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "dataloader_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size_t, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(train_size_t, batch_size)",
                            "Call"
                        ],
                        [
                            "sampler(total_train_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "dataloader_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=is_train, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True, is_bgr=is_bgr)",
                            "Call"
                        ],
                        [
                            "roibatchLoader(roidb_t, ratio_list_t, ratio_index_t, batch_size, imdb_t.num_classes, training=False, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_145": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_220": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_257": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_280": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_300": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_306": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_358": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_367": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_412": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_419": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_456": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_464": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_502": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_510": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ],
                        [
                            "load_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "optimizer_wd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params_wd + [{'params': [value], 'lr': 5e-05, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_213": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_303": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_361": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_415": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_460": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_505": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_215": {
                "variable": {
                    "value": "optimizer_wd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params_wd + [{'params': [value], 'lr': 5e-05, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/faster_rcnn.py": {
        "torch": {
            "softmax_94": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_89": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_101": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/faster_rcnn_HTCN.py": {
        "torch": {
            "cat_97": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_mid, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_pixel, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_mid, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_pixel, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "pooled_feat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, pooled_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ],
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_mid, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_pixel, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "pooled_feat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, pooled_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ],
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_203": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ],
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_215": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ],
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "gather_329": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ],
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_341": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ],
                        [
                            "self.RCNN_cls_score(pooled_feat_c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/faster_rcnn_HTCN_mrpn.py": {
        "torch": {
            "ModuleList_43": {
                "variable": {
                    "value": "self.RCNN_rpns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.RCNN_rpns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_mid, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_pixel, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "pooled_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, pooled_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_159": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/faster_rcnn_saito.py": {
        "torch": {
            "softmax_105": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "pooled_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_pixel, pooled_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "pooled_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, pooled_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_112": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/mmd.py": {
        "torch": {
            "mean_15": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(delta, torch.transpose(delta, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX + YY - XY - YX",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(y, 0, 1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_121": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((x - y) ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(output, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * sigmas)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "dist_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.view(1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_132": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_138": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel(all[current_i].view(1, -1), all[current_i].view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "torch.exp(-s)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "kernel(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_15": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_of_X - f_of_Y",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(delta, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "-L2_distance / bandwidth_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_134": {
                "input": {
                    "value": "kernel(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_149": {
                "variable": {
                    "value": "XXI",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel(all[current_i].view(1, -1), all[i].view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_15": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_of_X - f_of_Y",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "L2_distance.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "XJXI",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel(all[i].view(1, -1), all[j].view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_130": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_151": {
                "input": {
                    "value": "kernel(all[current_i].view(1, -1), all[i].view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_157": {
                "input": {
                    "value": "kernel(all[i].view(1, -1), all[j].view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_118": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(feat1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_185": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer2(feat1)",
                            "Call"
                        ],
                        [
                            "F.relu(feat2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_186": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3(feat2)",
                            "Call"
                        ],
                        [
                            "F.relu(feat3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(feat3)",
                            "Call"
                        ],
                        [
                            "F.relu(feat4)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_286": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_179": {
                "input": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(feat3)",
                            "Call"
                        ],
                        [
                            "F.relu(feat4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/resnet_HTCN.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "merge_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_167": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_172": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "merge_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_185": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "feat_d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_199": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_201": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.RCNN_base1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_277": {
                "variable": {
                    "value": "self.RCNN_base2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "variable": {
                    "value": "self.RCNN_base3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.stu_feature_adap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 1024, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "f_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "r_c[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "f_new_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "r_c[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "f_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f_new, f_new_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "f_re",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_new_s[k] for k in range(i * c, i * c + c)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "f_re_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_new_s[k] for k in range(i * c, i * c + c)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "f_re",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f_re, f_re_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "merge_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_123": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "merge_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_222": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_260": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_355": {
                "variable": {
                    "value": "self.netD_pixels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.netD_pixel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_356": {
                "variable": {
                    "value": "self.netDs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.netD]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_357": {
                "variable": {
                    "value": "self.netD_mids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.netD_mid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "self.RandomLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.RandomLayer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.netD_das",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.netD_da]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "merge_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_142": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_144": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_169": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_171": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_190": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_204": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_205": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_216": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_219": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "merge_r_c(x, self.row, self.col)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/resnet_saito.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_184": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_191": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.RCNN_base1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.RCNN_base2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "feat_d + 128",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_59": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_315": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "feat_d + 128",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "feat_d + 128",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_79": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_80": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_100": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_101": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/vgg16.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/vgg16_HTCN.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_115": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_117": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "feat_d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_132": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.RCNN_base1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:14]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.RCNN_base2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[14:21]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.RCNN_base3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[21:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_52": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_151": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_174": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_72": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_100": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_135": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_145": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_148": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/vgg16_HTCN_mrpn.py": {
        "torch": {
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn3(self.conv3(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_118": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "feat_d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_133": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.fc1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.RCNN_base1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:14]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.RCNN_base2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[14:21]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.RCNN_base3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[21:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_53": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_152": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_177": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_d + feat_d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_73": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_100": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_101": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_122": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_137": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_146": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_149": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.conv1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.conv2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn3(self.conv3(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.size(2), x.size(3)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn1(self.fc1(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.bn2(self.fc2(x))), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/nms/_ext/nms/__init__.py": {
        "torch": {}
    },
    "lib/model/nms/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/nms/nms_cpu.py": {
        "torch": {}
    },
    "lib/model/nms/nms_gpu.py": {
        "torch": {}
    },
    "lib/model/nms/nms_wrapper.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_align/build.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "lib/model/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/_ext/crop_resize/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/_ext/roi_crop/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/crop_resize.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input1.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input2.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input2.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "grad_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/gridgen.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_45": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input1.new(self.input1.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.baddbmm(grad_input1, torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2), self.batchgrid.view(-1, self.height * self.width, 3))",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "input": {
                    "value": "grad_output.view(-1, self.height * self.width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_crop/modules/gridgen.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output0, output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_132": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(x, 3), torch.sum(y, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_158": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_216": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_283": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_357": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan_101": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_156": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_156": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_177": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_178": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_179": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_186": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_214": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_214": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_243": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_244": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_245": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_252": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_259": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_281": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_281": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_282": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_313": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_318": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_329": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_355": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_355": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_399": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tan_101": {
                "input": {
                    "value": "np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(self.batchgrid, input1[:, :, :, 3:6])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid3d[:, :, :, 1:2] * depth + trans1.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1)",
                            "BinOp"
                        ],
                        [
                            "x_ * torch.sin(rotate_z) + y_ * torch.cos(rotate_z)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_184": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_250": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_259": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_316": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_329": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_402": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_406": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_408": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input1",
                            "Method Argument"
                        ],
                        [
                            "input1",
                            "Method Argument"
                        ],
                        [
                            "input1",
                            "Method Argument"
                        ],
                        [
                            "input1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/modules/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_layers/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_layers/roi_align.py": {
        "torch": {}
    },
    "lib/model/roi_layers/roi_pool.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/_ext/roi_pooling/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/build.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_pooling/functions/roi_pool.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/modules/roi_pool.py": {
        "torch": {}
    },
    "lib/model/rpn/anchor_target_layer.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_116": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_117": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_123": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "sum_fg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "sum_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_227": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_230": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_104": {
                "variable": {
                    "value": "(max_iou, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "IOU_map[i].view(height * width * A, gt_boxes.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "mask_per_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "mask_per_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IOU_map[i][:, :, :, k] > max_iou_per_gt",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_156": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_163": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "gt_boxes[i][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/rpn/bbox_transform.py": {
        "torch": {
            "log_28": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_91": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_155": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_156": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_159": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_201": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_202": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_205": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_240": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_245": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/rpn/proposal_layer.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_125": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/rpn/proposal_target_layer_cascade.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "all_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_rois, gt_boxes_append]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_124": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(all_rois, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps[i] >= cfg.TRAIN.FG_THRESH",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_146": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps[i] < cfg.TRAIN.BG_THRESH_HI) & (max_overlaps[i] >= cfg.TRAIN.BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_batch.size(0)",
                            "Call"
                        ],
                        [
                            "ex_rois.size(0)",
                            "Call"
                        ],
                        [
                            "overlaps.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/rpn/rpn.py": {
        "torch": {
            "Conv2d_28": {
                "variable": {
                    "value": "self.RPN_Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_bbox_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "rpn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_conv1_prerelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RPN_Conv(base_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_95": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero(as_tuple=False).view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_96": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_98": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_99": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/utils/net_utils.py": {
        "torch": {
            "CrossEntropyLoss_375": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_410": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, 1)",
                            "Call"
                        ],
                        [
                            "prob.clamp(1e-06, 1)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_478": {
                "variable": {
                    "value": "totalnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totalnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.sqrt(totalnorm).item()",
                            "Call"
                        ],
                        [
                            "totalnorm + modulenorm ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_540": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_582": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_625": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_650": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_22": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_78": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(alpha)",
                            "Call"
                        ],
                        [
                            "alpha.to(device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "self.alpha[ids.data.view(-1)]",
                            "Subscript"
                        ],
                        [
                            "self.alpha[ids.data.view(-1)]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_104": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, *range(2, x.ndim), 1).reshape(-1, c)",
                            "Call"
                        ],
                        [
                            "x[unignored_mask]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "all_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(inputs, 1)",
                            "Call"
                        ],
                        [
                            "inputs[indexes]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_334": {
                "variable": {
                    "value": "(inputs, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(inputs, 1)",
                            "Call"
                        ],
                        [
                            "inputs[indexes]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_335": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_336": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "inputs > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(inputs, 1)",
                            "Call"
                        ],
                        [
                            "inputs[indexes]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(inputs.size()).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_408": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, 1)",
                            "Call"
                        ],
                        [
                            "prob.clamp(1e-06, 1)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_456": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_533": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "affine_grid_592": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_595": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_596": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(crops, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_598": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_601": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_25": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(alpha)",
                            "Call"
                        ],
                        [
                            "alpha.to(device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "self.alpha[ids.data.view(-1)]",
                            "Subscript"
                        ],
                        [
                            "self.alpha[ids.data.view(-1)]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(inputs, 1)",
                            "Call"
                        ],
                        [
                            "inputs[indexes]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_268": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(inputs, 1)",
                            "Call"
                        ],
                        [
                            "inputs[indexes]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_268": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_343": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(inputs, 1)",
                            "Call"
                        ],
                        [
                            "value.ne(1)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_411": {
                "input": {
                    "value": "prob * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_29": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_210": {
                "input": {
                    "value": "-self.gamma * probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_240": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_num",
                            "Method Argument"
                        ],
                        [
                            "class_num",
                            "Method Argument"
                        ],
                        [
                            "class_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_542": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_num",
                            "Method Argument"
                        ],
                        [
                            "class_num",
                            "Method Argument"
                        ],
                        [
                            "class_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_287": {
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_317": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_num",
                            "Method Argument"
                        ],
                        [
                            "class_num",
                            "Method Argument"
                        ],
                        [
                            "class_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_261": {
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_265": {
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_350": {
                "input": {
                    "value": "1 - inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_359": {
                "input": {
                    "value": "1 - inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/roi_data_layer/roibatchLoader.py": {
        "torch": {
            "Tensor_38": {
                "variable": {
                    "value": "self.ratio_list_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_191": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_keep == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_207": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_92": {
                "input": {
                    "value": "gt_boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "gt_boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "gt_boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "gt_boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}