{
    "manuscript_code/classification_JAMES/climatedata.py": {
        "sklearn": {
            "OneHotEncoder_151": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "manuscript_code/regression_JAMES/climatedata.py": {
        "sklearn": {
            "OneHotEncoder_301": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classification/abstentionloss.py": {
        "tensorflow": {
            "Variable_171": {
                "variable": {
                    "value": "current_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "current_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "self.spinup_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "spinup_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ],
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_95": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - y_pred[:, -1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_96": {
                "variable": {
                    "value": "logq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_98": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_99": {
                "variable": {
                    "value": "logr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_128": {
                "variable": {
                    "value": "self.spinup_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "spinup_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ],
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - y_pred[:, -1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_137": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_138": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_186": {
                "variable": {
                    "value": "self.setpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "setpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_187": {
                "variable": {
                    "value": "self.alpha_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_189": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_270": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-0.25",
                            "Method Argument"
                        ],
                        [
                            "(-0.05",
                            "Method Argument"
                        ],
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_271": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_273": {
                "variable": {
                    "value": "self.total_votes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_274": {
                "variable": {
                    "value": "self.total_abstentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_276": {
                "variable": {
                    "value": "self.previous_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_277": {
                "variable": {
                    "value": "self.penultimate_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_292": {
                "variable": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_293": {
                "variable": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_294": {
                "variable": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_367": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_368": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-0.25",
                            "Method Argument"
                        ],
                        [
                            "(-0.05",
                            "Method Argument"
                        ],
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_369": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_374": {
                "variable": {
                    "value": "self.previous_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_375": {
                "variable": {
                    "value": "self.penultimate_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_390": {
                "variable": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_391": {
                "variable": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_392": {
                "variable": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "divide_400": {
                "variable": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_abstentions.sum()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "total_votes + total_abstentions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_403": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.k[0] * error - self.k[1] * self.previous_error + self.k[2] * self.penultimate_error",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_443": {
                "variable": {
                    "value": "self.kp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_444": {
                "variable": {
                    "value": "self.ki",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "ki",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_445": {
                "variable": {
                    "value": "self.kd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_446": {
                "variable": {
                    "value": "self.dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_447": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_448": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-0.25",
                            "Method Argument"
                        ],
                        [
                            "(-0.05",
                            "Method Argument"
                        ],
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_450": {
                "variable": {
                    "value": "self.smoothed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_451": {
                "variable": {
                    "value": "self.integral",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_469": {
                "variable": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_470": {
                "variable": {
                    "value": "voted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_481": {
                "variable": {
                    "value": "control",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "proportional + self.integral + derivative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_505": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_506": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([length], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_507": {
                "variable": {
                    "value": "self.index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logq - logr",
                            "BinOp"
                        ],
                        [
                            "(q - self.updater.alpha) * logq - q * logr",
                            "BinOp"
                        ],
                        [
                            "tf.math.log(q) - tf.math.log(r)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(r + s) - self.updater.alpha * tf.math.log(q)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logq - logr",
                            "BinOp"
                        ],
                        [
                            "(q - self.updater.alpha) * logq - q * logr",
                            "BinOp"
                        ],
                        [
                            "tf.math.log(q) - tf.math.log(r)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(r + s) - self.updater.alpha * tf.math.log(q)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_300": {
                "variable": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.total_abstentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.total_votes + self.total_abstentions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_303": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.k[0] * error - self.k[1] * self.previous_error + self.k[2] * self.penultimate_error",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_514": {
                "input_tensor": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_98": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_137": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "count_nonzero_296": {
                "input": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_297": {
                "input": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_394": {
                "input": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_395": {
                "input": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_401": {
                "x": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(self.total_abstentions, self.total_votes + self.total_abstentions)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(total_abstentions, total_votes + total_abstentions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_409": {
                "x": {
                    "value": "tf.cast(0.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - adjustment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_478": {
                "t": {
                    "value": "self.ki * error * self.dt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_482": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - control",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "shape": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_141": {
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_301": {
                "x": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(self.total_abstentions, self.total_votes + self.total_abstentions)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(total_abstentions, total_votes + total_abstentions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_309": {
                "x": {
                    "value": "tf.cast(0.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - adjustment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_409": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zero_fraction_472": {
                "value": {
                    "value": "voted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_143": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_309": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classification/metrics.py": {
        "tensorflow": {
            "CategoricalAccuracy_35": {
                "variable": {
                    "value": "met",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_43": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abstain",
                            "Method Argument"
                        ],
                        [
                            "abstain",
                            "Method Argument"
                        ],
                        [
                            "abstain",
                            "Method Argument"
                        ],
                        [
                            "abstain",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CategoricalAccuracy_44": {
                "variable": {
                    "value": "met",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_96": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_97": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.abstain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_99": {
                "variable": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_100": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_133": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_134": {
                "variable": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_136": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.abstain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_137": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_138": {
                "variable": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_true, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_true, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_140": {
                "variable": {
                    "value": "batch_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.equal(cat_pred, cat_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_141": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_179": {
                "variable": {
                    "value": "logq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - y_pred[:, -1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_181": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_182": {
                "variable": {
                    "value": "logr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(y_pred, y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_184": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.abstain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_185": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logq - logr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_187": {
                "variable": {
                    "value": "batch_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_188": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(logq - logr, mask)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_45": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_140": {
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_true, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_true, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_143": {
                "x": {
                    "value": "batch_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(tf.math.equal(cat_pred, cat_true))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_190": {
                "x": {
                    "value": "batch_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_191": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classification/network.py": {
        "tensorflow": {
            "Sequential_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_63": {
                "units": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.Zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.Zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_51": {
                "units": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_l2_67": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Zeros_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_29": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_30": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_42": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_43": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_44": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_55": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_56": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_57": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "manuscript_code/classification_JAMES/abstentionloss.py": {
        "tensorflow": {
            "Variable_170": {
                "variable": {
                    "value": "current_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_171": {
                "variable": {
                    "value": "current_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "self.spinup_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "spinup_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ],
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - y_pred[:, -1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_95": {
                "variable": {
                    "value": "logq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_97": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_98": {
                "variable": {
                    "value": "logr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_127": {
                "variable": {
                    "value": "self.spinup_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "spinup_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ],
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - y_pred[:, -1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_137": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_185": {
                "variable": {
                    "value": "self.setpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "setpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_186": {
                "variable": {
                    "value": "self.alpha_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_188": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-0.25",
                            "Method Argument"
                        ],
                        [
                            "(-0.05",
                            "Method Argument"
                        ],
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_270": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_272": {
                "variable": {
                    "value": "self.total_votes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_273": {
                "variable": {
                    "value": "self.total_abstentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_275": {
                "variable": {
                    "value": "self.previous_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_276": {
                "variable": {
                    "value": "self.penultimate_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_291": {
                "variable": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_292": {
                "variable": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_293": {
                "variable": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_366": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_367": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-0.25",
                            "Method Argument"
                        ],
                        [
                            "(-0.05",
                            "Method Argument"
                        ],
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_368": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_373": {
                "variable": {
                    "value": "self.previous_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_374": {
                "variable": {
                    "value": "self.penultimate_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_389": {
                "variable": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_390": {
                "variable": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_391": {
                "variable": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "divide_399": {
                "variable": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_abstentions.sum()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "total_votes + total_abstentions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_402": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.k[0] * error - self.k[1] * self.previous_error + self.k[2] * self.penultimate_error",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "self.kp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_443": {
                "variable": {
                    "value": "self.ki",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "ki",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_444": {
                "variable": {
                    "value": "self.kd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_445": {
                "variable": {
                    "value": "self.dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_446": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_447": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-0.25",
                            "Method Argument"
                        ],
                        [
                            "(-0.05",
                            "Method Argument"
                        ],
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_449": {
                "variable": {
                    "value": "self.smoothed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_450": {
                "variable": {
                    "value": "self.integral",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_468": {
                "variable": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_469": {
                "variable": {
                    "value": "voted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "y_pred.get_shape()[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_480": {
                "variable": {
                    "value": "control",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "proportional + self.integral + derivative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_504": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_505": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([length], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_506": {
                "variable": {
                    "value": "self.index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logq - logr",
                            "BinOp"
                        ],
                        [
                            "(q - self.updater.alpha) * logq - q * logr",
                            "BinOp"
                        ],
                        [
                            "tf.math.log(q) - tf.math.log(r)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(r + s) - self.updater.alpha * tf.math.log(q)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logq - logr",
                            "BinOp"
                        ],
                        [
                            "(q - self.updater.alpha) * logq - q * logr",
                            "BinOp"
                        ],
                        [
                            "tf.math.log(q) - tf.math.log(r)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(r + s) - self.updater.alpha * tf.math.log(q)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_299": {
                "variable": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.total_abstentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.total_votes + self.total_abstentions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_302": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.k[0] * error - self.k[1] * self.previous_error + self.k[2] * self.penultimate_error",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_513": {
                "input_tensor": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_97": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_136": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "count_nonzero_295": {
                "input": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_296": {
                "input": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_393": {
                "input": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_394": {
                "input": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_400": {
                "x": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(self.total_abstentions, self.total_votes + self.total_abstentions)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(total_abstentions, total_votes + total_abstentions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_408": {
                "x": {
                    "value": "tf.cast(0.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - adjustment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_477": {
                "t": {
                    "value": "self.ki * error * self.dt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_481": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - control",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "shape": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_140": {
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.boolean_mask(y_pred, y_true), tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_300": {
                "x": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(self.total_abstentions, self.total_votes + self.total_abstentions)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(total_abstentions, total_votes + total_abstentions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_308": {
                "x": {
                    "value": "tf.cast(0.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - adjustment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_408": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zero_fraction_471": {
                "value": {
                    "value": "voted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(predicted_category, abstain_category)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_142": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(1 - y_pred[:, -1], tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_308": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "manuscript_code/classification_JAMES/metrics.py": {
        "tensorflow": {
            "CategoricalAccuracy_36": {
                "variable": {
                    "value": "met",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abstain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abstain",
                            "Method Argument"
                        ],
                        [
                            "abstain",
                            "Method Argument"
                        ],
                        [
                            "abstain",
                            "Method Argument"
                        ],
                        [
                            "abstain",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CategoricalAccuracy_45": {
                "variable": {
                    "value": "met",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_97": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_98": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.abstain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_100": {
                "variable": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_101": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_134": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_135": {
                "variable": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_137": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.abstain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_138": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_139": {
                "variable": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_true, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_true, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_141": {
                "variable": {
                    "value": "batch_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.equal(cat_pred, cat_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_142": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_177": {
                "variable": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_180": {
                "variable": {
                    "value": "logq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - y_pred[:, -1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_182": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_183": {
                "variable": {
                    "value": "logr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(y_pred, y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_185": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.abstain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logq - logr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_188": {
                "variable": {
                    "value": "batch_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_189": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(logq - logr, mask)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_46": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.not_equal(cat_pred, abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(cat_pred, self.abstain)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(predicted, self.abstain)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_103": {
                "x": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_141": {
                "x": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cat_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.argmax(y_true, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(cat_true, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_144": {
                "x": {
                    "value": "batch_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(tf.math.equal(cat_pred, cat_true))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_145": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_191": {
                "x": {
                    "value": "batch_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_192": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "manuscript_code/classification_JAMES/network.py": {
        "tensorflow": {
            "Sequential_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_63": {
                "units": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.Zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.Zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_51": {
                "units": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_l2_67": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Zeros_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_29": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_30": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_42": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_43": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_44": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_55": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_56": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_57": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "manuscript_code/classification_JAMES/networkLRP.py": {
        "tensorflow": {
            "Zeros_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomNormal_37": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_38": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_51": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_52": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_64": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_65": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "manuscript_code/regression_JAMES/abstentionloss.py": {
        "tensorflow": {
            "Variable_151": {
                "variable": {
                    "value": "current_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "current_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_25": {
                "variable": {
                    "value": "self.tau_coarse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau_coarse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_coarse",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_26": {
                "variable": {
                    "value": "self.tau_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_fine",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tau_coarse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_coarse",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "self.spinup_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "spinup_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "self.coarse_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "coarse_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coarse_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_40": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_46": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_81": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_106": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0] - y_true[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_107": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "self.setpoint - tf.cast(abstention_fraction, tf.float64)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_124": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0] - y_true[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "self.setpoint - tf.cast(abstention_fraction, tf.float64)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_166": {
                "variable": {
                    "value": "self.setpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "setpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_167": {
                "variable": {
                    "value": "self.alpha_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_169": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_251": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_252": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_253": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_258": {
                "variable": {
                    "value": "self.previous_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_259": {
                "variable": {
                    "value": "self.penultimate_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_273": {
                "variable": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_274": {
                "variable": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_282": {
                "variable": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_abstentions.sum()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "total_votes + total_abstentions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_286": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.k[0] * error - self.k[1] * self.previous_error + self.k[2] * self.penultimate_error",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_318": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_319": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([length], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_320": {
                "variable": {
                    "value": "self.index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_58": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.divide(self.tau_coarse, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_59": {
                "variable": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(1.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.square(tf.math.divide(self.tau_coarse, std))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_81": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_89": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_201": {
                "x": {
                    "value": "self.alpha_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_273": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_274": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_276": {
                "input": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.less(tf.cast(y_pred[:, 1], tf.float64), self.alpha)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_277": {
                "input": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), tau)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_283": {
                "x": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(total_abstentions, total_votes + total_abstentions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_292": {
                "x": {
                    "value": "tf.cast(0.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - adjustment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "shape": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_56": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_58": {
                "x": {
                    "value": "self.tau_coarse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.cast(y_pred[:, 1], tf.float64), clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.cast(y_pred[:, 1], tf.float64), clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_59": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_60": {
                "x": {
                    "value": "-tf.math.log(p)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.minimum(tf.cast(1.0, tf.float64), beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_292": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "manuscript_code/regression_JAMES/metrics.py": {
        "tensorflow": {
            "constant_55": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_61": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_63": {
                "variable": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_64": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "count_nonzero_92": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_125": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_126": {
                "variable": {
                    "value": "sigma_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigma_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(y_pred[:, 1], mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_129": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_156": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.subtract(y_true[:, 0], y_pred[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_158": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_185": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_191": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_192": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.subtract(y_true[:, 0], y_pred[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_193": {
                "variable": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_195": {
                "variable": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(error, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_196": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_223": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_224": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_230": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_232": {
                "variable": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_233": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_258": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_264": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_265": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_270": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_271": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_273": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_274": {
                "variable": {
                    "value": "likelihood_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_276": {
                "variable": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "likelihood_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(p, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_277": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_304": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_305": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_310": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_311": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_314": {
                "variable": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "count_nonzero_315": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "constant_339": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_345": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_346": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_351": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_352": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_355": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_356": {
                "variable": {
                    "value": "loglikelihood_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_358": {
                "variable": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglikelihood_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(logp, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_359": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_61": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sigma_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_131": {
                "x": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sigma_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_132": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_156": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(error)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(error_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_161": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_192": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_198": {
                "x": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(error)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(error_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_199": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_235": {
                "x": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(likelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_236": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_265": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(likelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_280": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_305": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_312": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_317": {
                "x": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logp)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loglikelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_318": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_346": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_353": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_361": {
                "x": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logp)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loglikelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_362": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "manuscript_code/regression_JAMES/network.py": {
        "tensorflow": {
            "Input_17": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concatenate_70": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[mu_unit, sigma_unit]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_73": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.concatenate([mu_unit, sigma_unit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_51": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_60": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomUniform(minval=0.1, maxval=0.5, seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomUniform(minval=0.1, maxval=0.5, seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_32": {
                "units": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomNormal_54": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_55": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomUniform_63": {
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomUniform_64": {
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_26": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_27": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_28": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_35": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_36": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_37": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_45": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_46": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_47": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regression/abstentionloss.py": {
        "tensorflow": {
            "Variable_177": {
                "variable": {
                    "value": "current_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_178": {
                "variable": {
                    "value": "current_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_48": {
                "variable": {
                    "value": "self.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kappa",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "self.tau_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_fine",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kappa",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "self.spinup_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "spinup_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spinup_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "self.coarse_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "coarse_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coarse_epochs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_63": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_70": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_115": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_133": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0] - y_true[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_134": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "self.setpoint - tf.cast(abstention_fraction, tf.float64)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_150": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0] - y_true[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_151": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred[:, 0] - y_true[:, 0], tf.float64)",
                            "Call"
                        ],
                        [
                            "self.setpoint - tf.cast(abstention_fraction, tf.float64)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_192": {
                "variable": {
                    "value": "self.setpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "setpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ],
                        [
                            "setpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_193": {
                "variable": {
                    "value": "self.alpha_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alpha_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ],
                        [
                            "alpha_init",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_299": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_300": {
                "variable": {
                    "value": "self.clip_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clip_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_301": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_306": {
                "variable": {
                    "value": "self.previous_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_307": {
                "variable": {
                    "value": "self.penultimate_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_320": {
                "variable": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_321": {
                "variable": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_329": {
                "variable": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_abstentions.sum()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "total_votes + total_abstentions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_332": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.k[0] * error - self.k[1] * self.previous_error + self.k[2] * self.penultimate_error",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.clip_at[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_at[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_366": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_367": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([length], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_368": {
                "variable": {
                    "value": "self.index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_84": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.divide(self.kappa, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_87": {
                "variable": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(1.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.square(tf.math.divide(self.kappa, std))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.multiply(-tf.math.log(p), confidence) - self.updater.alpha * tf.math.log(confidence)",
                            "BinOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.square(error)",
                            "Call"
                        ],
                        [
                            "tf.math.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_375": {
                "input_tensor": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_63": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_117": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_228": {
                "x": {
                    "value": "self.alpha_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_320": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_321": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_323": {
                "input": {
                    "value": "votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.less(tf.cast(y_pred[:, 1], tf.float64), self.alpha)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_324": {
                "input": {
                    "value": "abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), tau)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_330": {
                "x": {
                    "value": "abstention_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(total_abstentions, total_votes + total_abstentions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_338": {
                "x": {
                    "value": "tf.cast(0.0, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha - adjustment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "shape": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_81": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_84": {
                "x": {
                    "value": "self.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.cast(y_pred[:, 1], tf.float64), clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.cast(y_pred[:, 1], tf.float64), clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_87": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_88": {
                "x": {
                    "value": "-tf.math.log(p)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.minimum(tf.cast(1.0, tf.float64), beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_338": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_89": {
                "x": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.minimum(tf.cast(1.0, tf.float64), beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_88": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regression/metrics.py": {
        "tensorflow": {
            "constant_56": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_61": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_63": {
                "variable": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_64": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_92": {
                "variable": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "count_nonzero_93": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_122": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_127": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_128": {
                "variable": {
                    "value": "sigma_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigma_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(y_pred[:, 1], mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_131": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_159": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.subtract(y_true[:, 0], y_pred[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_161": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_190": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_195": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_196": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.subtract(y_true[:, 0], y_pred[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_197": {
                "variable": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.subtract(y_true[:, 0], y_pred[:, 0]))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_199": {
                "variable": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(error, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_200": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_228": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_229": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_235": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_236": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "variable": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_239": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_265": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_270": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_271": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_277": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_278": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_280": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_281": {
                "variable": {
                    "value": "likelihood_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_283": {
                "variable": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "likelihood_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(p, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_284": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_312": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_313": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_319": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_320": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_323": {
                "variable": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "count_nonzero_324": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "constant_350": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_355": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_356": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(y_pred[:, 1], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_362": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_363": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_366": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_367": {
                "variable": {
                    "value": "loglikelihood_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.math.log(p)",
                            "UnaryOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_369": {
                "variable": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglikelihood_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(logp, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_370": {
                "variable": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater_equal(tf.cast(y_pred[:, 1], tf.float64), self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ],
                        [
                            "tf.math.less(y_pred[:, 1], self.tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_61": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "batch_abstentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sigma_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_133": {
                "x": {
                    "value": "batch_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sigma_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_134": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_159": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_163": {
                "x": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(error)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(error_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_164": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_196": {
                "x": {
                    "value": "y_true[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_202": {
                "x": {
                    "value": "batch_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(error)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(error_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_203": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_241": {
                "x": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(likelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_271": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_286": {
                "x": {
                    "value": "batch_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(likelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_287": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_313": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_321": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_326": {
                "x": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logp)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loglikelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_327": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_356": {
                "x": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_364": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(norm_dist.prob(tf.cast(y_true[:, 0], tf.float64)), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p, clip_value_min=1e-10, clip_value_max=10000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_372": {
                "x": {
                    "value": "batch_loglikelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logp)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loglikelihood_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_373": {
                "x": {
                    "value": "batch_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(y_pred[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(error)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(p)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(logp)",
                            "Call"
                        ],
                        [
                            "tf.math.count_nonzero(mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "regression/network.py": {
        "tensorflow": {
            "Input_20": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concatenate_81": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[mu_unit, sigma_unit]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_84": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.concatenate([mu_unit, sigma_unit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_56": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_68": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomUniform(minval=0.1, maxval=0.5, seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomUniform(minval=0.1, maxval=0.5, seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "units": {
                    "value": "hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=ridge_penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_46": {
                "units": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "act_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1_l2(l1=0.0, l2=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(seed=network_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomNormal_60": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_61": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomUniform_72": {
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomUniform_74": {
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_29": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_30": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_31": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_39": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "ridge_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_40": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_41": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_50": {
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_51": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_52": {
                "seed": {
                    "value": "network_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}