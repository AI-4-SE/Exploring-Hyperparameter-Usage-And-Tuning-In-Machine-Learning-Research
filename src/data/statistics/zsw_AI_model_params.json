{
    "model.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_12": {
                "variable": {
                    "value": "self.q_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_13": {
                "variable": {
                    "value": "self.p_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_14": {
                "variable": {
                    "value": "self.a_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "embedding_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.a_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.Wc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.Wc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.vc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.Wb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.Wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.vd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.Wm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.vm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_34": {
                "variable": {
                    "value": "self.gru_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "12 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.vq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.Wp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.Wp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.vp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * encoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "a_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a_attention(a_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "hq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(hq, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "variable": {
                    "value": "hp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(hp, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "ait",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sjt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vc(torch.tanh(_s1 + _s2)).squeeze()",
                            "Call"
                        ],
                        [
                            "hp.bmm(_s1)",
                            "Call"
                        ],
                        [
                            "self.vd(torch.tanh(self.Wd(_s1 * _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vm(torch.tanh(self.Wm(_s1 - _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vs(torch.tanh(self.Ws(_s1 * _s2))).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "ait",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sjt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vc(torch.tanh(_s1 + _s2)).squeeze()",
                            "Call"
                        ],
                        [
                            "hp.bmm(_s1)",
                            "Call"
                        ],
                        [
                            "self.vd(torch.tanh(self.Wd(_s1 * _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vm(torch.tanh(self.Wm(_s1 - _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vs(torch.tanh(self.Ws(_s1 * _s2))).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "ait",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sjt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vc(torch.tanh(_s1 + _s2)).squeeze()",
                            "Call"
                        ],
                        [
                            "hp.bmm(_s1)",
                            "Call"
                        ],
                        [
                            "self.vd(torch.tanh(self.Wd(_s1 * _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vm(torch.tanh(self.Wm(_s1 - _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vs(torch.tanh(self.Ws(_s1 * _s2))).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "ait",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sjt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vc(torch.tanh(_s1 + _s2)).squeeze()",
                            "Call"
                        ],
                        [
                            "hp.bmm(_s1)",
                            "Call"
                        ],
                        [
                            "self.vd(torch.tanh(self.Wd(_s1 * _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vm(torch.tanh(self.Wm(_s1 - _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vs(torch.tanh(self.Ws(_s1 * _s2))).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "ait",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sjt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vc(torch.tanh(_s1 + _s2)).squeeze()",
                            "Call"
                        ],
                        [
                            "hp.bmm(_s1)",
                            "Call"
                        ],
                        [
                            "self.vd(torch.tanh(self.Wd(_s1 * _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vm(torch.tanh(self.Wm(_s1 - _s2))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.vs(torch.tanh(self.Ws(_s1 * _s2))).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "aggregation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hp, qts, qtc, qtd, qtb, qtm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "rq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vq(torch.tanh(self.Wq(hq))).transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.vp(self.Wp1(aggregation_representation) + self.Wp2(rq)).transpose(2, 1), 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_99": {
                "variable": {
                    "value": "rq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(hq, self.drop_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "sj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vp(self.Wp1(aggregation_representation) + self.Wp2(rq)).transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.prediction(rp))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_embedding.bmm(encoder_output.transpose(2, 1)).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_102": {
                "input": {
                    "value": "self.prediction(rp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_106": {
                "input": {
                    "value": "score[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_76": {
                "input": {
                    "value": "_s1 + _s2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_85": {
                "input": {
                    "value": "self.Wd(_s1 * _s2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "input": {
                    "value": "self.Wm(_s1 - _s2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "input": {
                    "value": "self.Ws(_s1 * _s2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "input": {
                    "value": "self.Wq(hq)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adamax_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_95": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model([query, passage, answer, False])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MwAN(vocab_size=vocab_size, embedding_size=args.emsize, encoder_size=args.nhid, drop_out=args.dropout)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}