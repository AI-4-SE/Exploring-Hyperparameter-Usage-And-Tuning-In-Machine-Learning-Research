{
    "expert_finding/metrics.py": {
        "sklearn": {}
    },
    "expert_finding/models/data_generator.py": {
        "sklearn": {}
    },
    "expert_finding/models/graph2gauss.py": {
        "sklearn": {
            "normalize_235": {
                "variable": {
                    "value": "self.tf_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "expert_finding.preprocessing.text.vectorizers.get_tf_dictionary(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "sparse_placeholder_53": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "W_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_mu",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sizes[-1], self.L]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "b_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_mu",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.L]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "W_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_sigma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sizes[-1], self.L]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "b_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_sigma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.L]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "hop_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.triplets[:, 0], self.triplets[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "hop_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.triplets[:, 0], self.triplets[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(eng_pos) + tf.exp(-eng_neg)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_126": {
                "variable": {
                    "value": "ij_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_127": {
                "variable": {
                    "value": "ij_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "trace_fac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigma_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ij_sigma[:, 1] / ij_sigma[:, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(sigma_ratio + 1e-14)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "mu_diff_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ij_mu[:, 0] - ij_mu[:, 1]) / ij_sigma[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_195": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_198": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_49": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sizes[i - 1], sizes[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sizes[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.X, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(encoded, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "a": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.X, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(encoded, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(encoded)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_mu', shape=[sizes[-1], self.L], dtype=tf.float32, initializer=w_init())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_102": {
                "a": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.X, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(encoded, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(encoded)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_sigma', shape=[sizes[-1], self.L], dtype=tf.float32, initializer=w_init())",
                            "Call"
                        ]
                    ]
                }
            },
            "square_111": {
                "x": {
                    "value": "eng_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.energy_kl(hop_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "x": {
                    "value": "-eng_neg",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_131": {
                "x": {
                    "value": "sigma_ratio + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_103": {
                "features": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(encoded, W_sigma) + b_sigma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_133": {
                "x": {
                    "value": "ij_mu[:, 0] - ij_mu[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_178": {
                "ref": {
                    "value": "self.saved_vars[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.saved_vars[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.X, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(encoded, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(encoded)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W{}'.format(i), shape=[sizes[i - 1], sizes[i]], dtype=tf.float32, initializer=w_init())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "expert_finding/models/graph2gauss_utils.py": {
        "sklearn": {
            "LogisticRegressionCV_301": {
                "variable": {
                    "value": "lrcv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_304": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "StratifiedShuffleSplit_308": {
                "variable": {
                    "value": "sss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - p_labeled",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n_repeat)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "f1_score_314": {
                "variable": {
                    "value": "f1_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "z[split_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrcv.predict(features[split_test])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_315": {
                "variable": {
                    "value": "f1_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "z[split_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrcv.predict(features[split_test])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_277": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "average_precision_score_277": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/gvnrt_expert_model.py": {
        "sklearn": {
            "normalize_316": {
                "variable": {
                    "value": "self.candidate_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "np.asarray(self.I_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_317": {
                "variable": {
                    "value": "self.document_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "np.asarray(self.sparse_embeddings())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_verbosity_21": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_75": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_78": {
                "variable": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inputJ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_89": {
                "variable": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_90": {
                "variable": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self.vectorJ, self.JW, adjoint_a=False, adjoint_b=False, name='wj')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_reduce_sum(self.vectorJ, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "self.M.sum(axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Xij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "wiwjProduct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.wi, self.wj)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_95": {
                "variable": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + self.Xij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_97": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n([wiwjProduct, self.bi, tf.negative(logXij)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add_n([wiwjProduct, self.bi, tf.negative(logXij)]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learnRate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_104": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_274": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_vector_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "pretrained_word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensorValue_185": {
                "variable": {
                    "value": "Jvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.nonzero()",
                            "Call"
                        ],
                        [
                            "np.array([[l, v] for (l, k) in enumerate(cols[ind]) for (m, v) in enumerate(sparse_indices[k])], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v for (i, k) in enumerate(cols[ind]) for v in sparse_vectors[k]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([N, M_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_276": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_94": {
                "x": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_97": {
                "inputs": {
                    "value": "[wiwjProduct, self.bi, tf.negative(logXij)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_286": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "negative_97": {
                "x": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(1 + self.Xij)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "expert_finding/models/idne.py": {
        "sklearn": {
            "normalize_149": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_327": {
                "variable": {
                    "value": "aw",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "aw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PP.dot(Wd.T)",
                            "Call"
                        ],
                        [
                            "np.zeros((PP.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.maximum(0, aw)",
                            "Call"
                        ],
                        [
                            "normalize(aw, 'l1', axis=0)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_verbosity_31": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_words, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self.inducing_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inducing_points",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[number_incuding_points, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.input_1_documents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_1_documents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.input_2_documents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_2_documents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(self.input_1_documents, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(self.input_2_documents, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_68": {
                "variable": {
                    "value": "w_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_1_documents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "w_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_2_documents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "scalar_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(attention_1, attention_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(self.input_x, scalar_product)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "variable": {
                    "value": "self.obj_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.negative(tf.log(self.score))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_93": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_158": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_160": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_65": {
                "x": {
                    "value": "self.input_1_documents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_66": {
                "x": {
                    "value": "self.input_2_documents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_73": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_86": {
                "x": {
                    "value": "attention_1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "attention_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_87": {
                "x": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "scalar_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(attention_1, attention_2), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "negative_89": {
                "x": {
                    "value": "tf.log(self.score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_163": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_89": {
                "x": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/post_ane_model.py": {
        "sklearn": {
            "normalize_16": {
                "X": {
                    "value": "A_dd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_23": {
                "variable": {
                    "value": "self.document_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "X": {
                    "value": "A_da.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/pre_ane_model.py": {
        "sklearn": {
            "normalize_47": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.model.get_embeddings()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "X": {
                    "value": "A_da",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_25": {
                "X": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_da @ A_da.T + A_dd",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "expert_finding/models/propagation_idne_model.py": {
        "sklearn": {
            "normalize_34": {
                "variable": {
                    "value": "self.docs_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_45": {
                "variable": {
                    "value": "self.bigraph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.bigraph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/propagation_model.py": {
        "sklearn": {
            "normalize_37": {
                "variable": {
                    "value": "self.bigraph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.bigraph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/propagation_tadw_model.py": {
        "sklearn": {
            "normalize_33": {
                "variable": {
                    "value": "self.docs_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_44": {
                "variable": {
                    "value": "self.bigraph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.bigraph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/tadw.py": {
        "sklearn": {
            "TruncatedSVD_33": {
                "variable": {
                    "value": "self.svd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_97": {
                "X": {
                    "value": "np.dot(self.T.T, self.H.T)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/voting_idne_model.py": {
        "sklearn": {
            "normalize_25": {
                "variable": {
                    "value": "self.docs_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/models/voting_tadw_model.py": {
        "sklearn": {
            "normalize_25": {
                "variable": {
                    "value": "self.docs_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "expert_finding/preprocessing/graph/random_walker.py": {
        "sklearn": {}
    },
    "expert_finding/preprocessing/text/vectorizers.py": {
        "sklearn": {}
    },
    "expert_finding/models/gvnrt.py": {
        "tensorflow": {
            "set_verbosity_18": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_73": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_75": {
                "variable": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inputJ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_86": {
                "variable": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_87": {
                "variable": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self.vectorJ, self.JW, adjoint_a=False, adjoint_b=False, name='wj')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_reduce_sum(self.vectorJ, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "self.M.sum(axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Xij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "wiwjProduct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.wi, self.wj)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_92": {
                "variable": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + self.Xij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_94": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n([wiwjProduct, self.bi, tf.negative(logXij)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add_n([wiwjProduct, self.bi, tf.negative(logXij)]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learnRate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_245": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_vector_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "pretrained_word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_98": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensorValue_182": {
                "variable": {
                    "value": "Jvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.nonzero()",
                            "Call"
                        ],
                        [
                            "np.array([[l, v] for (l, k) in enumerate(cols[ind]) for (m, v) in enumerate(sparse_indices[k])], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v for (i, k) in enumerate(cols[ind]) for v in sparse_vectors[k]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([N, M_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_247": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_91": {
                "x": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_94": {
                "inputs": {
                    "value": "[wiwjProduct, self.bi, tf.negative(logXij)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_257": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "negative_94": {
                "x": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(1 + self.Xij)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "expert_finding/models/transformer.py": {
        "tensorflow": {
            "cast_4": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_5": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(q)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_6": {
                "variable": {
                    "value": "q_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(q, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_7": {
                "variable": {
                    "value": "raw_attention_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q_tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(q, 0), [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(k, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "variable": {
                    "value": "words_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(raw_attention_logits + mask[:, tf.newaxis, :] * -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_15": {
                "variable": {
                    "value": "zero_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(words_weights, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "variable": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "zero_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(sums, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "topic_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_weights, v) / sums[:, tf.newaxis, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_46": {
                "variable": {
                    "value": "cos_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + tf.exp(10 * prod - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_6": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_7": {
                "a": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_15": {
                "x": {
                    "value": "words_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attention_logits, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "words_weights + zero_mask * 1e-09",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_28": {
                "x": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1 - mask, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "sums + zero_mask * 1e-09",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_logits / words_weights",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_logits / words_weights",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_47": {
                "tensor": {
                    "value": "tf.linalg.diag_part(cos_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_4": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_5": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_46": {
                "x": {
                    "value": "10 * prod - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_47": {
                "input": {
                    "value": "cos_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(1 + tf.exp(10 * prod - 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}