{
    "data/apada2seg_dataset.py": {
        "torch": {
            "Tensor_100": {
                "variable": {
                    "value": "Seg_imgs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/apada2seg_test_dataset.py": {
        "torch": {
            "Tensor_75": {
                "variable": {
                    "value": "Seg_imgs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/random_pair.py": {
        "torch": {}
    },
    "models/apada2seg_model.py": {
        "torch": {
            "cross_entropy_40": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "input[target.view(n, h, w, 1).repeat(1, 1, 1, c) >= 0].view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.from_numpy(arr).cuda().float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_51": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "input[target.view(n, h, w, 1).repeat(1, 1, 1, c) >= 0].view(-1, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_59": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(input)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n, h, w, 1).repeat(1, 1, 1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.from_numpy(arr).cuda().float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "input[target.view(n, h, w, 1).repeat(1, 1, 1, c) >= 0].view(-1, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_77": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_84": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "r_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_var * y_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.image_shifter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nl_size * self.nl_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.nl_size, self.nl_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "((self.nl_size - 1) // 2, (self.nl_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.summation_patcher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.nl_size * self.nl_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nl_size * self.nl_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.p_size, self.p_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "((self.p_size - 1) // 2, (self.p_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.nl_size * self.nl_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.neighbors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_size * self.n_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.n_size, self.n_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "((self.n_size - 1) // 2, (self.n_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.neighbor_summation_patcher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_size * self.n_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_size * self.n_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.p_size, self.p_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "((self.p_size - 1) // 2, (self.p_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.n_size * self.n_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "orig_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[orig.squeeze(dim=1) for i in range(self.nl_size * self.nl_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_191": {
                "variable": {
                    "value": "nume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-Dx_alpha / (Vx + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_210": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mind_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_mind - tar_mind",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred",
                            "Name"
                        ],
                        [
                            "j % self.p_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_101": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_target",
                            "Name"
                        ],
                        [
                            "j // self.p_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_103": {
                "input": {
                    "value": "torch.sum(y_var ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.nl_size, self.nl_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.p_size, self.p_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.n_size, self.n_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.p_size, self.p_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "L1Loss_270": {
                "variable": {
                    "value": "self.criterionCycle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_271": {
                "variable": {
                    "value": "self.criterionIdt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_275": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.netG_A.parameters(), self.netS_B.parameters(), self.netG_B.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "self.optimizer_D_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD_A.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_278": {
                "variable": {
                    "value": "self.optimizer_D_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD_B.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "dice_eso",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dice[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_103": {
                "input": {
                    "value": "y_var ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_143": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([x - cx, y - cy]).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_184": {
                "input": {
                    "value": "diff_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shifted - orig_stack",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_404": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(self.opt.crossentropy_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_470": {
                "input": {
                    "value": "self.seg_fake_B.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_471": {
                "input": {
                    "value": "self.real_Seg.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_549": {
                "input": {
                    "value": "self.real_B_seg.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_550": {
                "input": {
                    "value": "self.gt_real_B_seg.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "[x - cx, y - cy]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "save_45": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_53": {
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "Sequential_201": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "diffY",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x2.size()[2] - x1.size()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "variable": {
                    "value": "diffX",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x2.size()[3] - x1.size()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_350": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.inc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_448": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_channels_reduced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels // reduction_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_449": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels_reduced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels // reduction_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_450": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_451": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_468": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "fc_out_2.view(a, b, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_484": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_485": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_508": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "squeeze_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_tensor.view(batch_size, num_channels, -1).mean(dim=2)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "squeeze_tensor.view(batch_size, 1, a, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_535": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cSE(input_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_127": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_129": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "*conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_338": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_340": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_498": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "weights.view(1, channel, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_500": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "weights.view(1, channel, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_171": {
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_175": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_197": {
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "ngf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "MaxPool2d_322": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_380": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_381": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_399": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_402": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_191": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_196": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_220": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_236": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_295": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_296": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_297": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_305": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_308": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_393": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReplicationPad2d_222": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_238": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_75": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "util/image_pool.py": {
        "torch": {
            "unsqueeze_19": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images.data",
                            "Attribute"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "return_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(return_images, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "mean_31": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_31": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}