{
    "eval_generate.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(test_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "args.model_path",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "finetune_synpg.py": {
        "torch": {
            "DataLoader_269": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(train_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_270": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(valid_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Adam_276": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_277": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "dictionary.word2idx['<pad>']",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(train_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "targs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targs",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_274": {
                "f": {
                    "value": "args.model_path",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, 'synpg_epoch{:02d}.pt'.format(epoch))",
                    "possible_values": []
                }
            },
            "clip_grad_norm__124": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "targs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targs",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_139": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, 'synpg_epoch{:02d}.pt'.format(epoch))",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_239": {
                "variable": {
                    "value": "targs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targs",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "tmpls",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmpls",
                    "possible_values": [
                        [
                            "template2tensor(templates, args.max_tmpl_len, dictionary)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(templates), max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "tagss",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tagss",
                    "possible_values": [
                        [
                            "np.zeros((len(tmpls), args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tagss).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((len(tmpls), args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((len(tmpls), args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_123": {
                "f": {
                    "value": "args.synpg_model_path",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "args.pg_model_path",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.embedding_encoder",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "em_size",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.embedding_decoder",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "em_size",
                    "possible_values": []
                }
            },
            "Transformer_22": {
                "variable": {
                    "value": "self.transformer",
                    "possible_values": []
                },
                "d_model": {
                    "value": "em_size",
                    "possible_values": []
                },
                "nhead": {
                    "value": "6",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "em_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "possible_values": []
                }
            },
            "norm_45": {
                "variable": {
                    "value": "norm",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size, size)",
                    "possible_values": []
                }
            },
            "bernoulli_63": {
                "variable": {
                    "value": "drop_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.word_dropout * torch.ones(max_sent_len)",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "en_embeddings",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sent_embeddings, synt_embeddings)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "idxs",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_targ_len + 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "en_embeddings",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sent_embeddings, synt_embeddings)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "pe",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "possible_values": []
                }
            },
            "arange_156": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "div_term",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-np.log(10000.0) / d_model)",
                    "possible_values": []
                }
            },
            "sin_158": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "possible_values": []
                }
            },
            "cos_159": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "embedding",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "embedding",
                    "possible_values": []
                }
            },
            "max_133": {
                "variable": {
                    "value": "(values, idx)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.transformer(en_embeddings, de_embeddings, src_mask=src_mask, tgt_mask=tgt_mask)",
                            "Call"
                        ],
                        [
                            "outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(outputs.contiguous().view(-1, self.em_size))",
                            "Call"
                        ],
                        [
                            "outputs.view(batch_size, max_targ_len + 1, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "self.transformer.decoder(de_embeddings, memory, tgt_mask=tgt_mask)",
                            "Call"
                        ],
                        [
                            "self.linear(outputs[-1].contiguous().view(-1, self.em_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs / temp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "multinomial_136": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "F.softmax(outputs / temp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_157": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "max_sent_len",
                    "possible_values": [
                        [
                            "sents.size(1)",
                            "Call"
                        ],
                        [
                            "sents.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_parse_generator.py": {
        "torch": {
            "DataLoader_263": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(train_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(valid_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Adam_269": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_270": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "dictionary.word2idx['<pad>']",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(train_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "tmpls",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmpls",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_284": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, 'parse_generator_epoch{:02d}.pt'.format(epoch))",
                    "possible_values": []
                }
            },
            "clip_grad_norm__116": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "tmpls",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmpls",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, 'parse_generator_epoch{:02d}.pt'.format(epoch))",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "tmpls",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmpls",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_tmpl_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmpls).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_synpg.py": {
        "torch": {
            "DataLoader_264": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(train_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(valid_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Adam_272": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_273": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "dictionary.word2idx['<pad>']",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_289": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idxs",
                    "possible_values": [
                        [
                            "np.arange(len(train_data[0]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "targs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targs",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_287": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, 'synpg_epoch{:02d}.pt'.format(epoch))",
                    "possible_values": []
                }
            },
            "clip_grad_norm__119": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "targs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targs",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_134": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, 'synpg_epoch{:02d}.pt'.format(epoch))",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "sents",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sents",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sents).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "synts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "synts",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_synt_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(synts).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_234": {
                "variable": {
                    "value": "targs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targs",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, args.max_sent_len + 2), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targs).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}