{
    "FeatureSpaceCorrAnaTrainer.py": {
        "torch": {
            "MSELoss_16": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.audio_deri_autoencoder.parameters(), self.flow_autoencoder.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_27": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_28": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_141": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'generator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_146": {
                "f": {
                    "value": "dis_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'discriminator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_131": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "base_r_trainer.py": {
        "torch": {
            "BCELoss_23": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_24": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_25": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'generator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_134": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/r_generator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "base_trainer.py": {
        "torch": {
            "BCELoss_53": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_54": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_55": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_209": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'generator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_213": {
                "f": {
                    "value": "dis_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'discriminator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_28": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "corr_ana_autoencoder.py": {
        "torch": {
            "Sequential_5": {
                "*args": {
                    "value": "nn.Conv2d(in_c, out_c, k, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_c, out_c, k, s, p, out_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "*args": {
                    "value": "nn.Conv3d(in_c, out_c, k, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.ConvTranspose3d(in_c, out_c, k, s, p, out_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(1, 32, (3, 7), (1, 2), (1, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv2d(512, 512, 3, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d(in_c, 32, (3, 7, 7), (1, 2, 2), (1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv3d(512, 512, 3, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if use_flow else 3",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_7": {
                "num_features": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_8": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_14": {
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if use_flow else 3",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "out_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_22": {
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if use_flow else 3",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_23": {
                "num_features": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_30": {
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if use_flow else 3",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "out_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_31": {
                "num_features": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_56": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_93": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if use_flow else 3",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "corr_encoder.py": {
        "torch": {}
    },
    "dataset.py": {
        "torch": {
            "from_numpy_337": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_255": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_566": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_630": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "embedding.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "buf_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "buf_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(buf_f, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "buf_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "buf_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(buf_i, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_20": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_46": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_40": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_74": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_90": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_76": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_92": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "embedding_3d.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_20": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm3d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm3d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_47": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_48": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_88": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm3d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm3d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_103": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm3d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm3d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv3d_29": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm3d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm3d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_41": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm3d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm3d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_80": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_96": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_82": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_98": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flownet/FlowNetS.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_planes, out_planes, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_60": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_61": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_62": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_63": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_136": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_12": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "flownet/flows_gen.py": {
        "torch": {
            "cat_18": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(buf, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.flownet(torch.cat([prev_im, cur_im], 1))[0]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(flow, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "[prev_im, cur_im]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flownet/ft_grid_flow.py": {
        "torch": {}
    },
    "flownet/multiscaleloss.py": {
        "torch": {
            "norm_6": {
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_20": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_27": {
                "kernel_size": {
                    "value": "self.downscale * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.downscale * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "self.downscale * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.downscale * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_22": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_24": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "EPE_.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fun_dataset.py": {
        "torch": {
            "from_numpy_339": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_545": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_609": {
                "variable": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "cv2.calcOpticalFlowFarneback(prev_frm, cur_frm, None, 0.5, 3, 15, 3, 5, 1.2, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ],
                        [
                            "np.transpose(of, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of).float()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(of)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fun_generate_identiry.py": {
        "torch": {}
    },
    "fun_test.py": {
        "torch": {}
    },
    "pts3d.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.bottlenect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(channel_in, channel_out, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d(channel_out, 4 * channel_out, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "channel_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_50": {
                "in_channels": {
                    "value": "channel_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_66": {
                "in_channels": {
                    "value": "channel_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Upsample_83": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_84": {
                "in_channels": {
                    "value": "channel_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ],
                        [
                            "True if not normalizer else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_11": {
                "in_channels": {
                    "value": "channel_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_12": {
                "num_features": {
                    "value": "channel_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_dataloader.py": {
        "torch": {
            "DataLoader_6": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VaganDataset('/mnt/disk1/dat/lchen63/grid/data/pickle/', train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test_vgan.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {}
    },
    "trainer_base.py": {
        "torch": {
            "BCELoss_22": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_23": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_25": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_41": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'generator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_142": {
                "f": {
                    "value": "disc_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'discriminator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_130": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_base_r.py": {
        "torch": {
            "L1Loss_18": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_21": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_39": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'generator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_119": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_corr_perceptual_difference.py": {
        "torch": {}
    },
    "trainer_difference.py": {
        "torch": {}
    },
    "trainer_embedding_corr.py": {
        "torch": {}
    },
    "trainer_embeddings.py": {
        "torch": {
            "MSELoss_21": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_22": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "encoder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/mnt/disk0/dat/lchen63/grid/model/model_embedding/encoder_0.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/encoder_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_farneback.py": {
        "torch": {}
    },
    "trainer_flow_diff.py": {
        "torch": {}
    },
    "trainer_flownet.py": {
        "torch": {}
    },
    "trainer_flownet_pool.py": {
        "torch": {}
    },
    "trainer_model_vgan.py": {
        "torch": {
            "BCELoss_27": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_28": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_44": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_160": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'generator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_161": {
                "f": {
                    "value": "disc_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'discriminator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_87": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.noise_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.noise_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_model_vgg.py": {
        "torch": {
            "L1Loss_22": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_39": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'generator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_perceptual.py": {
        "torch": {
            "L1Loss_31": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_32": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_33": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_58": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_24": {
                "f": {
                    "value": "/mnt/disk1/dat/lchen63/grid/model/model_embedding/encoder_6.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_197": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'generator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_198": {
                "f": {
                    "value": "disc_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'discriminator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_170": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_r_perceptual.py": {
        "torch": {
            "L1Loss_26": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_27": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_28": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_21": {
                "f": {
                    "value": "/mnt/disk0/dat/lchen63/grid/model/model_embedding/encoder_6.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_151": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/mnt/disk0/dat/lchen63/grid/model/model_r_perceptual/generator_3.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_140": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_warp.py": {
        "torch": {
            "BCELoss_22": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_23": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_25": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_41": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'generator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_142": {
                "f": {
                    "value": "disc_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[path for path in paths if 'discriminator' in path][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_128": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trend.py": {
        "torch": {}
    },
    "vis_flow.py": {
        "torch": {}
    },
    "warp_test.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(img1_path)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "np.transpose(img1, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Variable(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_flo(flow_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(flow, 0)",
                            "Call"
                        ],
                        [
                            "np.transpose(flow, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(flow).type(torch.FloatTensor))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "warp_trainer_gan.py": {
        "torch": {
            "BCELoss_53": {
                "variable": {
                    "value": "self.bce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_54": {
                "variable": {
                    "value": "self.l1_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_55": {
                "variable": {
                    "value": "self.mse_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_72": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.device_ids.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_63": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'generator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_210": {
                "f": {
                    "value": "dis_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'discriminator_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_27": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/generator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/discriminator_{}.pth'.format(config.model_dir, cc)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}