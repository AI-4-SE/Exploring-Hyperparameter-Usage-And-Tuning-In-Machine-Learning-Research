{
    "make_demo_discover_rt/baseline_a2c.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_model.action.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "train_model.action.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "ADV",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "LR",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "variable": {
                    "value": "pg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ADV * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_66": {
                "variable": {
                    "value": "vf_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tf.squeeze(train_model.vf)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [nbatch])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_75": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "find_trainable_variables(variable_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_84": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "MethodArgument"
                        ],
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_78": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_116": {
                "session": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_util.get_session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'a2c_model'",
                            "MethodArgument"
                        ],
                        [
                            "'a2c_model'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "input": {
                    "value": "train_model.vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "make_demo_discover_rt/rollout_rt_evaluator.py": {
        "tensorflow": {
            "set_verbosity_5": {
                "level": {
                    "value": "tf.logging.FATAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "make_demo_discover_rt/test_a2c_and_abstract_routine.py": {
        "tensorflow": {
            "set_verbosity_9": {
                "level": {
                    "value": "tf.logging.FATAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "env_makers/torchrl_build_env.py": {
        "torch": {
            "from_numpy_185": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.venv.reset()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.clip((obs - self.ob_rms.mean) / np.sqrt(self.ob_rms.var + self.epsilon), -self.clipob, self.clipob)",
                            "Call"
                        ],
                        [
                            "self.venv.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.venv.reset()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.clip((obs - self.ob_rms.mean) / np.sqrt(self.ob_rms.var + self.epsilon), -self.clipob, self.clipob)",
                            "Call"
                        ],
                        [
                            "self.venv.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(reward).unsqueeze(dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_198": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "self.stacked_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(venv.num_envs,) + low.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_239": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "self.stacked_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.stacked_obs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/a2c_arguments.py": {
        "torch": {
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/algo/a2c.py": {
        "torch": {
            "RMSprop_32": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_33": {
                "variable": {
                    "value": "self.smooth_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__88": {
                "parameters": {
                    "value": "self.actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/algo/a2c_acktr.py": {
        "torch": {
            "RMSprop_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_58": {
                "variable": {
                    "value": "value_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__75": {
                "parameters": {
                    "value": "self.actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/algo/gail.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_25": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trunk.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "expert_state.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "expert_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[expert_state, expert_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "policy_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_state, policy_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "disc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "all_trajectories",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_118": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_trajectories['states'].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_125": {
                "variable": {
                    "value": "start_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "subsample_frequency",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_trajectories,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_79": {
                "variable": {
                    "value": "expert_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expert_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.trunk(torch.cat([expert_state, expert_action], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones(expert_d.size()).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "policy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.trunk(torch.cat([policy_state, policy_action], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros(policy_d.size()).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.trunk(torch.cat([state, action], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_47": {
                "outputs": {
                    "value": "disc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.trunk(mixup_data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "mixup_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * expert_data + (1 - alpha) * policy_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(disc.size()).to(disc.device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "self.trajectories[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "[policy_state, policy_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[expert_state, expert_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "expert_d.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "policy_d.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/algo/kfac.py": {
        "torch": {
            "SGD_139": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr * (1 - self.momentum)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_18": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, (padding[1], padding[1], padding[0], padding[0])).data",
                            "Attribute"
                        ],
                        [
                            "x.unfold(2, kernel_size[0], stride[0])",
                            "Call"
                        ],
                        [
                            "x.unfold(3, kernel_size[1], stride[1])",
                            "Call"
                        ],
                        [
                            "x.transpose_(1, 2).transpose_(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), x.size(2), x.size(3) * x.size(4) * x.size(5))",
                            "Call"
                        ],
                        [
                            "self.module(input)",
                            "Call"
                        ],
                        [
                            "self.add_bias(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding[1], padding[1], padding[0], padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_grad_enabled_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "symeig_208": {
                "variable": {
                    "value": "(self.d_a[m], self.Q_a[m])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.m_aa[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "symeig_210": {
                "variable": {
                    "value": "(self.d_g[m], self.Q_g[m])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.m_gg[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/algo/ppo.py": {
        "torch": {
            "Adam_32": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_61": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_log_probs - old_action_log_probs_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__82": {
                "parameters": {
                    "value": "self.actor_critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_64": {
                "input": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(action_log_probs - old_action_log_probs_batch)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0 - self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 + self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_66": {
                "input": {
                    "value": "surr1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ratio * adv_targ",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_74": {
                "input": {
                    "value": "value_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(values - return_batch).pow(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/distributions.py": {
        "torch": {
            "zeros_90": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "action_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_56": {
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchrl_with_routines/model.py": {
        "torch": {
            "Sequential_179": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(num_inputs, 32, 8, stride=4))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(num_inputs, hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(num_inputs, hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_93": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "recurrent_input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "32 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_212": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchrl_with_routines/storage.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "self.obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*obs_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "self.recurrent_hidden_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "recurrent_hidden_state_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "self.value_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "self.returns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "self.action_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "action_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "action_space.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_31": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "self.bad_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchSampler_128": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(range(batch_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "mini_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size // num_mini_batch",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_158": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_184": {
                "variable": {
                    "value": "obs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obs_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.obs[:-1].view(-1, *self.obs.size()[2:])[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(obs_batch, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, obs_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "actions_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.actions.view(-1, self.actions.size(-1))[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_batch, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, actions_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "value_preds_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value_preds_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.value_preds[:-1].view(-1, 1)[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(value_preds_batch, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, value_preds_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "return_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.returns[:-1].view(-1, 1)[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(return_batch, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, return_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "masks_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.masks[:-1].view(-1, 1)[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks_batch, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, masks_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "old_action_log_probs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "old_action_log_probs_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.action_log_probs.view(-1, 1)[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(old_action_log_probs_batch, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, old_action_log_probs_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "adv_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_targ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "advantages.view(-1, 1)[indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(adv_targ, 1)",
                            "Call"
                        ],
                        [
                            "_flatten_helper(T, N, adv_targ)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "recurrent_hidden_states_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recurrent_hidden_states_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_20": {
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_processes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rewards.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_129": {
                "indices": {
                    "value": "range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tensor_list.py": {
        "torch": {}
    },
    "utils/training.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}